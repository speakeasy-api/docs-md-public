import * as z from 'zod';

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Activity$ {
    /** @deprecated use `Activity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Activity_2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Activity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Activity$Outbound, z.ZodTypeDef, Activity_2>;
    /** @deprecated use `Activity$Outbound` instead. */
    type Outbound = Activity$Outbound;
}

/** @internal */
declare const Activity$inboundSchema: z.ZodType<Activity_2, z.ZodTypeDef, unknown>;

/** @internal */
declare type Activity$Outbound = {
    events: Array<ActivityEvent$Outbound>;
};

/** @internal */
declare const Activity$outboundSchema: z.ZodType<Activity$Outbound, z.ZodTypeDef, Activity_2>;

declare class Activity extends ClientSDK {
    /**
     * Report document activity
     *
     * @remarks
     * Report user activity that occurs on indexed documents such as viewing or editing. This signal improves search quality.
     */
    report(request: components.Activity, options?: RequestOptions): Promise<void>;
    /**
     * Report client activity
     *
     * @remarks
     * Report events that happen to results within a Glean client UI, such as search result views and clicks.  This signal improves search quality.
     */
    feedback(feedback1?: components.Feedback | undefined, feedbackQueryParameter?: string | undefined, options?: RequestOptions): Promise<void>;
}

declare type Activity_2 = {
    events: Array<ActivityEvent>;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ActivityEnum$ {
    /** @deprecated use `ActivityEnum$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "ALL";
        readonly Search: "SEARCH";
    }>;
    /** @deprecated use `ActivityEnum$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "ALL";
        readonly Search: "SEARCH";
    }>;
}

/** @internal */
declare const ActivityEnum$inboundSchema: z.ZodNativeEnum<typeof ActivityEnum>;

/** @internal */
declare const ActivityEnum$outboundSchema: z.ZodNativeEnum<typeof ActivityEnum>;

/**
 * Activity e.g. search, home page visit or all.
 */
declare const ActivityEnum: {
    readonly All: "ALL";
    readonly Search: "SEARCH";
};

/**
 * Activity e.g. search, home page visit or all.
 */
declare type ActivityEnum = ClosedEnum<typeof ActivityEnum>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ActivityEvent$ {
    /** @deprecated use `ActivityEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityEvent$Outbound, z.ZodTypeDef, ActivityEvent>;
    /** @deprecated use `ActivityEvent$Outbound` instead. */
    type Outbound = ActivityEvent$Outbound;
}

/** @internal */
declare const ActivityEvent$inboundSchema: z.ZodType<ActivityEvent, z.ZodTypeDef, unknown>;

/** @internal */
declare type ActivityEvent$Outbound = {
    id?: string | undefined;
    action: string;
    params?: ActivityEventParams$Outbound | undefined;
    timestamp: string;
    url: string;
};

/** @internal */
declare const ActivityEvent$outboundSchema: z.ZodType<ActivityEvent$Outbound, z.ZodTypeDef, ActivityEvent>;

declare type ActivityEvent = {
    /**
     * Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
     */
    id?: string | undefined;
    /**
     * The type of activity this represents.
     */
    action: ActivityEventAction;
    params?: ActivityEventParams | undefined;
    /**
     * The ISO 8601 timestamp when the activity began.
     */
    timestamp: Date;
    /**
     * The URL of the activity.
     */
    url: string;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ActivityEventAction$ {
    /** @deprecated use `ActivityEventAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly View: "VIEW";
        readonly Edit: "EDIT";
        readonly Search: "SEARCH";
        readonly Comment: "COMMENT";
        readonly Crawl: "CRAWL";
        readonly HistoricalSearch: "HISTORICAL_SEARCH";
        readonly HistoricalView: "HISTORICAL_VIEW";
    }>;
    /** @deprecated use `ActivityEventAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly View: "VIEW";
        readonly Edit: "EDIT";
        readonly Search: "SEARCH";
        readonly Comment: "COMMENT";
        readonly Crawl: "CRAWL";
        readonly HistoricalSearch: "HISTORICAL_SEARCH";
        readonly HistoricalView: "HISTORICAL_VIEW";
    }>;
}

/** @internal */
declare const ActivityEventAction$inboundSchema: z.ZodNativeEnum<typeof ActivityEventAction>;

/** @internal */
declare const ActivityEventAction$outboundSchema: z.ZodNativeEnum<typeof ActivityEventAction>;

/**
 * The type of activity this represents.
 */
declare const ActivityEventAction: {
    readonly View: "VIEW";
    readonly Edit: "EDIT";
    readonly Search: "SEARCH";
    readonly Comment: "COMMENT";
    readonly Crawl: "CRAWL";
    readonly HistoricalSearch: "HISTORICAL_SEARCH";
    readonly HistoricalView: "HISTORICAL_VIEW";
};

/**
 * The type of activity this represents.
 */
declare type ActivityEventAction = ClosedEnum<typeof ActivityEventAction>;

declare function activityEventFromJSON(jsonString: string): Result<ActivityEvent, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ActivityEventParams$ {
    /** @deprecated use `ActivityEventParams$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ActivityEventParams, z.ZodTypeDef, unknown>;
    /** @deprecated use `ActivityEventParams$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ActivityEventParams$Outbound, z.ZodTypeDef, ActivityEventParams>;
    /** @deprecated use `ActivityEventParams$Outbound` instead. */
    type Outbound = ActivityEventParams$Outbound;
}

/** @internal */
declare const ActivityEventParams$inboundSchema: z.ZodType<ActivityEventParams, z.ZodTypeDef, unknown>;

/** @internal */
declare type ActivityEventParams$Outbound = {
    bodyContent?: string | undefined;
    datasourceInstance?: string | undefined;
    datasource?: string | undefined;
    instanceOnlyName?: string | undefined;
    duration?: number | undefined;
    query?: string | undefined;
    referrer?: string | undefined;
    title?: string | undefined;
    truncated?: boolean | undefined;
};

/** @internal */
declare const ActivityEventParams$outboundSchema: z.ZodType<ActivityEventParams$Outbound, z.ZodTypeDef, ActivityEventParams>;

declare type ActivityEventParams = {
    /**
     * The HTML content of the page body.
     */
    bodyContent?: string | undefined;
    /**
     * The full datasource instance name inferred from the URL of the event
     */
    datasourceInstance?: string | undefined;
    /**
     * The datasource without the instance inferred from the URL of the event
     */
    datasource?: string | undefined;
    /**
     * The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event
     */
    instanceOnlyName?: string | undefined;
    /**
     * Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.
     */
    duration?: number | undefined;
    /**
     * The user's search query associated with a SEARCH.
     */
    query?: string | undefined;
    /**
     * The referring URL of the VIEW or SEARCH.
     */
    referrer?: string | undefined;
    /**
     * The page title associated with the URL of the event
     */
    title?: string | undefined;
    /**
     * Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when a `VIEW` is finished.
     */
    truncated?: boolean | undefined;
};

declare function activityEventParamsFromJSON(jsonString: string): Result<ActivityEventParams, SDKValidationError>;

declare function activityEventParamsToJSON(activityEventParams: ActivityEventParams): string;

declare function activityEventToJSON(activityEvent: ActivityEvent): string;

declare function activityFromJSON(jsonString: string): Result<Activity_2, SDKValidationError>;

declare function activityToJSON(activity: Activity_2): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AddCollectionItemsError$ {
    /** @deprecated use `AddCollectionItemsError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AddCollectionItemsError, z.ZodTypeDef, unknown>;
    /** @deprecated use `AddCollectionItemsError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AddCollectionItemsError$Outbound, z.ZodTypeDef, AddCollectionItemsError>;
    /** @deprecated use `AddCollectionItemsError$Outbound` instead. */
    type Outbound = AddCollectionItemsError$Outbound;
}

/** @internal */
declare const AddCollectionItemsError$inboundSchema: z.ZodType<AddCollectionItemsError, z.ZodTypeDef, unknown>;

/** @internal */
declare type AddCollectionItemsError$Outbound = {
    errorType?: string | undefined;
};

/** @internal */
declare const AddCollectionItemsError$outboundSchema: z.ZodType<AddCollectionItemsError$Outbound, z.ZodTypeDef, AddCollectionItemsError>;

declare type AddCollectionItemsError = {
    errorType?: AddCollectionItemsErrorErrorType | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AddCollectionItemsErrorErrorType$ {
    /** @deprecated use `AddCollectionItemsErrorErrorType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ExistingItem: "EXISTING_ITEM";
    }>;
    /** @deprecated use `AddCollectionItemsErrorErrorType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ExistingItem: "EXISTING_ITEM";
    }>;
}

/** @internal */
declare const AddCollectionItemsErrorErrorType$inboundSchema: z.ZodNativeEnum<typeof AddCollectionItemsErrorErrorType>;

/** @internal */
declare const AddCollectionItemsErrorErrorType$outboundSchema: z.ZodNativeEnum<typeof AddCollectionItemsErrorErrorType>;

declare const AddCollectionItemsErrorErrorType: {
    readonly ExistingItem: "EXISTING_ITEM";
};

declare type AddCollectionItemsErrorErrorType = ClosedEnum<typeof AddCollectionItemsErrorErrorType>;

declare function addCollectionItemsErrorFromJSON(jsonString: string): Result<AddCollectionItemsError, SDKValidationError>;

declare function addCollectionItemsErrorToJSON(addCollectionItemsError: AddCollectionItemsError): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AddCollectionItemsRequest$ {
    /** @deprecated use `AddCollectionItemsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AddCollectionItemsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `AddCollectionItemsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AddCollectionItemsRequest$Outbound, z.ZodTypeDef, AddCollectionItemsRequest>;
    /** @deprecated use `AddCollectionItemsRequest$Outbound` instead. */
    type Outbound = AddCollectionItemsRequest$Outbound;
}

/** @internal */
declare const AddCollectionItemsRequest$inboundSchema: z.ZodType<AddCollectionItemsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type AddCollectionItemsRequest$Outbound = {
    collectionId: number;
    addedCollectionItemDescriptors?: Array<CollectionItemDescriptor$Outbound> | undefined;
};

/** @internal */
declare const AddCollectionItemsRequest$outboundSchema: z.ZodType<AddCollectionItemsRequest$Outbound, z.ZodTypeDef, AddCollectionItemsRequest>;

declare type AddCollectionItemsRequest = {
    /**
     * The ID of the Collection to add items to.
     */
    collectionId: number;
    /**
     * The CollectionItemDescriptors of the items being added.
     */
    addedCollectionItemDescriptors?: Array<CollectionItemDescriptor> | undefined;
};

declare function addCollectionItemsRequestFromJSON(jsonString: string): Result<AddCollectionItemsRequest, SDKValidationError>;

declare function addCollectionItemsRequestToJSON(addCollectionItemsRequest: AddCollectionItemsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AddCollectionItemsResponse$ {
    /** @deprecated use `AddCollectionItemsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AddCollectionItemsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `AddCollectionItemsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AddCollectionItemsResponse$Outbound, z.ZodTypeDef, AddCollectionItemsResponse>;
    /** @deprecated use `AddCollectionItemsResponse$Outbound` instead. */
    type Outbound = AddCollectionItemsResponse$Outbound;
}

/** @internal */
declare const AddCollectionItemsResponse$inboundSchema: z.ZodType<AddCollectionItemsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type AddCollectionItemsResponse$Outbound = {
    collection?: Collection$Outbound | undefined;
    error?: AddCollectionItemsError$Outbound | undefined;
};

/** @internal */
declare const AddCollectionItemsResponse$outboundSchema: z.ZodType<AddCollectionItemsResponse$Outbound, z.ZodTypeDef, AddCollectionItemsResponse>;

declare type AddCollectionItemsResponse = {
    collection?: Collection | undefined;
    error?: AddCollectionItemsError | undefined;
};

declare function addCollectionItemsResponseFromJSON(jsonString: string): Result<AddCollectionItemsResponse, SDKValidationError>;

declare function addCollectionItemsResponseToJSON(addCollectionItemsResponse: AddCollectionItemsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AdditionalFieldDefinition$ {
    /** @deprecated use `AdditionalFieldDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AdditionalFieldDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `AdditionalFieldDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AdditionalFieldDefinition$Outbound, z.ZodTypeDef, AdditionalFieldDefinition>;
    /** @deprecated use `AdditionalFieldDefinition$Outbound` instead. */
    type Outbound = AdditionalFieldDefinition$Outbound;
}

/** @internal */
declare const AdditionalFieldDefinition$inboundSchema: z.ZodType<AdditionalFieldDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type AdditionalFieldDefinition$Outbound = {
    key?: string | undefined;
    value?: Array<Value$Outbound> | undefined;
};

/** @internal */
declare const AdditionalFieldDefinition$outboundSchema: z.ZodType<AdditionalFieldDefinition$Outbound, z.ZodTypeDef, AdditionalFieldDefinition>;

/**
 * Additional information about the employee or team.
 */
declare type AdditionalFieldDefinition = {
    /**
     * Key to reference this field, e.g. "languages". Note that the key should be all lowercase alphabetic characters with no numbers, spaces, hyphens or underscores.
     */
    key?: string | undefined;
    /**
     * List of type string or HypertextField.
     *
     * @remarks
     *
     * HypertextField is defined as
     * ```
     * {
     *   anchor: string,    // Anchor text for the hypertext field.
     *   hyperlink: string, // URL for the hypertext field.
     * }
     * ```
     * Example: ```{"anchor":"Glean","hyperlink":"https://glean.com"}```
     *
     * When OpenAPI Generator supports oneOf, we will semantically enforce this in the docs.
     *
     * **Note**: If using the Python SDK to pass in a list of strings, the value may need to be a list of dictionaries. In that case, the key in that dictionary will be ignored.
     * Example: ```"languages": [{"lang":"English","lang":"Spanish",...}]```. In this case, the key "lang" will be ignored and can even be passed in as an empty string.
     */
    value?: Array<Value> | undefined;
};

declare function additionalFieldDefinitionFromJSON(jsonString: string): Result<AdditionalFieldDefinition, SDKValidationError>;

declare function additionalFieldDefinitionToJSON(additionalFieldDefinition: AdditionalFieldDefinition): string;

declare type AfterErrorContext = HookContext & {};

declare interface AfterErrorHook {
    /**
     * A hook that is called after the SDK encounters an error, or a
     * non-successful response. The hook can introduce instrumentation code such
     * as logging, tracing and metrics or modify the response or error values.
     */
    afterError: (hookCtx: AfterErrorContext, response: Response | null, error: unknown) => Awaitable_2<{
        response: Response | null;
        error: unknown;
    }>;
}

declare type AfterSuccessContext = HookContext & {};

declare interface AfterSuccessHook {
    /**
     * A hook that is called after the SDK receives a response. The hook can
     * introduce instrumentation code such as logging, tracing and metrics or
     * modify the response before it is handled or throw an error to stop the
     * response from being handled.
     */
    afterSuccess: (hookCtx: AfterSuccessContext, response: Response) => Awaitable_2<Response>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Agent$ {
    /** @deprecated use `Agent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Agent, z.ZodTypeDef, unknown>;
    /** @deprecated use `Agent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Agent$Outbound, z.ZodTypeDef, Agent>;
    /** @deprecated use `Agent$Outbound` instead. */
    type Outbound = Agent$Outbound;
}

/** @internal */
declare const Agent$inboundSchema: z.ZodType<Agent, z.ZodTypeDef, unknown>;

/** @internal */
declare type Agent$Outbound = {
    agent_id: string;
    name: string;
    description?: string | undefined;
    metadata?: AgentMetadata$Outbound | undefined;
    capabilities: AgentCapabilities$Outbound;
};

/** @internal */
declare const Agent$outboundSchema: z.ZodType<Agent$Outbound, z.ZodTypeDef, Agent>;

declare type Agent = {
    /**
     * The ID of the agent.
     */
    agentId: string;
    /**
     * The name of the agent
     */
    name: string;
    /**
     * The description of the agent.
     */
    description?: string | undefined;
    /**
     * The agent metadata. Currently not implemented.
     */
    metadata?: AgentMetadata | undefined;
    /**
     * Describes features that the agent supports. example: {
     *
     * @remarks
     *   "ap.io.messages": true,
     *   "ap.io.streaming": true
     * }
     */
    capabilities: AgentCapabilities;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AgentCapabilities$ {
    /** @deprecated use `AgentCapabilities$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AgentCapabilities, z.ZodTypeDef, unknown>;
    /** @deprecated use `AgentCapabilities$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AgentCapabilities$Outbound, z.ZodTypeDef, AgentCapabilities>;
    /** @deprecated use `AgentCapabilities$Outbound` instead. */
    type Outbound = AgentCapabilities$Outbound;
}

/** @internal */
declare const AgentCapabilities$inboundSchema: z.ZodType<AgentCapabilities, z.ZodTypeDef, unknown>;

/** @internal */
declare type AgentCapabilities$Outbound = {
    "ap.io.messages"?: boolean | undefined;
    "ap.io.streaming"?: boolean | undefined;
    [additionalProperties: string]: unknown;
};

/** @internal */
declare const AgentCapabilities$outboundSchema: z.ZodType<AgentCapabilities$Outbound, z.ZodTypeDef, AgentCapabilities>;

/**
 * Describes features that the agent supports. example: {
 *
 * @remarks
 *   "ap.io.messages": true,
 *   "ap.io.streaming": true
 * }
 */
declare type AgentCapabilities = {
    /**
     * Whether the agent supports messages as an input. If true, you'll pass `messages` as an input when running the agent.
     */
    apIoMessages?: boolean | undefined;
    /**
     * Whether the agent supports streaming output. If true, you you can stream agent ouput. All agents currently support streaming.
     */
    apIoStreaming?: boolean | undefined;
    additionalProperties?: {
        [k: string]: any;
    };
};

declare function agentCapabilitiesFromJSON(jsonString: string): Result<AgentCapabilities, SDKValidationError>;

declare function agentCapabilitiesToJSON(agentCapabilities: AgentCapabilities): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AgentConfig$ {
    /** @deprecated use `AgentConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AgentConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `AgentConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AgentConfig$Outbound, z.ZodTypeDef, AgentConfig>;
    /** @deprecated use `AgentConfig$Outbound` instead. */
    type Outbound = AgentConfig$Outbound;
}

/** @internal */
declare const AgentConfig$inboundSchema: z.ZodType<AgentConfig, z.ZodTypeDef, unknown>;

/** @internal */
declare type AgentConfig$Outbound = {
    agent?: string | undefined;
    toolSets?: ToolSets$Outbound | undefined;
    mode?: string | undefined;
};

/** @internal */
declare const AgentConfig$outboundSchema: z.ZodType<AgentConfig$Outbound, z.ZodTypeDef, AgentConfig>;

/**
 * Describes the agent that executes the request.
 */
declare type AgentConfig = {
    /**
     * Name of the agent.
     */
    agent?: AgentEnum | undefined;
    /**
     * The types of tools that the agent is allowed to use. Only works with FAST and ADVANCED `agent` values
     */
    toolSets?: ToolSets | undefined;
    /**
     * Top level modes to run GleanChat in.
     */
    mode?: Mode | undefined;
};

declare function agentConfigFromJSON(jsonString: string): Result<AgentConfig, SDKValidationError>;

declare function agentConfigToJSON(agentConfig: AgentConfig): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AgentEnum$ {
    /** @deprecated use `AgentEnum$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Default: "DEFAULT";
        readonly Gpt: "GPT";
        readonly Universal: "UNIVERSAL";
        readonly Fast: "FAST";
        readonly Advanced: "ADVANCED";
    }>;
    /** @deprecated use `AgentEnum$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Default: "DEFAULT";
        readonly Gpt: "GPT";
        readonly Universal: "UNIVERSAL";
        readonly Fast: "FAST";
        readonly Advanced: "ADVANCED";
    }>;
}

/** @internal */
declare const AgentEnum$inboundSchema: z.ZodNativeEnum<typeof AgentEnum>;

/** @internal */
declare const AgentEnum$outboundSchema: z.ZodNativeEnum<typeof AgentEnum>;

/**
 * Name of the agent.
 */
declare const AgentEnum: {
    readonly Default: "DEFAULT";
    readonly Gpt: "GPT";
    readonly Universal: "UNIVERSAL";
    readonly Fast: "FAST";
    readonly Advanced: "ADVANCED";
};

/**
 * Name of the agent.
 */
declare type AgentEnum = ClosedEnum<typeof AgentEnum>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AgentExecutionStatus$ {
    /** @deprecated use `AgentExecutionStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Success: "success";
    }>;
    /** @deprecated use `AgentExecutionStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Error: "error";
        readonly Success: "success";
    }>;
}

/** @internal */
declare const AgentExecutionStatus$inboundSchema: z.ZodNativeEnum<typeof AgentExecutionStatus>;

/** @internal */
declare const AgentExecutionStatus$outboundSchema: z.ZodNativeEnum<typeof AgentExecutionStatus>;

/**
 * The status of the run. One of 'error', 'success'.
 */
declare const AgentExecutionStatus: {
    readonly Error: "error";
    readonly Success: "success";
};

/**
 * The status of the run. One of 'error', 'success'.
 */
declare type AgentExecutionStatus = ClosedEnum<typeof AgentExecutionStatus>;

declare function agentFromJSON(jsonString: string): Result<Agent, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AgentMetadata$ {
    /** @deprecated use `AgentMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AgentMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `AgentMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AgentMetadata$Outbound, z.ZodTypeDef, AgentMetadata>;
    /** @deprecated use `AgentMetadata$Outbound` instead. */
    type Outbound = AgentMetadata$Outbound;
}

/** @internal */
declare const AgentMetadata$inboundSchema: z.ZodType<AgentMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type AgentMetadata$Outbound = {};

/** @internal */
declare const AgentMetadata$outboundSchema: z.ZodType<AgentMetadata$Outbound, z.ZodTypeDef, AgentMetadata>;

/**
 * The agent metadata. Currently not implemented.
 */
declare type AgentMetadata = {};

declare function agentMetadataFromJSON(jsonString: string): Result<AgentMetadata, SDKValidationError>;

declare function agentMetadataToJSON(agentMetadata: AgentMetadata): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AgentRun$ {
    /** @deprecated use `AgentRun$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AgentRun, z.ZodTypeDef, unknown>;
    /** @deprecated use `AgentRun$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AgentRun$Outbound, z.ZodTypeDef, AgentRun>;
    /** @deprecated use `AgentRun$Outbound` instead. */
    type Outbound = AgentRun$Outbound;
}

/** @internal */
declare const AgentRun$inboundSchema: z.ZodType<AgentRun, z.ZodTypeDef, unknown>;

/** @internal */
declare type AgentRun$Outbound = {
    agent_id: string;
    input?: {
        [k: string]: any;
    } | undefined;
    messages?: Array<Message$Outbound> | undefined;
    metadata?: {
        [k: string]: any;
    } | undefined;
    status?: string | undefined;
};

/** @internal */
declare const AgentRun$outboundSchema: z.ZodType<AgentRun$Outbound, z.ZodTypeDef, AgentRun>;

/**
 * Payload for creating a run.
 */
declare type AgentRun = {
    /**
     * The ID of the agent to run.
     */
    agentId: string;
    /**
     * The input to the agent.
     */
    input?: {
        [k: string]: any;
    } | undefined;
    /**
     * The messages to pass an input to the agent.
     */
    messages?: Array<Message> | undefined;
    /**
     * The metadata to pass to the agent.
     */
    metadata?: {
        [k: string]: any;
    } | undefined;
    /**
     * The status of the run. One of 'error', 'success'.
     */
    status?: AgentExecutionStatus | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AgentRunCreate$ {
    /** @deprecated use `AgentRunCreate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AgentRunCreate, z.ZodTypeDef, unknown>;
    /** @deprecated use `AgentRunCreate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AgentRunCreate$Outbound, z.ZodTypeDef, AgentRunCreate>;
    /** @deprecated use `AgentRunCreate$Outbound` instead. */
    type Outbound = AgentRunCreate$Outbound;
}

/** @internal */
declare const AgentRunCreate$inboundSchema: z.ZodType<AgentRunCreate, z.ZodTypeDef, unknown>;

/** @internal */
declare type AgentRunCreate$Outbound = {
    agent_id: string;
    input?: {
        [k: string]: any;
    } | undefined;
    messages?: Array<Message$Outbound> | undefined;
    metadata?: {
        [k: string]: any;
    } | undefined;
};

/** @internal */
declare const AgentRunCreate$outboundSchema: z.ZodType<AgentRunCreate$Outbound, z.ZodTypeDef, AgentRunCreate>;

/**
 * Payload for creating a run.
 */
declare type AgentRunCreate = {
    /**
     * The ID of the agent to run.
     */
    agentId: string;
    /**
     * The input to the agent.
     */
    input?: {
        [k: string]: any;
    } | undefined;
    /**
     * The messages to pass an input to the agent.
     */
    messages?: Array<Message> | undefined;
    /**
     * The metadata to pass to the agent.
     */
    metadata?: {
        [k: string]: any;
    } | undefined;
};

declare function agentRunCreateFromJSON(jsonString: string): Result<AgentRunCreate, SDKValidationError>;

declare function agentRunCreateToJSON(agentRunCreate: AgentRunCreate): string;

declare function agentRunFromJSON(jsonString: string): Result<AgentRun, SDKValidationError>;

declare function agentRunToJSON(agentRun: AgentRun): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AgentRunWaitResponse$ {
    /** @deprecated use `AgentRunWaitResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AgentRunWaitResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `AgentRunWaitResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AgentRunWaitResponse$Outbound, z.ZodTypeDef, AgentRunWaitResponse>;
    /** @deprecated use `AgentRunWaitResponse$Outbound` instead. */
    type Outbound = AgentRunWaitResponse$Outbound;
}

/** @internal */
declare const AgentRunWaitResponse$inboundSchema: z.ZodType<AgentRunWaitResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type AgentRunWaitResponse$Outbound = {
    run?: AgentRun$Outbound | undefined;
    messages?: Array<Message$Outbound> | undefined;
};

/** @internal */
declare const AgentRunWaitResponse$outboundSchema: z.ZodType<AgentRunWaitResponse$Outbound, z.ZodTypeDef, AgentRunWaitResponse>;

declare type AgentRunWaitResponse = {
    run?: AgentRun | undefined;
    /**
     * The messages returned by the run.
     */
    messages?: Array<Message> | undefined;
};

declare function agentRunWaitResponseFromJSON(jsonString: string): Result<AgentRunWaitResponse, SDKValidationError>;

declare function agentRunWaitResponseToJSON(agentRunWaitResponse: AgentRunWaitResponse): string;

declare class Agents extends ClientSDK {
    /**
     * Retrieve an agent
     *
     * @remarks
     * Returns details of an [agent](https://developers.glean.com/agents/agents-api) created in the Agent Builder.
     */
    retrieve(agentId: string, timezoneOffset?: number | undefined, options?: RequestOptions): Promise<components.Agent>;
    /**
     * List an agent's schemas
     *
     * @remarks
     * Return [agent](https://developers.glean.com/agents/agents-api)'s input and output schemas. You can use these schemas to detect changes to an agent's input or output structure.
     */
    retrieveSchemas(agentId: string, timezoneOffset?: number | undefined, options?: RequestOptions): Promise<components.AgentSchemas>;
    /**
     * Search agents
     *
     * @remarks
     * Search for [agents](https://developers.glean.com/agents/agents-api) by agent name.
     */
    list(request: components.SearchAgentsRequest, options?: RequestOptions): Promise<components.SearchAgentsResponse>;
    /**
     * Create an agent run and stream the response
     *
     * @remarks
     * Executes an [agent](https://developers.glean.com/agents/agents-api) run and returns the result as a stream of server-sent events (SSE).
     */
    runStream(request: components.AgentRunCreate, options?: RequestOptions): Promise<string>;
    /**
     * Create an agent run and wait for the response
     *
     * @remarks
     * Executes an [agent](https://developers.glean.com/agents/agents-api) run and returns the final response.
     */
    run(request: components.AgentRunCreate, options?: RequestOptions): Promise<components.AgentRunWaitResponse>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AgentSchemas$ {
    /** @deprecated use `AgentSchemas$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AgentSchemas, z.ZodTypeDef, unknown>;
    /** @deprecated use `AgentSchemas$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AgentSchemas$Outbound, z.ZodTypeDef, AgentSchemas>;
    /** @deprecated use `AgentSchemas$Outbound` instead. */
    type Outbound = AgentSchemas$Outbound;
}

/** @internal */
declare const AgentSchemas$inboundSchema: z.ZodType<AgentSchemas, z.ZodTypeDef, unknown>;

/** @internal */
declare type AgentSchemas$Outbound = {
    agent_id: string;
    input_schema: InputSchema$Outbound;
    output_schema: OutputSchema$Outbound;
};

/** @internal */
declare const AgentSchemas$outboundSchema: z.ZodType<AgentSchemas$Outbound, z.ZodTypeDef, AgentSchemas>;

/**
 * Defines the structure and properties of an agent.
 */
declare type AgentSchemas = {
    /**
     * The ID of the agent.
     */
    agentId: string;
    /**
     * The schema for the agent input. In JSON Schema format.
     */
    inputSchema: InputSchema;
    /**
     * The schema for the agent output. In JSON Schema format.
     */
    outputSchema: OutputSchema;
};

declare function agentSchemasFromJSON(jsonString: string): Result<AgentSchemas, SDKValidationError>;

declare function agentSchemasToJSON(agentSchemas: AgentSchemas): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AgentsInsightsV2Request$ {
    /** @deprecated use `AgentsInsightsV2Request$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AgentsInsightsV2Request, z.ZodTypeDef, unknown>;
    /** @deprecated use `AgentsInsightsV2Request$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AgentsInsightsV2Request$Outbound, z.ZodTypeDef, AgentsInsightsV2Request>;
    /** @deprecated use `AgentsInsightsV2Request$Outbound` instead. */
    type Outbound = AgentsInsightsV2Request$Outbound;
}

/** @internal */
declare const AgentsInsightsV2Request$inboundSchema: z.ZodType<AgentsInsightsV2Request, z.ZodTypeDef, unknown>;

/** @internal */
declare type AgentsInsightsV2Request$Outbound = {
    agentIds?: Array<string> | undefined;
    departments?: Array<string> | undefined;
    dayRange?: Period$Outbound | undefined;
};

/** @internal */
declare const AgentsInsightsV2Request$outboundSchema: z.ZodType<AgentsInsightsV2Request$Outbound, z.ZodTypeDef, AgentsInsightsV2Request>;

declare type AgentsInsightsV2Request = {
    /**
     * IDs of the Agents for which Insights should be returned. An empty array signifies all.
     */
    agentIds?: Array<string> | undefined;
    /**
     * Departments for which Insights are requested.
     */
    departments?: Array<string> | undefined;
    dayRange?: Period | undefined;
};

declare function agentsInsightsV2RequestFromJSON(jsonString: string): Result<AgentsInsightsV2Request, SDKValidationError>;

declare function agentsInsightsV2RequestToJSON(agentsInsightsV2Request: AgentsInsightsV2Request): string;

declare function agentToJSON(agent: Agent): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AiAppActionCounts$ {
    /** @deprecated use `AiAppActionCounts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AiAppActionCounts, z.ZodTypeDef, unknown>;
    /** @deprecated use `AiAppActionCounts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AiAppActionCounts$Outbound, z.ZodTypeDef, AiAppActionCounts>;
    /** @deprecated use `AiAppActionCounts$Outbound` instead. */
    type Outbound = AiAppActionCounts$Outbound;
}

/** @internal */
declare const AiAppActionCounts$inboundSchema: z.ZodType<AiAppActionCounts, z.ZodTypeDef, unknown>;

/** @internal */
declare type AiAppActionCounts$Outbound = {
    totalSlackbotResponses?: number | undefined;
    totalSlackbotResponsesShared?: number | undefined;
    totalSlackbotResponsesNotHelpful?: number | undefined;
    totalChatMessages?: number | undefined;
    totalUpvotes?: number | undefined;
    totalDownvotes?: number | undefined;
    [additionalProperties: string]: unknown;
};

/** @internal */
declare const AiAppActionCounts$outboundSchema: z.ZodType<AiAppActionCounts$Outbound, z.ZodTypeDef, AiAppActionCounts>;

/**
 * Map from action to frequency.
 */
declare type AiAppActionCounts = {
    /**
     * Total number of Slackbot responses, both proactive and reactive.
     */
    totalSlackbotResponses?: number | undefined;
    /**
     * Total number of Slackbot responses shared publicly (upvoted).
     */
    totalSlackbotResponsesShared?: number | undefined;
    /**
     * Total number of Slackbot responses rejected as not helpful (downvoted).
     */
    totalSlackbotResponsesNotHelpful?: number | undefined;
    /**
     * Total number of Chat messages sent in requested period.
     */
    totalChatMessages?: number | undefined;
    /**
     * Total number of Chat messages which received upvotes by the user.
     */
    totalUpvotes?: number | undefined;
    /**
     * Total number of Chat messages which received downvotes by the user.
     */
    totalDownvotes?: number | undefined;
    additionalProperties?: {
        [k: string]: number;
    };
};

declare function aiAppActionCountsFromJSON(jsonString: string): Result<AiAppActionCounts, SDKValidationError>;

declare function aiAppActionCountsToJSON(aiAppActionCounts: AiAppActionCounts): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AiAppsInsightsResponse$ {
    /** @deprecated use `AiAppsInsightsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AiAppsInsightsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `AiAppsInsightsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AiAppsInsightsResponse$Outbound, z.ZodTypeDef, AiAppsInsightsResponse>;
    /** @deprecated use `AiAppsInsightsResponse$Outbound` instead. */
    type Outbound = AiAppsInsightsResponse$Outbound;
}

/** @internal */
declare const AiAppsInsightsResponse$inboundSchema: z.ZodType<AiAppsInsightsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type AiAppsInsightsResponse$Outbound = {
    lastLogTimestamp?: number | undefined;
    aiAppInsights?: Array<UserActivityInsight$Outbound> | undefined;
    totalActiveUsers?: number | undefined;
    actionCounts?: AiAppActionCounts$Outbound | undefined;
    departments?: Array<string> | undefined;
};

/** @internal */
declare const AiAppsInsightsResponse$outboundSchema: z.ZodType<AiAppsInsightsResponse$Outbound, z.ZodTypeDef, AiAppsInsightsResponse>;

declare type AiAppsInsightsResponse = {
    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    lastLogTimestamp?: number | undefined;
    aiAppInsights?: Array<UserActivityInsight> | undefined;
    /**
     * Total number of active users on the Ai App in the requested period.
     */
    totalActiveUsers?: number | undefined;
    /**
     * Map from action to frequency.
     */
    actionCounts?: AiAppActionCounts | undefined;
    /**
     * list of departments applicable for users tab.
     */
    departments?: Array<string> | undefined;
};

declare function aiAppsInsightsResponseFromJSON(jsonString: string): Result<AiAppsInsightsResponse, SDKValidationError>;

declare function aiAppsInsightsResponseToJSON(aiAppsInsightsResponse: AiAppsInsightsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AiInsightsResponse$ {
    /** @deprecated use `AiInsightsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AiInsightsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `AiInsightsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AiInsightsResponse$Outbound, z.ZodTypeDef, AiInsightsResponse>;
    /** @deprecated use `AiInsightsResponse$Outbound` instead. */
    type Outbound = AiInsightsResponse$Outbound;
}

/** @internal */
declare const AiInsightsResponse$inboundSchema: z.ZodType<AiInsightsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type AiInsightsResponse$Outbound = {
    lastLogTimestamp?: number | undefined;
    assistantInsights?: Array<UserActivityInsight$Outbound> | undefined;
    totalActiveAssistantUsers?: number | undefined;
    totalChatMessages?: number | undefined;
    totalAiSummarizations?: number | undefined;
    totalAiAnswers?: number | undefined;
    totalUpvotes?: number | undefined;
    totalDownvotes?: number | undefined;
    totalGleanbotResponses?: number | undefined;
    totalGleanbotResponsesShared?: number | undefined;
    totalGleanbotResponsesNotHelpful?: number | undefined;
    departments?: Array<string> | undefined;
};

/** @internal */
declare const AiInsightsResponse$outboundSchema: z.ZodType<AiInsightsResponse$Outbound, z.ZodTypeDef, AiInsightsResponse>;

declare type AiInsightsResponse = {
    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    lastLogTimestamp?: number | undefined;
    assistantInsights?: Array<UserActivityInsight> | undefined;
    /**
     * Total number of Active Assistant users (chat, summary, AIA) in requested period.
     */
    totalActiveAssistantUsers?: number | undefined;
    /**
     * Total number of Chat messages sent in requested period.
     */
    totalChatMessages?: number | undefined;
    /**
     * Total number of AI Document Summarizations invoked in the requested period.
     */
    totalAiSummarizations?: number | undefined;
    /**
     * Total number of AI Answers generated in the requested period.
     */
    totalAiAnswers?: number | undefined;
    /**
     * Total number of Chat messages which received upvotes by the user.
     */
    totalUpvotes?: number | undefined;
    /**
     * Total number of Chat messages which received downvotes by the user.
     */
    totalDownvotes?: number | undefined;
    /**
     * Total number of Gleanbot responses, both proactive and reactive.
     */
    totalGleanbotResponses?: number | undefined;
    /**
     * Total number of Gleanbot responses shared publicly (upvoted).
     */
    totalGleanbotResponsesShared?: number | undefined;
    /**
     * Total number of Glean responses rejected as not helpful (downvoted).
     */
    totalGleanbotResponsesNotHelpful?: number | undefined;
    /**
     * list of departments applicable for users tab.
     */
    departments?: Array<string> | undefined;
};

declare function aiInsightsResponseFromJSON(jsonString: string): Result<AiInsightsResponse, SDKValidationError>;

declare function aiInsightsResponseToJSON(aiInsightsResponse: AiInsightsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AllowlistOptions$ {
    /** @deprecated use `AllowlistOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AllowlistOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `AllowlistOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AllowlistOptions$Outbound, z.ZodTypeDef, AllowlistOptions>;
    /** @deprecated use `AllowlistOptions$Outbound` instead. */
    type Outbound = AllowlistOptions$Outbound;
}

/** @internal */
declare const AllowlistOptions$inboundSchema: z.ZodType<AllowlistOptions, z.ZodTypeDef, unknown>;

/** @internal */
declare type AllowlistOptions$Outbound = {
    terms?: Array<string> | undefined;
};

/** @internal */
declare const AllowlistOptions$outboundSchema: z.ZodType<AllowlistOptions$Outbound, z.ZodTypeDef, AllowlistOptions>;

/**
 * Terms that are allow-listed during the scans. If any finding picked up by a rule exactly matches a term in the allow-list, it will not be counted as a violation.
 */
declare type AllowlistOptions = {
    /**
     * list of words and phrases to consider as whitelisted content
     */
    terms?: Array<string> | undefined;
};

declare function allowlistOptionsFromJSON(jsonString: string): Result<AllowlistOptions, SDKValidationError>;

declare function allowlistOptionsToJSON(allowlistOptions: AllowlistOptions): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Announcement$ {
    /** @deprecated use `Announcement$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Announcement, z.ZodTypeDef, unknown>;
    /** @deprecated use `Announcement$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Announcement$Outbound, z.ZodTypeDef, Announcement>;
    /** @deprecated use `Announcement$Outbound` instead. */
    type Outbound = Announcement$Outbound;
}

/** @internal */
declare const Announcement$inboundSchema: z.ZodType<Announcement, z.ZodTypeDef, unknown>;

/** @internal */
declare type Announcement$Outbound = {
    startTime?: string | undefined;
    endTime?: string | undefined;
    title?: string | undefined;
    body?: StructuredText$Outbound | undefined;
    emoji?: string | undefined;
    thumbnail?: Thumbnail$Outbound | undefined;
    banner?: Thumbnail$Outbound | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    sourceDocumentId?: string | undefined;
    hideAttribution?: boolean | undefined;
    channel?: string | undefined;
    postType?: string | undefined;
    isPrioritized?: boolean | undefined;
    viewUrl?: string | undefined;
    draftId?: number | undefined;
    permissions?: ObjectPermissions$Outbound | undefined;
    id?: number | undefined;
    author?: Person$Outbound | undefined;
    createTimestamp?: number | undefined;
    lastUpdateTimestamp?: number | undefined;
    updatedBy?: Person$Outbound | undefined;
    viewerInfo?: AnnouncementViewerInfo$Outbound | undefined;
    sourceDocument?: Document$Outbound | undefined;
    isPublished?: boolean | undefined;
};

/** @internal */
declare const Announcement$outboundSchema: z.ZodType<Announcement$Outbound, z.ZodTypeDef, Announcement>;

declare type Announcement = {
    /**
     * The date and time at which the announcement becomes active.
     */
    startTime?: Date | undefined;
    /**
     * The date and time at which the announcement expires.
     */
    endTime?: Date | undefined;
    /**
     * The headline of the announcement.
     */
    title?: string | undefined;
    body?: StructuredText | undefined;
    /**
     * An emoji used to indicate the nature of the announcement.
     */
    emoji?: string | undefined;
    thumbnail?: Thumbnail | undefined;
    banner?: Thumbnail | undefined;
    /**
     * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
     */
    sourceDocumentId?: string | undefined;
    /**
     * Whether or not to hide an author attribution.
     */
    hideAttribution?: boolean | undefined;
    /**
     * This determines whether this is a Social Feed post or a regular announcement.
     */
    channel?: AnnouncementChannel | undefined;
    /**
     * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
     */
    postType?: AnnouncementPostType | undefined;
    /**
     * Used by the Social Feed to pin posts to the front of the feed.
     */
    isPrioritized?: boolean | undefined;
    /**
     * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
     */
    viewUrl?: string | undefined;
    /**
     * The opaque id of the associated draft.
     */
    draftId?: number | undefined;
    permissions?: ObjectPermissions | undefined;
    /**
     * The opaque id of the announcement.
     */
    id?: number | undefined;
    author?: Person | undefined;
    /**
     * Server Unix timestamp of the creation time (in seconds since epoch UTC).
     */
    createTimestamp?: number | undefined;
    /**
     * Server Unix timestamp of the last update time (in seconds since epoch UTC).
     */
    lastUpdateTimestamp?: number | undefined;
    updatedBy?: Person | undefined;
    viewerInfo?: AnnouncementViewerInfo | undefined;
    sourceDocument?: Document_2 | undefined;
    /**
     * Whether or not the announcement is published.
     */
    isPublished?: boolean | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AnnouncementChannel$ {
    /** @deprecated use `AnnouncementChannel$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Main: "MAIN";
        readonly SocialFeed: "SOCIAL_FEED";
    }>;
    /** @deprecated use `AnnouncementChannel$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Main: "MAIN";
        readonly SocialFeed: "SOCIAL_FEED";
    }>;
}

/** @internal */
declare const AnnouncementChannel$inboundSchema: z.ZodNativeEnum<typeof AnnouncementChannel>;

/** @internal */
declare const AnnouncementChannel$outboundSchema: z.ZodNativeEnum<typeof AnnouncementChannel>;

/**
 * This determines whether this is a Social Feed post or a regular announcement.
 */
declare const AnnouncementChannel: {
    readonly Main: "MAIN";
    readonly SocialFeed: "SOCIAL_FEED";
};

/**
 * This determines whether this is a Social Feed post or a regular announcement.
 */
declare type AnnouncementChannel = ClosedEnum<typeof AnnouncementChannel>;

declare function announcementFromJSON(jsonString: string): Result<Announcement, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AnnouncementPostType$ {
    /** @deprecated use `AnnouncementPostType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Text: "TEXT";
        readonly Link: "LINK";
    }>;
    /** @deprecated use `AnnouncementPostType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Text: "TEXT";
        readonly Link: "LINK";
    }>;
}

/** @internal */
declare const AnnouncementPostType$inboundSchema: z.ZodNativeEnum<typeof AnnouncementPostType>;

/** @internal */
declare const AnnouncementPostType$outboundSchema: z.ZodNativeEnum<typeof AnnouncementPostType>;

/**
 * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
 */
declare const AnnouncementPostType: {
    readonly Text: "TEXT";
    readonly Link: "LINK";
};

/**
 * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
 */
declare type AnnouncementPostType = ClosedEnum<typeof AnnouncementPostType>;

declare class Announcements extends ClientSDK {
    /**
     * Create Announcement
     *
     * @remarks
     * Create a textual announcement visible to some set of users based on department and location.
     */
    create(request: components.CreateAnnouncementRequest, options?: RequestOptions): Promise<components.Announcement>;
    /**
     * Delete Announcement
     *
     * @remarks
     * Delete an existing user-generated announcement.
     */
    delete(request: components.DeleteAnnouncementRequest, options?: RequestOptions): Promise<void>;
    /**
     * Update Announcement
     *
     * @remarks
     * Update a textual announcement visible to some set of users based on department and location.
     */
    update(request: components.UpdateAnnouncementRequest, options?: RequestOptions): Promise<components.Announcement>;
}

declare function announcementToJSON(announcement: Announcement): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AnnouncementViewerInfo$ {
    /** @deprecated use `AnnouncementViewerInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AnnouncementViewerInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `AnnouncementViewerInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AnnouncementViewerInfo$Outbound, z.ZodTypeDef, AnnouncementViewerInfo>;
    /** @deprecated use `AnnouncementViewerInfo$Outbound` instead. */
    type Outbound = AnnouncementViewerInfo$Outbound;
}

/** @internal */
declare const AnnouncementViewerInfo$inboundSchema: z.ZodType<AnnouncementViewerInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type AnnouncementViewerInfo$Outbound = {
    isDismissed?: boolean | undefined;
    isRead?: boolean | undefined;
};

/** @internal */
declare const AnnouncementViewerInfo$outboundSchema: z.ZodType<AnnouncementViewerInfo$Outbound, z.ZodTypeDef, AnnouncementViewerInfo>;

declare type AnnouncementViewerInfo = {
    /**
     * Whether the viewer has dismissed the announcement.
     */
    isDismissed?: boolean | undefined;
    /**
     * Whether the viewer has read the announcement.
     */
    isRead?: boolean | undefined;
};

declare function announcementViewerInfoFromJSON(jsonString: string): Result<AnnouncementViewerInfo, SDKValidationError>;

declare function announcementViewerInfoToJSON(announcementViewerInfo: AnnouncementViewerInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AnonymousEvent$ {
    /** @deprecated use `AnonymousEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AnonymousEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `AnonymousEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AnonymousEvent$Outbound, z.ZodTypeDef, AnonymousEvent>;
    /** @deprecated use `AnonymousEvent$Outbound` instead. */
    type Outbound = AnonymousEvent$Outbound;
}

/** @internal */
declare const AnonymousEvent$inboundSchema: z.ZodType<AnonymousEvent, z.ZodTypeDef, unknown>;

/** @internal */
declare type AnonymousEvent$Outbound = {
    time?: TimeInterval$Outbound | undefined;
    eventType?: string | undefined;
};

/** @internal */
declare const AnonymousEvent$outboundSchema: z.ZodType<AnonymousEvent$Outbound, z.ZodTypeDef, AnonymousEvent>;

/**
 * A generic, light-weight calendar event.
 */
declare type AnonymousEvent = {
    time?: TimeInterval | undefined;
    /**
     * The nature of the event, for example "out of office".
     */
    eventType?: AnonymousEventEventType | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AnonymousEventEventType$ {
    /** @deprecated use `AnonymousEventEventType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Default: "DEFAULT";
        readonly OutOfOffice: "OUT_OF_OFFICE";
    }>;
    /** @deprecated use `AnonymousEventEventType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Default: "DEFAULT";
        readonly OutOfOffice: "OUT_OF_OFFICE";
    }>;
}

/** @internal */
declare const AnonymousEventEventType$inboundSchema: z.ZodNativeEnum<typeof AnonymousEventEventType>;

/** @internal */
declare const AnonymousEventEventType$outboundSchema: z.ZodNativeEnum<typeof AnonymousEventEventType>;

/**
 * The nature of the event, for example "out of office".
 */
declare const AnonymousEventEventType: {
    readonly Default: "DEFAULT";
    readonly OutOfOffice: "OUT_OF_OFFICE";
};

/**
 * The nature of the event, for example "out of office".
 */
declare type AnonymousEventEventType = ClosedEnum<typeof AnonymousEventEventType>;

declare function anonymousEventFromJSON(jsonString: string): Result<AnonymousEvent, SDKValidationError>;

declare function anonymousEventToJSON(anonymousEvent: AnonymousEvent): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Answer$ {
    /** @deprecated use `Answer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Answer, z.ZodTypeDef, unknown>;
    /** @deprecated use `Answer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Answer$Outbound, z.ZodTypeDef, Answer>;
    /** @deprecated use `Answer$Outbound` instead. */
    type Outbound = Answer$Outbound;
}

/** @internal */
declare const Answer$inboundSchema: z.ZodType<Answer, z.ZodTypeDef, unknown>;

/** @internal */
declare type Answer$Outbound = {
    id: number;
    docId?: string | undefined;
    question?: string | undefined;
    questionVariations?: Array<string> | undefined;
    bodyText?: string | undefined;
    boardId?: number | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    roles?: Array<UserRoleSpecification$Outbound> | undefined;
    sourceDocumentSpec?: DocumentSpecUnion$Outbound | undefined;
    sourceType?: string | undefined;
    permissions?: ObjectPermissions$Outbound | undefined;
    combinedAnswerText?: StructuredText$Outbound | undefined;
    likes?: AnswerLikes$Outbound | undefined;
    author?: Person$Outbound | undefined;
    createTime?: string | undefined;
    updateTime?: string | undefined;
    updatedBy?: Person$Outbound | undefined;
    verification?: Verification$Outbound | undefined;
    board?: AnswerBoard$Outbound | undefined;
    collections?: Array<Collection$Outbound> | undefined;
    documentCategory?: string | undefined;
    sourceDocument?: Document$Outbound | undefined;
};

/** @internal */
declare const Answer$outboundSchema: z.ZodType<Answer$Outbound, z.ZodTypeDef, Answer>;

declare type Answer = {
    /**
     * The opaque ID of the Answer.
     */
    id: number;
    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
     */
    docId?: string | undefined;
    question?: string | undefined;
    /**
     * Additional ways of phrasing this question.
     */
    questionVariations?: Array<string> | undefined;
    /**
     * The plain text answer to the question.
     */
    bodyText?: string | undefined;
    /**
     * The parent board ID of this Answer, or 0 if it's a floating Answer. Adding Answers to Answer Boards is no longer permitted.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    boardId?: number | undefined;
    /**
     * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * A list of user roles for the answer added by the owner.
     */
    addedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of user roles for the answer removed by the owner.
     */
    removedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of roles for this answer explicitly granted by an owner, editor, or admin.
     */
    roles?: Array<UserRoleSpecification> | undefined;
    sourceDocumentSpec?: DocumentSpecUnion | undefined;
    sourceType?: AnswerSourceType | undefined;
    permissions?: ObjectPermissions | undefined;
    combinedAnswerText?: StructuredText | undefined;
    likes?: AnswerLikes | undefined;
    author?: Person | undefined;
    /**
     * The time the answer was created in ISO format (ISO 8601).
     */
    createTime?: Date | undefined;
    /**
     * The time the answer was last updated in ISO format (ISO 8601).
     */
    updateTime?: Date | undefined;
    updatedBy?: Person | undefined;
    verification?: Verification | undefined;
    board?: AnswerBoard | undefined;
    /**
     * The collections to which the answer belongs.
     */
    collections?: Array<Collection> | undefined;
    /**
     * The document's document_category(.proto).
     */
    documentCategory?: string | undefined;
    sourceDocument?: Document_2 | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AnswerBoard$ {
    /** @deprecated use `AnswerBoard$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AnswerBoard, z.ZodTypeDef, unknown>;
    /** @deprecated use `AnswerBoard$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AnswerBoard$Outbound, z.ZodTypeDef, AnswerBoard>;
    /** @deprecated use `AnswerBoard$Outbound` instead. */
    type Outbound = AnswerBoard$Outbound;
}

/** @internal */
declare const AnswerBoard$inboundSchema: z.ZodType<AnswerBoard, z.ZodTypeDef, unknown>;

/** @internal */
declare type AnswerBoard$Outbound = {
    name: string;
    description: string;
    addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    permissions?: ObjectPermissions$Outbound | undefined;
    id: number;
    createTime?: string | undefined;
    updateTime?: string | undefined;
    creator?: Person$Outbound | undefined;
    updatedBy?: Person$Outbound | undefined;
    itemCount?: number | undefined;
    roles?: Array<UserRoleSpecification$Outbound> | undefined;
};

/** @internal */
declare const AnswerBoard$outboundSchema: z.ZodType<AnswerBoard$Outbound, z.ZodTypeDef, AnswerBoard>;

declare type AnswerBoard = {
    /**
     * The unique name of the Collection.
     */
    name: string;
    /**
     * A brief summary of the Collection's contents.
     */
    description: string;
    /**
     * A list of added user roles for the Collection.
     */
    addedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of removed user roles for the Collection.
     */
    removedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    permissions?: ObjectPermissions | undefined;
    /**
     * The unique ID of the Answer Board.
     */
    id: number;
    createTime?: Date | undefined;
    updateTime?: Date | undefined;
    creator?: Person | undefined;
    updatedBy?: Person | undefined;
    /**
     * The number of items currently in the Answer Board. Separated from the actual items so we can grab the count without items.
     */
    itemCount?: number | undefined;
    /**
     * A list of user roles for the Answer Board.
     */
    roles?: Array<UserRoleSpecification> | undefined;
};

declare function answerBoardFromJSON(jsonString: string): Result<AnswerBoard, SDKValidationError>;

declare function answerBoardToJSON(answerBoard: AnswerBoard): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AnswerCreationData$ {
    /** @deprecated use `AnswerCreationData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AnswerCreationData, z.ZodTypeDef, unknown>;
    /** @deprecated use `AnswerCreationData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AnswerCreationData$Outbound, z.ZodTypeDef, AnswerCreationData>;
    /** @deprecated use `AnswerCreationData$Outbound` instead. */
    type Outbound = AnswerCreationData$Outbound;
}

/** @internal */
declare const AnswerCreationData$inboundSchema: z.ZodType<AnswerCreationData, z.ZodTypeDef, unknown>;

/** @internal */
declare type AnswerCreationData$Outbound = {
    question?: string | undefined;
    questionVariations?: Array<string> | undefined;
    bodyText?: string | undefined;
    boardId?: number | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    roles?: Array<UserRoleSpecification$Outbound> | undefined;
    sourceDocumentSpec?: DocumentSpecUnion$Outbound | undefined;
    sourceType?: string | undefined;
    addedCollections?: Array<number> | undefined;
    combinedAnswerText?: StructuredTextMutableProperties$Outbound | undefined;
};

/** @internal */
declare const AnswerCreationData$outboundSchema: z.ZodType<AnswerCreationData$Outbound, z.ZodTypeDef, AnswerCreationData>;

declare type AnswerCreationData = {
    question?: string | undefined;
    /**
     * Additional ways of phrasing this question.
     */
    questionVariations?: Array<string> | undefined;
    /**
     * The plain text answer to the question.
     */
    bodyText?: string | undefined;
    /**
     * The parent board ID of this Answer, or 0 if it's a floating Answer. Adding Answers to Answer Boards is no longer permitted.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    boardId?: number | undefined;
    /**
     * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * A list of user roles for the answer added by the owner.
     */
    addedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of user roles for the answer removed by the owner.
     */
    removedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of roles for this answer explicitly granted by an owner, editor, or admin.
     */
    roles?: Array<UserRoleSpecification> | undefined;
    sourceDocumentSpec?: DocumentSpecUnion | undefined;
    sourceType?: AnswerCreationDataSourceType | undefined;
    /**
     * IDs of Collections to which a document is added.
     */
    addedCollections?: Array<number> | undefined;
    combinedAnswerText?: StructuredTextMutableProperties | undefined;
};

declare function answerCreationDataFromJSON(jsonString: string): Result<AnswerCreationData, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AnswerCreationDataSourceType$ {
    /** @deprecated use `AnswerCreationDataSourceType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Document: "DOCUMENT";
        readonly Assistant: "ASSISTANT";
    }>;
    /** @deprecated use `AnswerCreationDataSourceType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Document: "DOCUMENT";
        readonly Assistant: "ASSISTANT";
    }>;
}

/** @internal */
declare const AnswerCreationDataSourceType$inboundSchema: z.ZodNativeEnum<typeof AnswerCreationDataSourceType>;

/** @internal */
declare const AnswerCreationDataSourceType$outboundSchema: z.ZodNativeEnum<typeof AnswerCreationDataSourceType>;

declare const AnswerCreationDataSourceType: {
    readonly Document: "DOCUMENT";
    readonly Assistant: "ASSISTANT";
};

declare type AnswerCreationDataSourceType = ClosedEnum<typeof AnswerCreationDataSourceType>;

declare function answerCreationDataToJSON(answerCreationData: AnswerCreationData): string;

declare function answerFromJSON(jsonString: string): Result<Answer, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AnswerLike$ {
    /** @deprecated use `AnswerLike$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AnswerLike, z.ZodTypeDef, unknown>;
    /** @deprecated use `AnswerLike$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AnswerLike$Outbound, z.ZodTypeDef, AnswerLike>;
    /** @deprecated use `AnswerLike$Outbound` instead. */
    type Outbound = AnswerLike$Outbound;
}

/** @internal */
declare const AnswerLike$inboundSchema: z.ZodType<AnswerLike, z.ZodTypeDef, unknown>;

/** @internal */
declare type AnswerLike$Outbound = {
    user?: Person$Outbound | undefined;
    createTime?: string | undefined;
};

/** @internal */
declare const AnswerLike$outboundSchema: z.ZodType<AnswerLike$Outbound, z.ZodTypeDef, AnswerLike>;

declare type AnswerLike = {
    user?: Person | undefined;
    /**
     * The time the user liked the answer in ISO format (ISO 8601).
     */
    createTime?: Date | undefined;
};

declare function answerLikeFromJSON(jsonString: string): Result<AnswerLike, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AnswerLikes$ {
    /** @deprecated use `AnswerLikes$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AnswerLikes, z.ZodTypeDef, unknown>;
    /** @deprecated use `AnswerLikes$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AnswerLikes$Outbound, z.ZodTypeDef, AnswerLikes>;
    /** @deprecated use `AnswerLikes$Outbound` instead. */
    type Outbound = AnswerLikes$Outbound;
}

/** @internal */
declare const AnswerLikes$inboundSchema: z.ZodType<AnswerLikes, z.ZodTypeDef, unknown>;

/** @internal */
declare type AnswerLikes$Outbound = {
    likedBy: Array<AnswerLike$Outbound>;
    likedByUser: boolean;
    numLikes: number;
};

/** @internal */
declare const AnswerLikes$outboundSchema: z.ZodType<AnswerLikes$Outbound, z.ZodTypeDef, AnswerLikes>;

declare type AnswerLikes = {
    likedBy: Array<AnswerLike>;
    /**
     * Whether the user in context liked the answer.
     */
    likedByUser: boolean;
    /**
     * The total number of likes for the answer.
     */
    numLikes: number;
};

declare function answerLikesFromJSON(jsonString: string): Result<AnswerLikes, SDKValidationError>;

declare function answerLikesToJSON(answerLikes: AnswerLikes): string;

declare function answerLikeToJSON(answerLike: AnswerLike): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AnswerResult$ {
    /** @deprecated use `AnswerResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AnswerResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `AnswerResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AnswerResult$Outbound, z.ZodTypeDef, AnswerResult>;
    /** @deprecated use `AnswerResult$Outbound` instead. */
    type Outbound = AnswerResult$Outbound;
}

/** @internal */
declare const AnswerResult$inboundSchema: z.ZodType<AnswerResult, z.ZodTypeDef, unknown>;

/** @internal */
declare type AnswerResult$Outbound = {
    answer: Answer$Outbound;
    trackingToken?: string | undefined;
};

/** @internal */
declare const AnswerResult$outboundSchema: z.ZodType<AnswerResult$Outbound, z.ZodTypeDef, AnswerResult>;

declare type AnswerResult = {
    answer: Answer;
    /**
     * An opaque token that represents this particular Answer. To be used for `/feedback` reporting.
     */
    trackingToken?: string | undefined;
};

declare function answerResultFromJSON(jsonString: string): Result<AnswerResult, SDKValidationError>;

declare function answerResultToJSON(answerResult: AnswerResult): string;

declare class Answers extends ClientSDK {
    /**
     * Create Answer
     *
     * @remarks
     * Create a user-generated Answer that contains a question and answer.
     */
    create(request: components.CreateAnswerRequest, options?: RequestOptions): Promise<components.Answer>;
    /**
     * Delete Answer
     *
     * @remarks
     * Delete an existing user-generated Answer.
     */
    delete(request: components.DeleteAnswerRequest, options?: RequestOptions): Promise<void>;
    /**
     * Update Answer
     *
     * @remarks
     * Update an existing user-generated Answer.
     */
    update(request: components.EditAnswerRequest, options?: RequestOptions): Promise<components.Answer>;
    /**
     * Read Answer
     *
     * @remarks
     * Read the details of a particular Answer given its ID.
     */
    retrieve(request: components.GetAnswerRequest, options?: RequestOptions): Promise<components.GetAnswerResponse>;
    /**
     * List Answers
     *
     * @remarks
     * List Answers created by the current user.
     */
    list(request: components.ListAnswersRequest, options?: RequestOptions): Promise<components.ListAnswersResponse>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AnswerSourceType$ {
    /** @deprecated use `AnswerSourceType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Document: "DOCUMENT";
        readonly Assistant: "ASSISTANT";
    }>;
    /** @deprecated use `AnswerSourceType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Document: "DOCUMENT";
        readonly Assistant: "ASSISTANT";
    }>;
}

/** @internal */
declare const AnswerSourceType$inboundSchema: z.ZodNativeEnum<typeof AnswerSourceType>;

/** @internal */
declare const AnswerSourceType$outboundSchema: z.ZodNativeEnum<typeof AnswerSourceType>;

declare const AnswerSourceType: {
    readonly Document: "DOCUMENT";
    readonly Assistant: "ASSISTANT";
};

declare type AnswerSourceType = ClosedEnum<typeof AnswerSourceType>;

declare function answerToJSON(answer: Answer): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AppResult$ {
    /** @deprecated use `AppResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AppResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `AppResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AppResult$Outbound, z.ZodTypeDef, AppResult>;
    /** @deprecated use `AppResult$Outbound` instead. */
    type Outbound = AppResult$Outbound;
}

/** @internal */
declare const AppResult$inboundSchema: z.ZodType<AppResult, z.ZodTypeDef, unknown>;

/** @internal */
declare type AppResult$Outbound = {
    datasource: string;
    docType?: string | undefined;
    mimeType?: string | undefined;
    iconUrl?: string | undefined;
};

/** @internal */
declare const AppResult$outboundSchema: z.ZodType<AppResult$Outbound, z.ZodTypeDef, AppResult>;

declare type AppResult = {
    /**
     * The app or other repository type this represents
     */
    datasource: string;
    /**
     * The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request).
     */
    docType?: string | undefined;
    /**
     * Mimetype is used to differentiate between sub applications from a datasource (e.g. Sheets, Docs from Gdrive)
     */
    mimeType?: string | undefined;
    /**
     * If there is available icon URL.
     */
    iconUrl?: string | undefined;
};

declare function appResultFromJSON(jsonString: string): Result<AppResult, SDKValidationError>;

declare function appResultToJSON(appResult: AppResult): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AssistantActivityType$ {
    /** @deprecated use `AssistantActivityType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly GleanChat: "GLEAN_CHAT";
        readonly AiSummary: "AI_SUMMARY";
        readonly AiAnswer: "AI_ANSWER";
        readonly GleanbotResponse: "GLEANBOT_RESPONSE";
    }>;
    /** @deprecated use `AssistantActivityType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly GleanChat: "GLEAN_CHAT";
        readonly AiSummary: "AI_SUMMARY";
        readonly AiAnswer: "AI_ANSWER";
        readonly GleanbotResponse: "GLEANBOT_RESPONSE";
    }>;
}

/** @internal */
declare const AssistantActivityType$inboundSchema: z.ZodNativeEnum<typeof AssistantActivityType>;

/** @internal */
declare const AssistantActivityType$outboundSchema: z.ZodNativeEnum<typeof AssistantActivityType>;

declare const AssistantActivityType: {
    readonly GleanChat: "GLEAN_CHAT";
    readonly AiSummary: "AI_SUMMARY";
    readonly AiAnswer: "AI_ANSWER";
    readonly GleanbotResponse: "GLEANBOT_RESPONSE";
};

declare type AssistantActivityType = ClosedEnum<typeof AssistantActivityType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AuthConfig$ {
    /** @deprecated use `AuthConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AuthConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `AuthConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AuthConfig$Outbound, z.ZodTypeDef, AuthConfig>;
    /** @deprecated use `AuthConfig$Outbound` instead. */
    type Outbound = AuthConfig$Outbound;
}

/** @internal */
declare const AuthConfig$inboundSchema: z.ZodType<AuthConfig, z.ZodTypeDef, unknown>;

/** @internal */
declare type AuthConfig$Outbound = {
    isOnPrem?: boolean | undefined;
    usesCentralAuth?: boolean | undefined;
    type?: string | undefined;
    grantType?: string | undefined;
    status?: string | undefined;
    client_url?: string | undefined;
    scopes?: Array<string> | undefined;
    audiences?: Array<string> | undefined;
    authorization_url?: string | undefined;
    lastAuthorizedAt?: string | undefined;
};

/** @internal */
declare const AuthConfig$outboundSchema: z.ZodType<AuthConfig$Outbound, z.ZodTypeDef, AuthConfig>;

/**
 * Config for tool's authentication method.
 */
declare type AuthConfig = {
    /**
     * Whether or not this tool is hosted on-premise.
     */
    isOnPrem?: boolean | undefined;
    /**
     * Whether or not this uses central auth.
     */
    usesCentralAuth?: boolean | undefined;
    /**
     * The type of authentication being used.
     *
     * @remarks
     * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
     * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
     * 'OAUTH_USER' uses individual user tokens for external API calls.
     * 'DWD' refers to domain wide delegation.
     */
    type?: AuthConfigType | undefined;
    /**
     * The type of grant type being used.
     */
    grantType?: GrantType | undefined;
    /**
     * Auth status of the tool.
     */
    status?: AuthConfigStatus | undefined;
    /**
     * The URL where users will be directed to start the OAuth flow.
     */
    clientUrl?: string | undefined;
    /**
     * A list of strings denoting the different scopes or access levels required by the tool.
     */
    scopes?: Array<string> | undefined;
    /**
     * A list of strings denoting the different audience which can access the tool.
     */
    audiences?: Array<string> | undefined;
    /**
     * The OAuth provider's endpoint, where access tokens are requested.
     */
    authorizationUrl?: string | undefined;
    /**
     * The time the tool was last authorized in ISO format (ISO 8601).
     */
    lastAuthorizedAt?: Date | undefined;
};

declare function authConfigFromJSON(jsonString: string): Result<AuthConfig, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AuthConfigStatus$ {
    /** @deprecated use `AuthConfigStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AwaitingAuth: "AWAITING_AUTH";
        readonly Authorized: "AUTHORIZED";
        readonly AuthDisabled: "AUTH_DISABLED";
    }>;
    /** @deprecated use `AuthConfigStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AwaitingAuth: "AWAITING_AUTH";
        readonly Authorized: "AUTHORIZED";
        readonly AuthDisabled: "AUTH_DISABLED";
    }>;
}

/** @internal */
declare const AuthConfigStatus$inboundSchema: z.ZodNativeEnum<typeof AuthConfigStatus>;

/** @internal */
declare const AuthConfigStatus$outboundSchema: z.ZodNativeEnum<typeof AuthConfigStatus>;

/**
 * Auth status of the tool.
 */
declare const AuthConfigStatus: {
    readonly AwaitingAuth: "AWAITING_AUTH";
    readonly Authorized: "AUTHORIZED";
    readonly AuthDisabled: "AUTH_DISABLED";
};

/**
 * Auth status of the tool.
 */
declare type AuthConfigStatus = ClosedEnum<typeof AuthConfigStatus>;

declare function authConfigToJSON(authConfig: AuthConfig): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AuthConfigType$ {
    /** @deprecated use `AuthConfigType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly None: "NONE";
        readonly OauthUser: "OAUTH_USER";
        readonly OauthAdmin: "OAUTH_ADMIN";
        readonly ApiKey: "API_KEY";
        readonly BasicAuth: "BASIC_AUTH";
        readonly Dwd: "DWD";
    }>;
    /** @deprecated use `AuthConfigType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly None: "NONE";
        readonly OauthUser: "OAUTH_USER";
        readonly OauthAdmin: "OAUTH_ADMIN";
        readonly ApiKey: "API_KEY";
        readonly BasicAuth: "BASIC_AUTH";
        readonly Dwd: "DWD";
    }>;
}

/** @internal */
declare const AuthConfigType$inboundSchema: z.ZodNativeEnum<typeof AuthConfigType>;

/** @internal */
declare const AuthConfigType$outboundSchema: z.ZodNativeEnum<typeof AuthConfigType>;

/**
 * The type of authentication being used.
 *
 * @remarks
 * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
 * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
 * 'OAUTH_USER' uses individual user tokens for external API calls.
 * 'DWD' refers to domain wide delegation.
 */
declare const AuthConfigType: {
    readonly None: "NONE";
    readonly OauthUser: "OAUTH_USER";
    readonly OauthAdmin: "OAUTH_ADMIN";
    readonly ApiKey: "API_KEY";
    readonly BasicAuth: "BASIC_AUTH";
    readonly Dwd: "DWD";
};

/**
 * The type of authentication being used.
 *
 * @remarks
 * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
 * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
 * 'OAUTH_USER' uses individual user tokens for external API calls.
 * 'DWD' refers to domain wide delegation.
 */
declare type AuthConfigType = ClosedEnum<typeof AuthConfigType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Author$ {
    /** @deprecated use `Author$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "USER";
        readonly GleanAi: "GLEAN_AI";
    }>;
    /** @deprecated use `Author$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "USER";
        readonly GleanAi: "GLEAN_AI";
    }>;
}

/** @internal */
declare const Author$inboundSchema: z.ZodNativeEnum<typeof Author>;

/** @internal */
declare const Author$outboundSchema: z.ZodNativeEnum<typeof Author>;

declare const Author: {
    readonly User: "USER";
    readonly GleanAi: "GLEAN_AI";
};

declare type Author = ClosedEnum<typeof Author>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AuthToken$ {
    /** @deprecated use `AuthToken$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AuthToken, z.ZodTypeDef, unknown>;
    /** @deprecated use `AuthToken$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AuthToken$Outbound, z.ZodTypeDef, AuthToken>;
    /** @deprecated use `AuthToken$Outbound` instead. */
    type Outbound = AuthToken$Outbound;
}

/** @internal */
declare const AuthToken$inboundSchema: z.ZodType<AuthToken, z.ZodTypeDef, unknown>;

/** @internal */
declare type AuthToken$Outbound = {
    accessToken: string;
    datasource: string;
    scope?: string | undefined;
    tokenType?: string | undefined;
    authUser?: string | undefined;
    expiration?: number | undefined;
};

/** @internal */
declare const AuthToken$outboundSchema: z.ZodType<AuthToken$Outbound, z.ZodTypeDef, AuthToken>;

declare type AuthToken = {
    accessToken: string;
    datasource: string;
    scope?: string | undefined;
    tokenType?: string | undefined;
    /**
     * Used by Google to indicate the index of the logged in user. Useful for generating hyperlinks that support multilogin.
     */
    authUser?: string | undefined;
    /**
     * Unix timestamp when this token expires (in seconds since epoch UTC).
     */
    expiration?: number | undefined;
};

declare function authTokenFromJSON(jsonString: string): Result<AuthToken, SDKValidationError>;

declare function authTokenToJSON(authToken: AuthToken): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AuthType$ {
    /** @deprecated use `AuthType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly None: "NONE";
        readonly OauthUser: "OAUTH_USER";
        readonly OauthAdmin: "OAUTH_ADMIN";
        readonly ApiKey: "API_KEY";
        readonly BasicAuth: "BASIC_AUTH";
        readonly Dwd: "DWD";
    }>;
    /** @deprecated use `AuthType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly None: "NONE";
        readonly OauthUser: "OAUTH_USER";
        readonly OauthAdmin: "OAUTH_ADMIN";
        readonly ApiKey: "API_KEY";
        readonly BasicAuth: "BASIC_AUTH";
        readonly Dwd: "DWD";
    }>;
}

/** @internal */
declare const AuthType$inboundSchema: z.ZodNativeEnum<typeof AuthType>;

/** @internal */
declare const AuthType$outboundSchema: z.ZodNativeEnum<typeof AuthType>;

/**
 * The type of authentication being used.
 *
 * @remarks
 * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
 * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
 * 'OAUTH_USER' uses individual user tokens for external API calls.
 * 'DWD' refers to domain wide delegation.
 */
declare const AuthType: {
    readonly None: "NONE";
    readonly OauthUser: "OAUTH_USER";
    readonly OauthAdmin: "OAUTH_ADMIN";
    readonly ApiKey: "API_KEY";
    readonly BasicAuth: "BASIC_AUTH";
    readonly Dwd: "DWD";
};

/**
 * The type of authentication being used.
 *
 * @remarks
 * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
 * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
 * 'OAUTH_USER' uses individual user tokens for external API calls.
 * 'DWD' refers to domain wide delegation.
 */
declare type AuthType = ClosedEnum<typeof AuthType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AutocompleteRequest$ {
    /** @deprecated use `AutocompleteRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AutocompleteRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `AutocompleteRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AutocompleteRequest$Outbound, z.ZodTypeDef, AutocompleteRequest>;
    /** @deprecated use `AutocompleteRequest$Outbound` instead. */
    type Outbound = AutocompleteRequest$Outbound;
}

/** @internal */
declare const AutocompleteRequest$inboundSchema: z.ZodType<AutocompleteRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type AutocompleteRequest$Outbound = {
    trackingToken?: string | undefined;
    sessionInfo?: SessionInfo$Outbound | undefined;
    query?: string | undefined;
    datasourcesFilter?: Array<string> | undefined;
    datasource?: string | undefined;
    resultTypes?: Array<string> | undefined;
    resultSize?: number | undefined;
    authTokens?: Array<AuthToken$Outbound> | undefined;
};

/** @internal */
declare const AutocompleteRequest$outboundSchema: z.ZodType<AutocompleteRequest$Outbound, z.ZodTypeDef, AutocompleteRequest>;

declare type AutocompleteRequest = {
    trackingToken?: string | undefined;
    sessionInfo?: SessionInfo | undefined;
    /**
     * Partially typed query.
     */
    query?: string | undefined;
    /**
     * Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). Results are unfiltered if missing.
     */
    datasourcesFilter?: Array<string> | undefined;
    /**
     * Filter to only return results relevant to the given datasource.
     */
    datasource?: string | undefined;
    /**
     * Filter to only return results of the given type(s). All types may be returned if omitted.
     */
    resultTypes?: Array<AutocompleteRequestResultType> | undefined;
    /**
     * Maximum number of results to be returned. If no value is provided, the backend will cap at 200.
     *
     * @remarks
     */
    resultSize?: number | undefined;
    /**
     * Auth tokens which may be used for federated results.
     */
    authTokens?: Array<AuthToken> | undefined;
};

declare function autocompleteRequestFromJSON(jsonString: string): Result<AutocompleteRequest, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AutocompleteRequestResultType$ {
    /** @deprecated use `AutocompleteRequestResultType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AdditionalDocument: "ADDITIONAL_DOCUMENT";
        readonly App: "APP";
        readonly BrowserHistory: "BROWSER_HISTORY";
        readonly Datasource: "DATASOURCE";
        readonly Document: "DOCUMENT";
        readonly Entity: "ENTITY";
        readonly Golink: "GOLINK";
        readonly History: "HISTORY";
        readonly NewChat: "NEW_CHAT";
        readonly Operator: "OPERATOR";
        readonly OperatorValue: "OPERATOR_VALUE";
        readonly Quicklink: "QUICKLINK";
        readonly Suggestion: "SUGGESTION";
    }>;
    /** @deprecated use `AutocompleteRequestResultType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AdditionalDocument: "ADDITIONAL_DOCUMENT";
        readonly App: "APP";
        readonly BrowserHistory: "BROWSER_HISTORY";
        readonly Datasource: "DATASOURCE";
        readonly Document: "DOCUMENT";
        readonly Entity: "ENTITY";
        readonly Golink: "GOLINK";
        readonly History: "HISTORY";
        readonly NewChat: "NEW_CHAT";
        readonly Operator: "OPERATOR";
        readonly OperatorValue: "OPERATOR_VALUE";
        readonly Quicklink: "QUICKLINK";
        readonly Suggestion: "SUGGESTION";
    }>;
}

/** @internal */
declare const AutocompleteRequestResultType$inboundSchema: z.ZodNativeEnum<typeof AutocompleteRequestResultType>;

/** @internal */
declare const AutocompleteRequestResultType$outboundSchema: z.ZodNativeEnum<typeof AutocompleteRequestResultType>;

declare const AutocompleteRequestResultType: {
    readonly AdditionalDocument: "ADDITIONAL_DOCUMENT";
    readonly App: "APP";
    readonly BrowserHistory: "BROWSER_HISTORY";
    readonly Datasource: "DATASOURCE";
    readonly Document: "DOCUMENT";
    readonly Entity: "ENTITY";
    readonly Golink: "GOLINK";
    readonly History: "HISTORY";
    readonly NewChat: "NEW_CHAT";
    readonly Operator: "OPERATOR";
    readonly OperatorValue: "OPERATOR_VALUE";
    readonly Quicklink: "QUICKLINK";
    readonly Suggestion: "SUGGESTION";
};

declare type AutocompleteRequestResultType = ClosedEnum<typeof AutocompleteRequestResultType>;

declare function autocompleteRequestToJSON(autocompleteRequest: AutocompleteRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AutocompleteResponse$ {
    /** @deprecated use `AutocompleteResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AutocompleteResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `AutocompleteResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AutocompleteResponse$Outbound, z.ZodTypeDef, AutocompleteResponse>;
    /** @deprecated use `AutocompleteResponse$Outbound` instead. */
    type Outbound = AutocompleteResponse$Outbound;
}

/** @internal */
declare const AutocompleteResponse$inboundSchema: z.ZodType<AutocompleteResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type AutocompleteResponse$Outbound = {
    experimentIds?: Array<number> | undefined;
    trackingToken?: string | undefined;
    sessionInfo?: SessionInfo$Outbound | undefined;
    results?: Array<AutocompleteResult$Outbound> | undefined;
    groups?: Array<AutocompleteResultGroup$Outbound> | undefined;
    errorInfo?: GleanDataError$Outbound | undefined;
    backendTimeMillis?: number | undefined;
};

/** @internal */
declare const AutocompleteResponse$outboundSchema: z.ZodType<AutocompleteResponse$Outbound, z.ZodTypeDef, AutocompleteResponse>;

declare type AutocompleteResponse = {
    /**
     * List of experiment ids for the corresponding request.
     */
    experimentIds?: Array<number> | undefined;
    /**
     * An opaque token that represents this particular set of autocomplete results. To be used for /feedback reporting.
     */
    trackingToken?: string | undefined;
    sessionInfo?: SessionInfo | undefined;
    results?: Array<AutocompleteResult> | undefined;
    /**
     * Subsections of the results list from which distinct sections should be created.
     */
    groups?: Array<AutocompleteResultGroup> | undefined;
    gleanDataError?: GleanDataError | undefined;
    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    backendTimeMillis?: number | undefined;
};

declare function autocompleteResponseFromJSON(jsonString: string): Result<AutocompleteResponse, SDKValidationError>;

declare function autocompleteResponseToJSON(autocompleteResponse: AutocompleteResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AutocompleteResult$ {
    /** @deprecated use `AutocompleteResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AutocompleteResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `AutocompleteResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AutocompleteResult$Outbound, z.ZodTypeDef, AutocompleteResult>;
    /** @deprecated use `AutocompleteResult$Outbound` instead. */
    type Outbound = AutocompleteResult$Outbound;
}

/** @internal */
declare const AutocompleteResult$inboundSchema: z.ZodType<AutocompleteResult, z.ZodTypeDef, unknown>;

/** @internal */
declare type AutocompleteResult$Outbound = {
    result: string;
    keywords?: Array<string> | undefined;
    resultType?: string | undefined;
    score?: number | undefined;
    operatorMetadata?: OperatorMetadata$Outbound | undefined;
    quicklink?: Quicklink$Outbound | undefined;
    document?: Document$Outbound | undefined;
    url?: string | undefined;
    structuredResult?: StructuredResult$Outbound | undefined;
    trackingToken?: string | undefined;
    ranges?: Array<TextRange$Outbound> | undefined;
};

/** @internal */
declare const AutocompleteResult$outboundSchema: z.ZodType<AutocompleteResult$Outbound, z.ZodTypeDef, AutocompleteResult>;

declare type AutocompleteResult = {
    result: string;
    /**
     * A list of all possible keywords for given result.
     */
    keywords?: Array<string> | undefined;
    resultType?: AutocompleteResultResultType | undefined;
    /**
     * Higher indicates a more confident match.
     */
    score?: number | undefined;
    operatorMetadata?: OperatorMetadata | undefined;
    /**
     * An action for a specific datasource that will show up in autocomplete and app card, e.g. "Create new issue" for jira.
     */
    quicklink?: Quicklink | undefined;
    document?: Document_2 | undefined;
    url?: string | undefined;
    /**
     * A single object that can support any object in the work graph. Only a single object will be populated.
     */
    structuredResult?: StructuredResult | undefined;
    /**
     * A token to be passed in /feedback events associated with this autocomplete result.
     */
    trackingToken?: string | undefined;
    /**
     * Subsections of the result string to which some special formatting should be applied (eg. bold)
     */
    ranges?: Array<TextRange> | undefined;
};

declare function autocompleteResultFromJSON(jsonString: string): Result<AutocompleteResult, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AutocompleteResultGroup$ {
    /** @deprecated use `AutocompleteResultGroup$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AutocompleteResultGroup, z.ZodTypeDef, unknown>;
    /** @deprecated use `AutocompleteResultGroup$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AutocompleteResultGroup$Outbound, z.ZodTypeDef, AutocompleteResultGroup>;
    /** @deprecated use `AutocompleteResultGroup$Outbound` instead. */
    type Outbound = AutocompleteResultGroup$Outbound;
}

/** @internal */
declare const AutocompleteResultGroup$inboundSchema: z.ZodType<AutocompleteResultGroup, z.ZodTypeDef, unknown>;

/** @internal */
declare type AutocompleteResultGroup$Outbound = {
    startIndex?: number | undefined;
    endIndex?: number | undefined;
    title?: string | undefined;
};

/** @internal */
declare const AutocompleteResultGroup$outboundSchema: z.ZodType<AutocompleteResultGroup$Outbound, z.ZodTypeDef, AutocompleteResultGroup>;

/**
 * A subsection of the results list from which distinct sections should be created.
 */
declare type AutocompleteResultGroup = {
    /**
     * The inclusive start index of the range.
     */
    startIndex?: number | undefined;
    /**
     * The exclusive end index of the range.
     */
    endIndex?: number | undefined;
    /**
     * The title of the result group to be displayed. Empty means no title.
     */
    title?: string | undefined;
};

declare function autocompleteResultGroupFromJSON(jsonString: string): Result<AutocompleteResultGroup, SDKValidationError>;

declare function autocompleteResultGroupToJSON(autocompleteResultGroup: AutocompleteResultGroup): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace AutocompleteResultResultType$ {
    /** @deprecated use `AutocompleteResultResultType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AdditionalDocument: "ADDITIONAL_DOCUMENT";
        readonly App: "APP";
        readonly BrowserHistory: "BROWSER_HISTORY";
        readonly Datasource: "DATASOURCE";
        readonly Document: "DOCUMENT";
        readonly Entity: "ENTITY";
        readonly Golink: "GOLINK";
        readonly History: "HISTORY";
        readonly NewChat: "NEW_CHAT";
        readonly Operator: "OPERATOR";
        readonly OperatorValue: "OPERATOR_VALUE";
        readonly Quicklink: "QUICKLINK";
        readonly Suggestion: "SUGGESTION";
    }>;
    /** @deprecated use `AutocompleteResultResultType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AdditionalDocument: "ADDITIONAL_DOCUMENT";
        readonly App: "APP";
        readonly BrowserHistory: "BROWSER_HISTORY";
        readonly Datasource: "DATASOURCE";
        readonly Document: "DOCUMENT";
        readonly Entity: "ENTITY";
        readonly Golink: "GOLINK";
        readonly History: "HISTORY";
        readonly NewChat: "NEW_CHAT";
        readonly Operator: "OPERATOR";
        readonly OperatorValue: "OPERATOR_VALUE";
        readonly Quicklink: "QUICKLINK";
        readonly Suggestion: "SUGGESTION";
    }>;
}

/** @internal */
declare const AutocompleteResultResultType$inboundSchema: z.ZodNativeEnum<typeof AutocompleteResultResultType>;

/** @internal */
declare const AutocompleteResultResultType$outboundSchema: z.ZodNativeEnum<typeof AutocompleteResultResultType>;

declare const AutocompleteResultResultType: {
    readonly AdditionalDocument: "ADDITIONAL_DOCUMENT";
    readonly App: "APP";
    readonly BrowserHistory: "BROWSER_HISTORY";
    readonly Datasource: "DATASOURCE";
    readonly Document: "DOCUMENT";
    readonly Entity: "ENTITY";
    readonly Golink: "GOLINK";
    readonly History: "HISTORY";
    readonly NewChat: "NEW_CHAT";
    readonly Operator: "OPERATOR";
    readonly OperatorValue: "OPERATOR_VALUE";
    readonly Quicklink: "QUICKLINK";
    readonly Suggestion: "SUGGESTION";
};

declare type AutocompleteResultResultType = ClosedEnum<typeof AutocompleteResultResultType>;

declare function autocompleteResultToJSON(autocompleteResult: AutocompleteResult): string;

declare type Awaitable<T> = T | Promise<T>;

declare type Awaitable_2<T> = T | Promise<T>;

declare type BackoffStrategy = {
    initialInterval: number;
    maxInterval: number;
    exponent: number;
    maxElapsedTime: number;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Badge$ {
    /** @deprecated use `Badge$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Badge, z.ZodTypeDef, unknown>;
    /** @deprecated use `Badge$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Badge$Outbound, z.ZodTypeDef, Badge>;
    /** @deprecated use `Badge$Outbound` instead. */
    type Outbound = Badge$Outbound;
}

/** @internal */
declare const Badge$inboundSchema: z.ZodType<Badge, z.ZodTypeDef, unknown>;

/** @internal */
declare type Badge$Outbound = {
    key?: string | undefined;
    displayName?: string | undefined;
    iconConfig?: IconConfig$Outbound | undefined;
    pinned?: boolean | undefined;
};

/** @internal */
declare const Badge$outboundSchema: z.ZodType<Badge$Outbound, z.ZodTypeDef, Badge>;

/**
 * Displays a user's accomplishment or milestone
 */
declare type Badge = {
    /**
     * An auto generated unique identifier.
     */
    key?: string | undefined;
    /**
     * The badge name displayed to users
     */
    displayName?: string | undefined;
    /**
     * Defines how to render an icon
     */
    iconConfig?: IconConfig | undefined;
    /**
     * The badge should be shown on the PersonAttribution
     */
    pinned?: boolean | undefined;
};

declare function badgeFromJSON(jsonString: string): Result<Badge, SDKValidationError>;

declare function badgeToJSON(badge: Badge): string;

declare type BeforeCreateRequestContext = HookContext & {};

declare interface BeforeCreateRequestHook {
    /**
     * A hook that is called before the SDK creates a `Request` object. The hook
     * can modify how a request is constructed since certain modifications, like
     * changing the request URL, cannot be done on a request object directly.
     */
    beforeCreateRequest: (hookCtx: BeforeCreateRequestContext, input: RequestInput) => RequestInput;
}

declare type BeforeRequestContext = HookContext & {};

declare type BeforeRequestHook = (req: Request) => Awaitable<Request | void>;

declare interface BeforeRequestHook_2 {
    /**
     * A hook that is called before the SDK sends a request. The hook can
     * introduce instrumentation code such as logging, tracing and metrics or
     * replace the request before it is sent or throw an error to stop the
     * request from being sent.
     */
    beforeRequest: (hookCtx: BeforeRequestContext, request: Request) => Awaitable_2<Request>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace BulkIndexDocumentsRequest$ {
    /** @deprecated use `BulkIndexDocumentsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BulkIndexDocumentsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `BulkIndexDocumentsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BulkIndexDocumentsRequest$Outbound, z.ZodTypeDef, BulkIndexDocumentsRequest>;
    /** @deprecated use `BulkIndexDocumentsRequest$Outbound` instead. */
    type Outbound = BulkIndexDocumentsRequest$Outbound;
}

/** @internal */
declare const BulkIndexDocumentsRequest$inboundSchema: z.ZodType<BulkIndexDocumentsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type BulkIndexDocumentsRequest$Outbound = {
    uploadId: string;
    isFirstPage?: boolean | undefined;
    isLastPage?: boolean | undefined;
    forceRestartUpload?: boolean | undefined;
    datasource: string;
    documents: Array<DocumentDefinition$Outbound>;
    disableStaleDocumentDeletionCheck?: boolean | undefined;
};

/** @internal */
declare const BulkIndexDocumentsRequest$outboundSchema: z.ZodType<BulkIndexDocumentsRequest$Outbound, z.ZodTypeDef, BulkIndexDocumentsRequest>;

/**
 * Describes the request body of the /bulkindexdocuments API call
 */
declare type BulkIndexDocumentsRequest = {
    /**
     * Unique id that must be used for this bulk upload instance
     */
    uploadId: string;
    /**
     * true if this is the first page of the upload. Defaults to false
     */
    isFirstPage?: boolean | undefined;
    /**
     * true if this is the last page of the upload. Defaults to false
     */
    isLastPage?: boolean | undefined;
    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    forceRestartUpload?: boolean | undefined;
    /**
     * Datasource of the documents
     */
    datasource: string;
    /**
     * Batch of documents for the datasource
     */
    documents: Array<DocumentDefinition>;
    /**
     * True if older documents need to be force deleted after the upload completes. Defaults to older documents being deleted asynchronously. This must only be set when `isLastPage = true`
     */
    disableStaleDocumentDeletionCheck?: boolean | undefined;
};

declare function bulkIndexDocumentsRequestFromJSON(jsonString: string): Result<BulkIndexDocumentsRequest, SDKValidationError>;

declare function bulkIndexDocumentsRequestToJSON(bulkIndexDocumentsRequest: BulkIndexDocumentsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace BulkIndexEmployeesRequest$ {
    /** @deprecated use `BulkIndexEmployeesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BulkIndexEmployeesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `BulkIndexEmployeesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BulkIndexEmployeesRequest$Outbound, z.ZodTypeDef, BulkIndexEmployeesRequest>;
    /** @deprecated use `BulkIndexEmployeesRequest$Outbound` instead. */
    type Outbound = BulkIndexEmployeesRequest$Outbound;
}

/** @internal */
declare const BulkIndexEmployeesRequest$inboundSchema: z.ZodType<BulkIndexEmployeesRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type BulkIndexEmployeesRequest$Outbound = {
    uploadId: string;
    isFirstPage?: boolean | undefined;
    isLastPage?: boolean | undefined;
    forceRestartUpload?: boolean | undefined;
    employees: Array<EmployeeInfoDefinition$Outbound>;
    disableStaleDataDeletionCheck?: boolean | undefined;
};

/** @internal */
declare const BulkIndexEmployeesRequest$outboundSchema: z.ZodType<BulkIndexEmployeesRequest$Outbound, z.ZodTypeDef, BulkIndexEmployeesRequest>;

/**
 * Describes the request body of the /bulkindexemployees API call
 */
declare type BulkIndexEmployeesRequest = {
    /**
     * Unique id that must be used for this bulk upload instance
     */
    uploadId: string;
    /**
     * true if this is the first page of the upload. Defaults to false
     */
    isFirstPage?: boolean | undefined;
    /**
     * true if this is the last page of the upload. Defaults to false
     */
    isLastPage?: boolean | undefined;
    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    forceRestartUpload?: boolean | undefined;
    /**
     * Batch of employee information
     */
    employees: Array<EmployeeInfoDefinition>;
    /**
     * True if older employee data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than 20%. This must only be set when `isLastPage = true`
     */
    disableStaleDataDeletionCheck?: boolean | undefined;
};

declare function bulkIndexEmployeesRequestFromJSON(jsonString: string): Result<BulkIndexEmployeesRequest, SDKValidationError>;

declare function bulkIndexEmployeesRequestToJSON(bulkIndexEmployeesRequest: BulkIndexEmployeesRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace BulkIndexGroupsRequest$ {
    /** @deprecated use `BulkIndexGroupsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BulkIndexGroupsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `BulkIndexGroupsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BulkIndexGroupsRequest$Outbound, z.ZodTypeDef, BulkIndexGroupsRequest>;
    /** @deprecated use `BulkIndexGroupsRequest$Outbound` instead. */
    type Outbound = BulkIndexGroupsRequest$Outbound;
}

/** @internal */
declare const BulkIndexGroupsRequest$inboundSchema: z.ZodType<BulkIndexGroupsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type BulkIndexGroupsRequest$Outbound = {
    uploadId: string;
    isFirstPage?: boolean | undefined;
    isLastPage?: boolean | undefined;
    forceRestartUpload?: boolean | undefined;
    datasource: string;
    groups: Array<DatasourceGroupDefinition$Outbound>;
    disableStaleDataDeletionCheck?: boolean | undefined;
};

/** @internal */
declare const BulkIndexGroupsRequest$outboundSchema: z.ZodType<BulkIndexGroupsRequest$Outbound, z.ZodTypeDef, BulkIndexGroupsRequest>;

/**
 * Describes the request body for the /bulkindexgroups API call
 */
declare type BulkIndexGroupsRequest = {
    /**
     * Unique id that must be used for this instance of datasource groups upload
     */
    uploadId: string;
    /**
     * true if this is the first page of the upload. Defaults to false
     */
    isFirstPage?: boolean | undefined;
    /**
     * true if this is the last page of the upload. Defaults to false
     */
    isLastPage?: boolean | undefined;
    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    forceRestartUpload?: boolean | undefined;
    /**
     * datasource of the groups
     */
    datasource: string;
    /**
     * batch of groups for the datasource
     */
    groups: Array<DatasourceGroupDefinition>;
    /**
     * True if older group data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than a reasonable threshold. This must only be set when `isLastPage = true`
     */
    disableStaleDataDeletionCheck?: boolean | undefined;
};

declare function bulkIndexGroupsRequestFromJSON(jsonString: string): Result<BulkIndexGroupsRequest, SDKValidationError>;

declare function bulkIndexGroupsRequestToJSON(bulkIndexGroupsRequest: BulkIndexGroupsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace BulkIndexMembershipsRequest$ {
    /** @deprecated use `BulkIndexMembershipsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BulkIndexMembershipsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `BulkIndexMembershipsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BulkIndexMembershipsRequest$Outbound, z.ZodTypeDef, BulkIndexMembershipsRequest>;
    /** @deprecated use `BulkIndexMembershipsRequest$Outbound` instead. */
    type Outbound = BulkIndexMembershipsRequest$Outbound;
}

/** @internal */
declare const BulkIndexMembershipsRequest$inboundSchema: z.ZodType<BulkIndexMembershipsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type BulkIndexMembershipsRequest$Outbound = {
    uploadId: string;
    isFirstPage?: boolean | undefined;
    isLastPage?: boolean | undefined;
    forceRestartUpload?: boolean | undefined;
    datasource: string;
    group?: string | undefined;
    memberships: Array<DatasourceBulkMembershipDefinition$Outbound>;
};

/** @internal */
declare const BulkIndexMembershipsRequest$outboundSchema: z.ZodType<BulkIndexMembershipsRequest$Outbound, z.ZodTypeDef, BulkIndexMembershipsRequest>;

/**
 * Describes the request body for the /bulkindexmemberships API call
 */
declare type BulkIndexMembershipsRequest = {
    /**
     * Unique id that must be used for this instance of datasource group memberships upload
     */
    uploadId: string;
    /**
     * true if this is the first page of the upload. Defaults to false
     */
    isFirstPage?: boolean | undefined;
    /**
     * true if this is the last page of the upload. Defaults to false
     */
    isLastPage?: boolean | undefined;
    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    forceRestartUpload?: boolean | undefined;
    /**
     * datasource of the memberships
     */
    datasource: string;
    /**
     * group who's memberships are specified
     */
    group?: string | undefined;
    /**
     * batch of memberships for the group
     */
    memberships: Array<DatasourceBulkMembershipDefinition>;
};

declare function bulkIndexMembershipsRequestFromJSON(jsonString: string): Result<BulkIndexMembershipsRequest, SDKValidationError>;

declare function bulkIndexMembershipsRequestToJSON(bulkIndexMembershipsRequest: BulkIndexMembershipsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace BulkIndexShortcutsRequest$ {
    /** @deprecated use `BulkIndexShortcutsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BulkIndexShortcutsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `BulkIndexShortcutsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BulkIndexShortcutsRequest$Outbound, z.ZodTypeDef, BulkIndexShortcutsRequest>;
    /** @deprecated use `BulkIndexShortcutsRequest$Outbound` instead. */
    type Outbound = BulkIndexShortcutsRequest$Outbound;
}

/** @internal */
declare const BulkIndexShortcutsRequest$inboundSchema: z.ZodType<BulkIndexShortcutsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type BulkIndexShortcutsRequest$Outbound = {
    uploadId: string;
    isFirstPage?: boolean | undefined;
    isLastPage?: boolean | undefined;
    forceRestartUpload?: boolean | undefined;
    shortcuts: Array<ExternalShortcut$Outbound>;
};

/** @internal */
declare const BulkIndexShortcutsRequest$outboundSchema: z.ZodType<BulkIndexShortcutsRequest$Outbound, z.ZodTypeDef, BulkIndexShortcutsRequest>;

/**
 * Describes the request body of the /bulkindexshortcuts API call
 */
declare type BulkIndexShortcutsRequest = {
    /**
     * Unique id that must be used for this bulk upload instance
     */
    uploadId: string;
    /**
     * true if this is the first page of the upload. Defaults to false
     */
    isFirstPage?: boolean | undefined;
    /**
     * true if this is the last page of the upload. Defaults to false
     */
    isLastPage?: boolean | undefined;
    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    forceRestartUpload?: boolean | undefined;
    /**
     * Batch of shortcuts information
     */
    shortcuts: Array<ExternalShortcut>;
};

declare function bulkIndexShortcutsRequestFromJSON(jsonString: string): Result<BulkIndexShortcutsRequest, SDKValidationError>;

declare function bulkIndexShortcutsRequestToJSON(bulkIndexShortcutsRequest: BulkIndexShortcutsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace BulkIndexTeamsRequest$ {
    /** @deprecated use `BulkIndexTeamsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BulkIndexTeamsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `BulkIndexTeamsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BulkIndexTeamsRequest$Outbound, z.ZodTypeDef, BulkIndexTeamsRequest>;
    /** @deprecated use `BulkIndexTeamsRequest$Outbound` instead. */
    type Outbound = BulkIndexTeamsRequest$Outbound;
}

/** @internal */
declare const BulkIndexTeamsRequest$inboundSchema: z.ZodType<BulkIndexTeamsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type BulkIndexTeamsRequest$Outbound = {
    uploadId: string;
    isFirstPage?: boolean | undefined;
    isLastPage?: boolean | undefined;
    forceRestartUpload?: boolean | undefined;
    teams: Array<TeamInfoDefinition$Outbound>;
};

/** @internal */
declare const BulkIndexTeamsRequest$outboundSchema: z.ZodType<BulkIndexTeamsRequest$Outbound, z.ZodTypeDef, BulkIndexTeamsRequest>;

/**
 * Describes the request body of the /bulkindexteams API call
 */
declare type BulkIndexTeamsRequest = {
    /**
     * Unique id that must be used for this bulk upload instance
     */
    uploadId: string;
    /**
     * true if this is the first page of the upload. Defaults to false
     */
    isFirstPage?: boolean | undefined;
    /**
     * true if this is the last page of the upload. Defaults to false
     */
    isLastPage?: boolean | undefined;
    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    forceRestartUpload?: boolean | undefined;
    /**
     * Batch of team information
     */
    teams: Array<TeamInfoDefinition>;
};

declare function bulkIndexTeamsRequestFromJSON(jsonString: string): Result<BulkIndexTeamsRequest, SDKValidationError>;

declare function bulkIndexTeamsRequestToJSON(bulkIndexTeamsRequest: BulkIndexTeamsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace BulkIndexUsersRequest$ {
    /** @deprecated use `BulkIndexUsersRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BulkIndexUsersRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `BulkIndexUsersRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BulkIndexUsersRequest$Outbound, z.ZodTypeDef, BulkIndexUsersRequest>;
    /** @deprecated use `BulkIndexUsersRequest$Outbound` instead. */
    type Outbound = BulkIndexUsersRequest$Outbound;
}

/** @internal */
declare const BulkIndexUsersRequest$inboundSchema: z.ZodType<BulkIndexUsersRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type BulkIndexUsersRequest$Outbound = {
    uploadId: string;
    isFirstPage?: boolean | undefined;
    isLastPage?: boolean | undefined;
    forceRestartUpload?: boolean | undefined;
    datasource: string;
    users: Array<DatasourceUserDefinition$Outbound>;
    disableStaleDataDeletionCheck?: boolean | undefined;
};

/** @internal */
declare const BulkIndexUsersRequest$outboundSchema: z.ZodType<BulkIndexUsersRequest$Outbound, z.ZodTypeDef, BulkIndexUsersRequest>;

/**
 * Describes the request body for the /bulkindexusers API call
 */
declare type BulkIndexUsersRequest = {
    /**
     * Unique id that must be used for this instance of datasource users upload
     */
    uploadId: string;
    /**
     * true if this is the first page of the upload. Defaults to false
     */
    isFirstPage?: boolean | undefined;
    /**
     * true if this is the last page of the upload. Defaults to false
     */
    isLastPage?: boolean | undefined;
    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    forceRestartUpload?: boolean | undefined;
    /**
     * datasource of the users
     */
    datasource: string;
    /**
     * batch of users for the datasource
     */
    users: Array<DatasourceUserDefinition>;
    /**
     * True if older user data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than a reasonable threshold. This must only be set when `isLastPage = true`
     */
    disableStaleDataDeletionCheck?: boolean | undefined;
};

declare function bulkIndexUsersRequestFromJSON(jsonString: string): Result<BulkIndexUsersRequest, SDKValidationError>;

declare function bulkIndexUsersRequestToJSON(bulkIndexUsersRequest: BulkIndexUsersRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace BulkUploadHistoryEvent$ {
    /** @deprecated use `BulkUploadHistoryEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BulkUploadHistoryEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `BulkUploadHistoryEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BulkUploadHistoryEvent$Outbound, z.ZodTypeDef, BulkUploadHistoryEvent>;
    /** @deprecated use `BulkUploadHistoryEvent$Outbound` instead. */
    type Outbound = BulkUploadHistoryEvent$Outbound;
}

/** @internal */
declare const BulkUploadHistoryEvent$inboundSchema: z.ZodType<BulkUploadHistoryEvent, z.ZodTypeDef, unknown>;

/** @internal */
declare type BulkUploadHistoryEvent$Outbound = {
    uploadId?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    status?: string | undefined;
    processingState?: string | undefined;
};

/** @internal */
declare const BulkUploadHistoryEvent$outboundSchema: z.ZodType<BulkUploadHistoryEvent$Outbound, z.ZodTypeDef, BulkUploadHistoryEvent>;

/**
 * Information about a successful bulk upload
 */
declare type BulkUploadHistoryEvent = {
    /**
     * The unique ID of the upload
     */
    uploadId?: string | undefined;
    /**
     * The start time of the upload in ISO 8601 format
     */
    startTime?: string | undefined;
    /**
     * The end time of the upload in ISO 8601 format, 'NA' if the upload is still active
     */
    endTime?: string | undefined;
    /**
     * The status of the upload, an enum of ACTIVE, SUCCESSFUL
     */
    status?: BulkUploadHistoryEventStatus | undefined;
    /**
     * The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
     */
    processingState?: ProcessingState | undefined;
};

declare function bulkUploadHistoryEventFromJSON(jsonString: string): Result<BulkUploadHistoryEvent, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace BulkUploadHistoryEventStatus$ {
    /** @deprecated use `BulkUploadHistoryEventStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Active: "ACTIVE";
        readonly Successful: "SUCCESSFUL";
    }>;
    /** @deprecated use `BulkUploadHistoryEventStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Active: "ACTIVE";
        readonly Successful: "SUCCESSFUL";
    }>;
}

/** @internal */
declare const BulkUploadHistoryEventStatus$inboundSchema: z.ZodNativeEnum<typeof BulkUploadHistoryEventStatus>;

/** @internal */
declare const BulkUploadHistoryEventStatus$outboundSchema: z.ZodNativeEnum<typeof BulkUploadHistoryEventStatus>;

/**
 * The status of the upload, an enum of ACTIVE, SUCCESSFUL
 */
declare const BulkUploadHistoryEventStatus: {
    readonly Active: "ACTIVE";
    readonly Successful: "SUCCESSFUL";
};

/**
 * The status of the upload, an enum of ACTIVE, SUCCESSFUL
 */
declare type BulkUploadHistoryEventStatus = ClosedEnum<typeof BulkUploadHistoryEventStatus>;

declare function bulkUploadHistoryEventToJSON(bulkUploadHistoryEvent: BulkUploadHistoryEvent): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CalendarAttendee$ {
    /** @deprecated use `CalendarAttendee$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CalendarAttendee, z.ZodTypeDef, unknown>;
    /** @deprecated use `CalendarAttendee$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CalendarAttendee$Outbound, z.ZodTypeDef, CalendarAttendee>;
    /** @deprecated use `CalendarAttendee$Outbound` instead. */
    type Outbound = CalendarAttendee$Outbound;
}

/** @internal */
declare const CalendarAttendee$inboundSchema: z.ZodType<CalendarAttendee, z.ZodTypeDef, unknown>;

/** @internal */
declare type CalendarAttendee$Outbound = {
    isOrganizer?: boolean | undefined;
    isInGroup?: boolean | undefined;
    person: Person$Outbound;
    groupAttendees?: Array<CalendarAttendee$Outbound> | undefined;
    responseStatus?: string | undefined;
};

/** @internal */
declare const CalendarAttendee$outboundSchema: z.ZodType<CalendarAttendee$Outbound, z.ZodTypeDef, CalendarAttendee>;

declare type CalendarAttendee = {
    /**
     * Whether or not this attendee is an organizer.
     */
    isOrganizer?: boolean | undefined;
    /**
     * Whether or not this attendee is in a group. Needed temporarily at least to support both flat attendees and tree for compatibility.
     */
    isInGroup?: boolean | undefined;
    person: Person;
    /**
     * If this attendee is a group, represents the list of individual attendees in the group.
     */
    groupAttendees?: Array<CalendarAttendee> | undefined;
    responseStatus?: ResponseStatus | undefined;
};

declare function calendarAttendeeFromJSON(jsonString: string): Result<CalendarAttendee, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CalendarAttendees$ {
    /** @deprecated use `CalendarAttendees$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CalendarAttendees, z.ZodTypeDef, unknown>;
    /** @deprecated use `CalendarAttendees$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CalendarAttendees$Outbound, z.ZodTypeDef, CalendarAttendees>;
    /** @deprecated use `CalendarAttendees$Outbound` instead. */
    type Outbound = CalendarAttendees$Outbound;
}

/** @internal */
declare const CalendarAttendees$inboundSchema: z.ZodType<CalendarAttendees, z.ZodTypeDef, unknown>;

/** @internal */
declare type CalendarAttendees$Outbound = {
    people?: Array<CalendarAttendee$Outbound> | undefined;
    isLimit?: boolean | undefined;
    total?: number | undefined;
    numAccepted?: number | undefined;
    numDeclined?: number | undefined;
    numNoResponse?: number | undefined;
    numTentative?: number | undefined;
};

/** @internal */
declare const CalendarAttendees$outboundSchema: z.ZodType<CalendarAttendees$Outbound, z.ZodTypeDef, CalendarAttendees>;

declare type CalendarAttendees = {
    /**
     * Full details of some of the attendees of this event
     */
    people?: Array<CalendarAttendee> | undefined;
    /**
     * Whether the total count of the people returned is at the retrieval limit.
     */
    isLimit?: boolean | undefined;
    /**
     * Total number of attendees in this event.
     */
    total?: number | undefined;
    /**
     * Total number of attendees who have accepted this event.
     */
    numAccepted?: number | undefined;
    /**
     * Total number of attendees who have declined this event.
     */
    numDeclined?: number | undefined;
    /**
     * Total number of attendees who have not responded to this event.
     */
    numNoResponse?: number | undefined;
    /**
     * Total number of attendees who have responded tentatively (i.e. responded maybe) to this event.
     */
    numTentative?: number | undefined;
};

declare function calendarAttendeesFromJSON(jsonString: string): Result<CalendarAttendees, SDKValidationError>;

declare function calendarAttendeesToJSON(calendarAttendees: CalendarAttendees): string;

declare function calendarAttendeeToJSON(calendarAttendee: CalendarAttendee): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CalendarEvent$ {
    /** @deprecated use `CalendarEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CalendarEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `CalendarEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CalendarEvent$Outbound, z.ZodTypeDef, CalendarEvent>;
    /** @deprecated use `CalendarEvent$Outbound` instead. */
    type Outbound = CalendarEvent$Outbound;
}

/** @internal */
declare const CalendarEvent$inboundSchema: z.ZodType<CalendarEvent, z.ZodTypeDef, unknown>;

/** @internal */
declare type CalendarEvent$Outbound = {
    time?: TimeInterval$Outbound | undefined;
    eventType?: string | undefined;
    id: string;
    url: string;
    attendees?: CalendarAttendees$Outbound | undefined;
    location?: string | undefined;
    conferenceData?: ConferenceData$Outbound | undefined;
    description?: string | undefined;
    datasource?: string | undefined;
    hasTranscript?: boolean | undefined;
    transcriptUrl?: string | undefined;
    classifications?: Array<EventClassification$Outbound> | undefined;
    generatedAttachments?: Array<GeneratedAttachment$Outbound> | undefined;
};

/** @internal */
declare const CalendarEvent$outboundSchema: z.ZodType<CalendarEvent$Outbound, z.ZodTypeDef, CalendarEvent>;

/**
 * A generic, light-weight calendar event.
 */
declare type CalendarEvent = {
    time?: TimeInterval | undefined;
    /**
     * The nature of the event, for example "out of office".
     */
    eventType?: CalendarEventEventType | undefined;
    /**
     * The calendar event id
     */
    id: string;
    /**
     * A permalink for this calendar event
     */
    url: string;
    attendees?: CalendarAttendees | undefined;
    /**
     * The location that this event is taking place at.
     */
    location?: string | undefined;
    conferenceData?: ConferenceData | undefined;
    /**
     * The HTML description of the event.
     */
    description?: string | undefined;
    /**
     * The app or other repository type from which the event was extracted
     */
    datasource?: string | undefined;
    /**
     * The event has a transcript associated with it enabling features like summarization
     */
    hasTranscript?: boolean | undefined;
    /**
     * A link to the transcript of the event
     */
    transcriptUrl?: string | undefined;
    classifications?: Array<EventClassification> | undefined;
    generatedAttachments?: Array<GeneratedAttachment> | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CalendarEventEventType$ {
    /** @deprecated use `CalendarEventEventType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Default: "DEFAULT";
        readonly OutOfOffice: "OUT_OF_OFFICE";
    }>;
    /** @deprecated use `CalendarEventEventType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Default: "DEFAULT";
        readonly OutOfOffice: "OUT_OF_OFFICE";
    }>;
}

/** @internal */
declare const CalendarEventEventType$inboundSchema: z.ZodNativeEnum<typeof CalendarEventEventType>;

/** @internal */
declare const CalendarEventEventType$outboundSchema: z.ZodNativeEnum<typeof CalendarEventEventType>;

/**
 * The nature of the event, for example "out of office".
 */
declare const CalendarEventEventType: {
    readonly Default: "DEFAULT";
    readonly OutOfOffice: "OUT_OF_OFFICE";
};

/**
 * The nature of the event, for example "out of office".
 */
declare type CalendarEventEventType = ClosedEnum<typeof CalendarEventEventType>;

declare function calendarEventFromJSON(jsonString: string): Result<CalendarEvent, SDKValidationError>;

declare function calendarEventToJSON(calendarEvent: CalendarEvent): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CanonicalizingRegexType$ {
    /** @deprecated use `CanonicalizingRegexType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CanonicalizingRegexType, z.ZodTypeDef, unknown>;
    /** @deprecated use `CanonicalizingRegexType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CanonicalizingRegexType$Outbound, z.ZodTypeDef, CanonicalizingRegexType>;
    /** @deprecated use `CanonicalizingRegexType$Outbound` instead. */
    type Outbound = CanonicalizingRegexType$Outbound;
}

/** @internal */
declare const CanonicalizingRegexType$inboundSchema: z.ZodType<CanonicalizingRegexType, z.ZodTypeDef, unknown>;

/** @internal */
declare type CanonicalizingRegexType$Outbound = {
    matchRegex?: string | undefined;
    rewriteRegex?: string | undefined;
};

/** @internal */
declare const CanonicalizingRegexType$outboundSchema: z.ZodType<CanonicalizingRegexType$Outbound, z.ZodTypeDef, CanonicalizingRegexType>;

/**
 * Regular expression to apply to an arbitrary string to transform it into a canonical string.
 */
declare type CanonicalizingRegexType = {
    /**
     * Regular expression to match to an arbitrary string.
     */
    matchRegex?: string | undefined;
    /**
     * Regular expression to transform into a canonical string.
     */
    rewriteRegex?: string | undefined;
};

declare function canonicalizingRegexTypeFromJSON(jsonString: string): Result<CanonicalizingRegexType, SDKValidationError>;

declare function canonicalizingRegexTypeToJSON(canonicalizingRegexType: CanonicalizingRegexType): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CategoryToResultSize$ {
    /** @deprecated use `CategoryToResultSize$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CategoryToResultSize, z.ZodTypeDef, unknown>;
    /** @deprecated use `CategoryToResultSize$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CategoryToResultSize$Outbound, z.ZodTypeDef, CategoryToResultSize>;
    /** @deprecated use `CategoryToResultSize$Outbound` instead. */
    type Outbound = CategoryToResultSize$Outbound;
}

/** @internal */
declare const CategoryToResultSize$inboundSchema: z.ZodType<CategoryToResultSize, z.ZodTypeDef, unknown>;

/** @internal */
declare type CategoryToResultSize$Outbound = {
    resultSize?: number | undefined;
};

/** @internal */
declare const CategoryToResultSize$outboundSchema: z.ZodType<CategoryToResultSize$Outbound, z.ZodTypeDef, CategoryToResultSize>;

declare type CategoryToResultSize = {
    resultSize?: number | undefined;
};

declare function categoryToResultSizeFromJSON(jsonString: string): Result<CategoryToResultSize, SDKValidationError>;

declare function categoryToResultSizeToJSON(categoryToResultSize: CategoryToResultSize): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChannelInviteInfo$ {
    /** @deprecated use `ChannelInviteInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChannelInviteInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChannelInviteInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChannelInviteInfo$Outbound, z.ZodTypeDef, ChannelInviteInfo>;
    /** @deprecated use `ChannelInviteInfo$Outbound` instead. */
    type Outbound = ChannelInviteInfo$Outbound;
}

/** @internal */
declare const ChannelInviteInfo$inboundSchema: z.ZodType<ChannelInviteInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChannelInviteInfo$Outbound = {
    channel?: string | undefined;
    isAutoInvite?: boolean | undefined;
    inviter?: Person$Outbound | undefined;
    inviteTime?: string | undefined;
    reminderTime?: string | undefined;
};

/** @internal */
declare const ChannelInviteInfo$outboundSchema: z.ZodType<ChannelInviteInfo$Outbound, z.ZodTypeDef, ChannelInviteInfo>;

/**
 * Information regarding the invite status of a person for a particular channel.
 */
declare type ChannelInviteInfo = {
    channel?: CommunicationChannel | undefined;
    /**
     * Bit that tracks if this invite was automatically sent or user-sent
     */
    isAutoInvite?: boolean | undefined;
    inviter?: Person | undefined;
    /**
     * The time this person was invited in ISO format (ISO 8601).
     */
    inviteTime?: Date | undefined;
    /**
     * The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
     */
    reminderTime?: Date | undefined;
};

declare function channelInviteInfoFromJSON(jsonString: string): Result<ChannelInviteInfo, SDKValidationError>;

declare function channelInviteInfoToJSON(channelInviteInfo: ChannelInviteInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Chat$ {
    /** @deprecated use `Chat$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Chat, z.ZodTypeDef, unknown>;
    /** @deprecated use `Chat$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Chat$Outbound, z.ZodTypeDef, Chat>;
    /** @deprecated use `Chat$Outbound` instead. */
    type Outbound = Chat$Outbound;
}

/** @internal */
declare const Chat$inboundSchema: z.ZodType<Chat, z.ZodTypeDef, unknown>;

/** @internal */
declare type Chat$Outbound = {
    id?: string | undefined;
    createTime?: number | undefined;
    createdBy?: Person$Outbound | undefined;
    updateTime?: number | undefined;
    name?: string | undefined;
    applicationId?: string | undefined;
    applicationName?: string | undefined;
    icon?: IconConfig$Outbound | undefined;
    permissions?: ObjectPermissions$Outbound | undefined;
    messages?: Array<ChatMessage$Outbound> | undefined;
    roles?: Array<UserRoleSpecification$Outbound> | undefined;
};

/** @internal */
declare const Chat$outboundSchema: z.ZodType<Chat$Outbound, z.ZodTypeDef, Chat>;

/**
 * A historical representation of a series of chat messages a user had with Glean Assistant.
 */
declare type Chat = {
    /**
     * The opaque id of the Chat.
     */
    id?: string | undefined;
    /**
     * Server Unix timestamp of the creation time (in seconds since epoch UTC).
     */
    createTime?: number | undefined;
    createdBy?: Person | undefined;
    /**
     * Server Unix timestamp of the update time (in seconds since epoch UTC).
     */
    updateTime?: number | undefined;
    /**
     * The name of the Chat.
     */
    name?: string | undefined;
    /**
     * The ID of the AI App that this Chat is associated to.
     */
    applicationId?: string | undefined;
    /**
     * The display name of the AI App that this Chat is associated to.
     */
    applicationName?: string | undefined;
    /**
     * Defines how to render an icon
     */
    icon?: IconConfig | undefined;
    permissions?: ObjectPermissions | undefined;
    /**
     * The chat messages within a Chat.
     */
    messages?: Array<ChatMessage> | undefined;
    /**
     * A list of roles for this Chat.
     */
    roles?: Array<UserRoleSpecification> | undefined;
};

declare class Chat_2 extends ClientSDK {
    /**
     * Chat
     *
     * @remarks
     * Have a conversation with Glean AI.
     */
    create(chatRequest: components.ChatRequest, timezoneOffset?: number | undefined, options?: RequestOptions): Promise<components.ChatResponse>;
    /**
     * Deletes all saved Chats owned by a user
     *
     * @remarks
     * Deletes all saved Chats a user has had and all their contained conversational content.
     */
    deleteAll(timezoneOffset?: number | undefined, options?: RequestOptions): Promise<void>;
    /**
     * Deletes saved Chats
     *
     * @remarks
     * Deletes saved Chats and all their contained conversational content.
     */
    delete(deleteChatsRequest: components.DeleteChatsRequest, timezoneOffset?: number | undefined, options?: RequestOptions): Promise<void>;
    /**
     * Retrieves a Chat
     *
     * @remarks
     * Retrieves the chat history between Glean Assistant and the user for a given Chat.
     */
    retrieve(getChatRequest: components.GetChatRequest, timezoneOffset?: number | undefined, options?: RequestOptions): Promise<components.GetChatResponse>;
    /**
     * Retrieves all saved Chats
     *
     * @remarks
     * Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content.
     */
    list(timezoneOffset?: number | undefined, options?: RequestOptions): Promise<components.ListChatsResponse>;
    /**
     * Gets the metadata for a custom Chat application
     *
     * @remarks
     * Gets the Chat application details for the specified application ID.
     */
    retrieveApplication(getChatApplicationRequest: components.GetChatApplicationRequest, timezoneOffset?: number | undefined, options?: RequestOptions): Promise<components.GetChatApplicationResponse>;
    /**
     * Upload files for Chat.
     *
     * @remarks
     * Upload files for Chat.
     */
    uploadFiles(uploadChatFilesRequest: components.UploadChatFilesRequest, timezoneOffset?: number | undefined, options?: RequestOptions): Promise<components.UploadChatFilesResponse>;
    /**
     * Get files uploaded by a user for Chat.
     *
     * @remarks
     * Get files uploaded by a user for Chat.
     */
    retrieveFiles(getChatFilesRequest: components.GetChatFilesRequest, timezoneOffset?: number | undefined, options?: RequestOptions): Promise<components.GetChatFilesResponse>;
    /**
     * Delete files uploaded by a user for chat.
     *
     * @remarks
     * Delete files uploaded by a user for Chat.
     */
    deleteFiles(deleteChatFilesRequest: components.DeleteChatFilesRequest, timezoneOffset?: number | undefined, options?: RequestOptions): Promise<void>;
    /**
     * Chat
     *
     * @remarks
     * Have a conversation with Glean AI.
     */
    createStream(chatRequest: components.ChatRequest, timezoneOffset?: number | undefined, options?: RequestOptions): Promise<string>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatFile$ {
    /** @deprecated use `ChatFile$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatFile, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatFile$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatFile$Outbound, z.ZodTypeDef, ChatFile>;
    /** @deprecated use `ChatFile$Outbound` instead. */
    type Outbound = ChatFile$Outbound;
}

/** @internal */
declare const ChatFile$inboundSchema: z.ZodType<ChatFile, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatFile$Outbound = {
    id?: string | undefined;
    url?: string | undefined;
    name?: string | undefined;
    metadata?: ChatFileMetadata$Outbound | undefined;
};

/** @internal */
declare const ChatFile$outboundSchema: z.ZodType<ChatFile$Outbound, z.ZodTypeDef, ChatFile>;

/**
 * Structure for file uploaded by a user for Chat.
 */
declare type ChatFile = {
    /**
     * Unique identifier of the file.
     */
    id?: string | undefined;
    /**
     * Url of the file.
     */
    url?: string | undefined;
    /**
     * Name of the uploaded file.
     */
    name?: string | undefined;
    /**
     * Metadata of a file uploaded by a user for Chat.
     */
    metadata?: ChatFileMetadata | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatFileFailureReason$ {
    /** @deprecated use `ChatFileFailureReason$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ParseFailed: "PARSE_FAILED";
        readonly AvScanFailed: "AV_SCAN_FAILED";
        readonly FileTooSmall: "FILE_TOO_SMALL";
        readonly FileTooLarge: "FILE_TOO_LARGE";
        readonly FileExtensionUnsupported: "FILE_EXTENSION_UNSUPPORTED";
        readonly FileMetadataValidationFail: "FILE_METADATA_VALIDATION_FAIL";
        readonly FileProcessingTimedOut: "FILE_PROCESSING_TIMED_OUT";
    }>;
    /** @deprecated use `ChatFileFailureReason$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ParseFailed: "PARSE_FAILED";
        readonly AvScanFailed: "AV_SCAN_FAILED";
        readonly FileTooSmall: "FILE_TOO_SMALL";
        readonly FileTooLarge: "FILE_TOO_LARGE";
        readonly FileExtensionUnsupported: "FILE_EXTENSION_UNSUPPORTED";
        readonly FileMetadataValidationFail: "FILE_METADATA_VALIDATION_FAIL";
        readonly FileProcessingTimedOut: "FILE_PROCESSING_TIMED_OUT";
    }>;
}

/** @internal */
declare const ChatFileFailureReason$inboundSchema: z.ZodNativeEnum<typeof ChatFileFailureReason>;

/** @internal */
declare const ChatFileFailureReason$outboundSchema: z.ZodNativeEnum<typeof ChatFileFailureReason>;

/**
 * Reason for failed status.
 */
declare const ChatFileFailureReason: {
    readonly ParseFailed: "PARSE_FAILED";
    readonly AvScanFailed: "AV_SCAN_FAILED";
    readonly FileTooSmall: "FILE_TOO_SMALL";
    readonly FileTooLarge: "FILE_TOO_LARGE";
    readonly FileExtensionUnsupported: "FILE_EXTENSION_UNSUPPORTED";
    readonly FileMetadataValidationFail: "FILE_METADATA_VALIDATION_FAIL";
    readonly FileProcessingTimedOut: "FILE_PROCESSING_TIMED_OUT";
};

/**
 * Reason for failed status.
 */
declare type ChatFileFailureReason = ClosedEnum<typeof ChatFileFailureReason>;

declare function chatFileFromJSON(jsonString: string): Result<ChatFile, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatFileMetadata$ {
    /** @deprecated use `ChatFileMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatFileMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatFileMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatFileMetadata$Outbound, z.ZodTypeDef, ChatFileMetadata>;
    /** @deprecated use `ChatFileMetadata$Outbound` instead. */
    type Outbound = ChatFileMetadata$Outbound;
}

/** @internal */
declare const ChatFileMetadata$inboundSchema: z.ZodType<ChatFileMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatFileMetadata$Outbound = {
    status?: string | undefined;
    uploadTime?: number | undefined;
    processedSize?: number | undefined;
    failureReason?: string | undefined;
    mimeType?: string | undefined;
};

/** @internal */
declare const ChatFileMetadata$outboundSchema: z.ZodType<ChatFileMetadata$Outbound, z.ZodTypeDef, ChatFileMetadata>;

/**
 * Metadata of a file uploaded by a user for Chat.
 */
declare type ChatFileMetadata = {
    /**
     * Current status of the file.
     */
    status?: ChatFileStatus | undefined;
    /**
     * Upload time, in epoch seconds.
     */
    uploadTime?: number | undefined;
    /**
     * Size of the processed file in bytes.
     */
    processedSize?: number | undefined;
    /**
     * Reason for failed status.
     */
    failureReason?: ChatFileFailureReason | undefined;
    /**
     * MIME type of the file.
     */
    mimeType?: string | undefined;
};

declare function chatFileMetadataFromJSON(jsonString: string): Result<ChatFileMetadata, SDKValidationError>;

declare function chatFileMetadataToJSON(chatFileMetadata: ChatFileMetadata): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatFileStatus$ {
    /** @deprecated use `ChatFileStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Processing: "PROCESSING";
        readonly Processed: "PROCESSED";
        readonly Failed: "FAILED";
        readonly Deleted: "DELETED";
    }>;
    /** @deprecated use `ChatFileStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Processing: "PROCESSING";
        readonly Processed: "PROCESSED";
        readonly Failed: "FAILED";
        readonly Deleted: "DELETED";
    }>;
}

/** @internal */
declare const ChatFileStatus$inboundSchema: z.ZodNativeEnum<typeof ChatFileStatus>;

/** @internal */
declare const ChatFileStatus$outboundSchema: z.ZodNativeEnum<typeof ChatFileStatus>;

/**
 * Current status of the file.
 */
declare const ChatFileStatus: {
    readonly Processing: "PROCESSING";
    readonly Processed: "PROCESSED";
    readonly Failed: "FAILED";
    readonly Deleted: "DELETED";
};

/**
 * Current status of the file.
 */
declare type ChatFileStatus = ClosedEnum<typeof ChatFileStatus>;

declare function chatFileToJSON(chatFile: ChatFile): string;

declare function chatFromJSON(jsonString: string): Result<Chat, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatMessage$ {
    /** @deprecated use `ChatMessage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatMessage, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatMessage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatMessage$Outbound, z.ZodTypeDef, ChatMessage>;
    /** @deprecated use `ChatMessage$Outbound` instead. */
    type Outbound = ChatMessage$Outbound;
}

/** @internal */
declare const ChatMessage$inboundSchema: z.ZodType<ChatMessage, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatMessage$Outbound = {
    agentConfig?: AgentConfig$Outbound | undefined;
    author: string;
    citations?: Array<ChatMessageCitation$Outbound> | undefined;
    uploadedFileIds?: Array<string> | undefined;
    fragments?: Array<ChatMessageFragment$Outbound> | undefined;
    ts?: string | undefined;
    messageId?: string | undefined;
    messageTrackingToken?: string | undefined;
    messageType: string;
    hasMoreFragments?: boolean | undefined;
};

/** @internal */
declare const ChatMessage$outboundSchema: z.ZodType<ChatMessage$Outbound, z.ZodTypeDef, ChatMessage>;

/**
 * A message that is rendered as one coherent unit with one given sender.
 */
declare type ChatMessage = {
    /**
     * Describes the agent that executes the request.
     */
    agentConfig?: AgentConfig | undefined;
    author?: Author | undefined;
    /**
     * A list of Citations that were used to generate the response.
     */
    citations?: Array<ChatMessageCitation> | undefined;
    /**
     * IDs of files uploaded in the message that are referenced to generate the answer.
     */
    uploadedFileIds?: Array<string> | undefined;
    /**
     * A list of rich data used to represent the response or formulate a request. These are linearly stitched together to support richer data formats beyond simple text.
     */
    fragments?: Array<ChatMessageFragment> | undefined;
    /**
     * Response timestamp of the message.
     */
    ts?: string | undefined;
    /**
     * A unique server-side generated ID used to identify a message, automatically populated for any USER authored messages.
     */
    messageId?: string | undefined;
    /**
     * Opaque tracking token generated server-side.
     */
    messageTrackingToken?: string | undefined;
    /**
     * Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
     */
    messageType?: MessageType | undefined;
    /**
     * Signals there are additional response fragments incoming.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    hasMoreFragments?: boolean | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatMessageCitation$ {
    /** @deprecated use `ChatMessageCitation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatMessageCitation, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatMessageCitation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatMessageCitation$Outbound, z.ZodTypeDef, ChatMessageCitation>;
    /** @deprecated use `ChatMessageCitation$Outbound` instead. */
    type Outbound = ChatMessageCitation$Outbound;
}

/** @internal */
declare const ChatMessageCitation$inboundSchema: z.ZodType<ChatMessageCitation, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatMessageCitation$Outbound = {
    trackingToken?: string | undefined;
    sourceDocument?: Document$Outbound | undefined;
    sourceFile?: ChatFile$Outbound | undefined;
    sourcePerson?: Person$Outbound | undefined;
    referenceRanges?: Array<ReferenceRange$Outbound> | undefined;
};

/** @internal */
declare const ChatMessageCitation$outboundSchema: z.ZodType<ChatMessageCitation$Outbound, z.ZodTypeDef, ChatMessageCitation>;

/**
 * Information about the source for a ChatMessage.
 */
declare type ChatMessageCitation = {
    /**
     * An opaque token that represents this particular result in this particular ChatMessage. To be used for /feedback reporting.
     */
    trackingToken?: string | undefined;
    sourceDocument?: Document_2 | undefined;
    /**
     * Structure for file uploaded by a user for Chat.
     */
    sourceFile?: ChatFile | undefined;
    sourcePerson?: Person | undefined;
    /**
     * Each reference range and its corresponding snippets
     */
    referenceRanges?: Array<ReferenceRange> | undefined;
};

declare function chatMessageCitationFromJSON(jsonString: string): Result<ChatMessageCitation, SDKValidationError>;

declare function chatMessageCitationToJSON(chatMessageCitation: ChatMessageCitation): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatMessageFragment$ {
    /** @deprecated use `ChatMessageFragment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatMessageFragment, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatMessageFragment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatMessageFragment$Outbound, z.ZodTypeDef, ChatMessageFragment>;
    /** @deprecated use `ChatMessageFragment$Outbound` instead. */
    type Outbound = ChatMessageFragment$Outbound;
}

/** @internal */
declare const ChatMessageFragment$inboundSchema: z.ZodType<ChatMessageFragment, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatMessageFragment$Outbound = {
    structuredResults?: Array<StructuredResult$Outbound> | undefined;
    trackingToken?: string | undefined;
    text?: string | undefined;
    querySuggestion?: QuerySuggestion$Outbound | undefined;
    file?: ChatFile$Outbound | undefined;
    action?: ToolInfo$Outbound | undefined;
    citation?: ChatMessageCitation$Outbound | undefined;
};

/** @internal */
declare const ChatMessageFragment$outboundSchema: z.ZodType<ChatMessageFragment$Outbound, z.ZodTypeDef, ChatMessageFragment>;

/**
 * Represents a part of a ChatMessage that originates from a single action/tool. It is designed to support rich data formats beyond simple text, allowing for a more dynamic and interactive chat experience. Each fragment can include various types of content, such as text, search queries, action information, and more. Also, each ChatMessageFragment should only have one of structuredResults, querySuggestion, writeAction, followupAction, agentRecommendation or file.
 */
declare type ChatMessageFragment = {
    /**
     * An array of entities in the work graph retrieved via a data request.
     */
    structuredResults?: Array<StructuredResult> | undefined;
    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    trackingToken?: string | undefined;
    text?: string | undefined;
    querySuggestion?: QuerySuggestion | undefined;
    /**
     * Structure for file uploaded by a user for Chat.
     */
    file?: ChatFile | undefined;
    action?: ToolInfo | undefined;
    /**
     * Information about the source for a ChatMessage.
     */
    citation?: ChatMessageCitation | undefined;
};

declare function chatMessageFragmentFromJSON(jsonString: string): Result<ChatMessageFragment, SDKValidationError>;

declare function chatMessageFragmentToJSON(chatMessageFragment: ChatMessageFragment): string;

declare function chatMessageFromJSON(jsonString: string): Result<ChatMessage, SDKValidationError>;

declare function chatMessageToJSON(chatMessage: ChatMessage): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatMetadata$ {
    /** @deprecated use `ChatMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatMetadata$Outbound, z.ZodTypeDef, ChatMetadata>;
    /** @deprecated use `ChatMetadata$Outbound` instead. */
    type Outbound = ChatMetadata$Outbound;
}

/** @internal */
declare const ChatMetadata$inboundSchema: z.ZodType<ChatMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatMetadata$Outbound = {
    id?: string | undefined;
    createTime?: number | undefined;
    createdBy?: Person$Outbound | undefined;
    updateTime?: number | undefined;
    name?: string | undefined;
    applicationId?: string | undefined;
    applicationName?: string | undefined;
    icon?: IconConfig$Outbound | undefined;
};

/** @internal */
declare const ChatMetadata$outboundSchema: z.ZodType<ChatMetadata$Outbound, z.ZodTypeDef, ChatMetadata>;

/**
 * Metadata of a Chat a user had with Glean Assistant. This contains no actual conversational content.
 */
declare type ChatMetadata = {
    /**
     * The opaque id of the Chat.
     */
    id?: string | undefined;
    /**
     * Server Unix timestamp of the creation time (in seconds since epoch UTC).
     */
    createTime?: number | undefined;
    createdBy?: Person | undefined;
    /**
     * Server Unix timestamp of the update time (in seconds since epoch UTC).
     */
    updateTime?: number | undefined;
    /**
     * The name of the Chat.
     */
    name?: string | undefined;
    /**
     * The ID of the AI App that this Chat is associated to.
     */
    applicationId?: string | undefined;
    /**
     * The display name of the AI App that this Chat is associated to.
     */
    applicationName?: string | undefined;
    /**
     * Defines how to render an icon
     */
    icon?: IconConfig | undefined;
};

declare function chatMetadataFromJSON(jsonString: string): Result<ChatMetadata, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatMetadataResult$ {
    /** @deprecated use `ChatMetadataResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatMetadataResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatMetadataResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatMetadataResult$Outbound, z.ZodTypeDef, ChatMetadataResult>;
    /** @deprecated use `ChatMetadataResult$Outbound` instead. */
    type Outbound = ChatMetadataResult$Outbound;
}

/** @internal */
declare const ChatMetadataResult$inboundSchema: z.ZodType<ChatMetadataResult, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatMetadataResult$Outbound = {
    chat?: ChatMetadata$Outbound | undefined;
    trackingToken?: string | undefined;
};

/** @internal */
declare const ChatMetadataResult$outboundSchema: z.ZodType<ChatMetadataResult$Outbound, z.ZodTypeDef, ChatMetadataResult>;

declare type ChatMetadataResult = {
    /**
     * Metadata of a Chat a user had with Glean Assistant. This contains no actual conversational content.
     */
    chat?: ChatMetadata | undefined;
    /**
     * An opaque token that represents this particular Chat. To be used for `/feedback` reporting.
     */
    trackingToken?: string | undefined;
};

declare function chatMetadataResultFromJSON(jsonString: string): Result<ChatMetadataResult, SDKValidationError>;

declare function chatMetadataResultToJSON(chatMetadataResult: ChatMetadataResult): string;

declare function chatMetadataToJSON(chatMetadata: ChatMetadata): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatRequest$ {
    /** @deprecated use `ChatRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatRequest$Outbound, z.ZodTypeDef, ChatRequest>;
    /** @deprecated use `ChatRequest$Outbound` instead. */
    type Outbound = ChatRequest$Outbound;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatRequest$_2 {
    /** @deprecated use `ChatRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatRequest_2, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatRequest$Outbound_2, z.ZodTypeDef, ChatRequest_2>;
    /** @deprecated use `ChatRequest$Outbound` instead. */
    type Outbound = ChatRequest$Outbound_2;
}

/** @internal */
declare const ChatRequest$inboundSchema: z.ZodType<ChatRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare const ChatRequest$inboundSchema_2: z.ZodType<ChatRequest_2, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatRequest$Outbound = {
    saveChat?: boolean | undefined;
    chatId?: string | undefined;
    messages: Array<ChatMessage$Outbound>;
    agentConfig?: AgentConfig$Outbound | undefined;
    inclusions?: ChatRestrictionFilters$Outbound | undefined;
    exclusions?: ChatRestrictionFilters$Outbound | undefined;
    timeoutMillis?: number | undefined;
    sessionInfo?: SessionInfo$Outbound | undefined;
    applicationId?: string | undefined;
    agentId?: string | undefined;
    stream?: boolean | undefined;
};

/** @internal */
declare type ChatRequest$Outbound_2 = {
    timezoneOffset?: number | undefined;
    ChatRequest: components.ChatRequest$Outbound;
};

/** @internal */
declare const ChatRequest$outboundSchema: z.ZodType<ChatRequest$Outbound, z.ZodTypeDef, ChatRequest>;

/** @internal */
declare const ChatRequest$outboundSchema_2: z.ZodType<ChatRequest$Outbound_2, z.ZodTypeDef, ChatRequest_2>;

declare type ChatRequest = {
    /**
     * Save the current interaction as a Chat for the user to access and potentially continue later.
     */
    saveChat?: boolean | undefined;
    /**
     * The id of the Chat that context should be retrieved from and messages added to. An empty id starts a new Chat, and the Chat is saved if saveChat is true.
     */
    chatId?: string | undefined;
    /**
     * A list of chat messages, from most recent to least recent. At least one message must specify a USER author.
     */
    messages: Array<ChatMessage>;
    /**
     * Describes the agent that executes the request.
     */
    agentConfig?: AgentConfig | undefined;
    inclusions?: ChatRestrictionFilters | undefined;
    exclusions?: ChatRestrictionFilters | undefined;
    /**
     * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
     */
    timeoutMillis?: number | undefined;
    sessionInfo?: SessionInfo | undefined;
    /**
     * The ID of the application this request originates from, used to determine the configuration of underlying chat processes. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
     */
    applicationId?: string | undefined;
    /**
     * The ID of the Agent that should process this chat request. Only Agents with trigger set to 'User chat message' are invokable through this API. If not specified, the default chat experience will be used.
     */
    agentId?: string | undefined;
    /**
     * If set, response lines will be streamed one-by-one as they become available. Each will be a ChatResponse, formatted as JSON, and separated by a new line. If false, the entire response will be returned at once. Note that if this is set and the model being used does not support streaming, the model's response will not be streamed, but other messages from the endpoint still will be.
     */
    stream?: boolean | undefined;
};

declare type ChatRequest_2 = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    /**
     * Includes chat history for Glean AI to respond to.
     */
    chatRequest: components.ChatRequest;
};

declare function chatRequestFromJSON(jsonString: string): Result<ChatRequest, SDKValidationError>;

declare function chatRequestFromJSON_2(jsonString: string): Result<ChatRequest_2, SDKValidationError>;

declare function chatRequestToJSON(chatRequest: ChatRequest): string;

declare function chatRequestToJSON_2(chatRequest: ChatRequest_2): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatResponse$ {
    /** @deprecated use `ChatResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatResponse$Outbound, z.ZodTypeDef, ChatResponse>;
    /** @deprecated use `ChatResponse$Outbound` instead. */
    type Outbound = ChatResponse$Outbound;
}

/** @internal */
declare const ChatResponse$inboundSchema: z.ZodType<ChatResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatResponse$Outbound = {
    messages?: Array<ChatMessage$Outbound> | undefined;
    chatId?: string | undefined;
    followUpPrompts?: Array<string> | undefined;
    backendTimeMillis?: number | undefined;
    chatSessionTrackingToken?: string | undefined;
};

/** @internal */
declare const ChatResponse$outboundSchema: z.ZodType<ChatResponse$Outbound, z.ZodTypeDef, ChatResponse>;

/**
 * A single response from the /chat backend.
 */
declare type ChatResponse = {
    messages?: Array<ChatMessage> | undefined;
    /**
     * The id of the associated Chat the messages belong to, if one exists.
     */
    chatId?: string | undefined;
    /**
     * Follow-up prompts for the user to potentially use
     */
    followUpPrompts?: Array<string> | undefined;
    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    backendTimeMillis?: number | undefined;
    /**
     * A token that is used to track the session.
     */
    chatSessionTrackingToken?: string | undefined;
};

declare function chatResponseFromJSON(jsonString: string): Result<ChatResponse, SDKValidationError>;

declare function chatResponseToJSON(chatResponse: ChatResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatRestrictionFilters$ {
    /** @deprecated use `ChatRestrictionFilters$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatRestrictionFilters, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatRestrictionFilters$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatRestrictionFilters$Outbound, z.ZodTypeDef, ChatRestrictionFilters>;
    /** @deprecated use `ChatRestrictionFilters$Outbound` instead. */
    type Outbound = ChatRestrictionFilters$Outbound;
}

/** @internal */
declare const ChatRestrictionFilters$inboundSchema: z.ZodType<ChatRestrictionFilters, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatRestrictionFilters$Outbound = {
    containerSpecs?: Array<DocumentSpecUnion$Outbound> | undefined;
    documentSpecs?: Array<DocumentSpecUnion$Outbound> | undefined;
    datasourceInstances?: Array<string> | undefined;
};

/** @internal */
declare const ChatRestrictionFilters$outboundSchema: z.ZodType<ChatRestrictionFilters$Outbound, z.ZodTypeDef, ChatRestrictionFilters>;

declare type ChatRestrictionFilters = {
    /**
     * Specifications for containers that should be used as part of the restriction (include/exclude). Memberships are recursively defined for a subset of datasources (currently: SharePoint, OneDrive, Google Drive, and Confluence). Please contact the Glean team to enable this for more datasources. Recursive memberships do not apply for Collections.
     */
    containerSpecs?: Array<DocumentSpecUnion> | undefined;
    documentSpecs?: Array<DocumentSpecUnion> | undefined;
    datasourceInstances?: Array<string> | undefined;
};

declare function chatRestrictionFiltersFromJSON(jsonString: string): Result<ChatRestrictionFilters, SDKValidationError>;

declare function chatRestrictionFiltersToJSON(chatRestrictionFilters: ChatRestrictionFilters): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatResult$ {
    /** @deprecated use `ChatResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatResult$Outbound, z.ZodTypeDef, ChatResult>;
    /** @deprecated use `ChatResult$Outbound` instead. */
    type Outbound = ChatResult$Outbound;
}

/** @internal */
declare const ChatResult$inboundSchema: z.ZodType<ChatResult, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatResult$Outbound = {
    chat?: Chat$Outbound | undefined;
    trackingToken?: string | undefined;
};

/** @internal */
declare const ChatResult$outboundSchema: z.ZodType<ChatResult$Outbound, z.ZodTypeDef, ChatResult>;

declare type ChatResult = {
    /**
     * A historical representation of a series of chat messages a user had with Glean Assistant.
     */
    chat?: Chat | undefined;
    /**
     * An opaque token that represents this particular Chat. To be used for `/feedback` reporting.
     */
    trackingToken?: string | undefined;
};

declare function chatResultFromJSON(jsonString: string): Result<ChatResult, SDKValidationError>;

declare function chatResultToJSON(chatResult: ChatResult): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatStreamRequest$ {
    /** @deprecated use `ChatStreamRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatStreamRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatStreamRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatStreamRequest$Outbound, z.ZodTypeDef, ChatStreamRequest>;
    /** @deprecated use `ChatStreamRequest$Outbound` instead. */
    type Outbound = ChatStreamRequest$Outbound;
}

/** @internal */
declare const ChatStreamRequest$inboundSchema: z.ZodType<ChatStreamRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatStreamRequest$Outbound = {
    timezoneOffset?: number | undefined;
    ChatRequest: components.ChatRequest$Outbound;
};

/** @internal */
declare const ChatStreamRequest$outboundSchema: z.ZodType<ChatStreamRequest$Outbound, z.ZodTypeDef, ChatStreamRequest>;

declare type ChatStreamRequest = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    /**
     * Includes chat history for Glean AI to respond to.
     */
    chatRequest: components.ChatRequest;
};

declare function chatStreamRequestFromJSON(jsonString: string): Result<ChatStreamRequest, SDKValidationError>;

declare function chatStreamRequestToJSON(chatStreamRequest: ChatStreamRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatSuggestion$ {
    /** @deprecated use `ChatSuggestion$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatSuggestion, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatSuggestion$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatSuggestion$Outbound, z.ZodTypeDef, ChatSuggestion>;
    /** @deprecated use `ChatSuggestion$Outbound` instead. */
    type Outbound = ChatSuggestion$Outbound;
}

/** @internal */
declare const ChatSuggestion$inboundSchema: z.ZodType<ChatSuggestion, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatSuggestion$Outbound = {
    query?: string | undefined;
    feature?: string | undefined;
};

/** @internal */
declare const ChatSuggestion$outboundSchema: z.ZodType<ChatSuggestion$Outbound, z.ZodTypeDef, ChatSuggestion>;

declare type ChatSuggestion = {
    /**
     * The actionable chat query to run when the user selects this suggestion.
     */
    query?: string | undefined;
    /**
     * Targeted Glean Chat feature for the suggestion.
     */
    feature?: string | undefined;
};

declare function chatSuggestionFromJSON(jsonString: string): Result<ChatSuggestion, SDKValidationError>;

declare function chatSuggestionToJSON(chatSuggestion: ChatSuggestion): string;

declare function chatToJSON(chat: Chat): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ChatZeroStateSuggestionOptions$ {
    /** @deprecated use `ChatZeroStateSuggestionOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ChatZeroStateSuggestionOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `ChatZeroStateSuggestionOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ChatZeroStateSuggestionOptions$Outbound, z.ZodTypeDef, ChatZeroStateSuggestionOptions>;
    /** @deprecated use `ChatZeroStateSuggestionOptions$Outbound` instead. */
    type Outbound = ChatZeroStateSuggestionOptions$Outbound;
}

/** @internal */
declare const ChatZeroStateSuggestionOptions$inboundSchema: z.ZodType<ChatZeroStateSuggestionOptions, z.ZodTypeDef, unknown>;

/** @internal */
declare type ChatZeroStateSuggestionOptions$Outbound = {
    applicationId?: string | undefined;
};

/** @internal */
declare const ChatZeroStateSuggestionOptions$outboundSchema: z.ZodType<ChatZeroStateSuggestionOptions$Outbound, z.ZodTypeDef, ChatZeroStateSuggestionOptions>;

declare type ChatZeroStateSuggestionOptions = {
    /**
     * The Chat Application ID this feed request should be scoped to. Empty means there is no Chat Application ID..
     */
    applicationId?: string | undefined;
};

declare function chatZeroStateSuggestionOptionsFromJSON(jsonString: string): Result<ChatZeroStateSuggestionOptions, SDKValidationError>;

declare function chatZeroStateSuggestionOptionsToJSON(chatZeroStateSuggestionOptions: ChatZeroStateSuggestionOptions): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CheckDocumentAccessRequest$ {
    /** @deprecated use `CheckDocumentAccessRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckDocumentAccessRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckDocumentAccessRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckDocumentAccessRequest$Outbound, z.ZodTypeDef, CheckDocumentAccessRequest>;
    /** @deprecated use `CheckDocumentAccessRequest$Outbound` instead. */
    type Outbound = CheckDocumentAccessRequest$Outbound;
}

/** @internal */
declare const CheckDocumentAccessRequest$inboundSchema: z.ZodType<CheckDocumentAccessRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type CheckDocumentAccessRequest$Outbound = {
    datasource: string;
    objectType: string;
    docId: string;
    userEmail: string;
};

/** @internal */
declare const CheckDocumentAccessRequest$outboundSchema: z.ZodType<CheckDocumentAccessRequest$Outbound, z.ZodTypeDef, CheckDocumentAccessRequest>;

/**
 * Describes the request body of the /checkdocumentaccess API call
 */
declare type CheckDocumentAccessRequest = {
    /**
     * Datasource of document to check access for.
     */
    datasource: string;
    /**
     * Object type of document to check access for.
     */
    objectType: string;
    /**
     * Glean Document ID to check access for.
     */
    docId: string;
    /**
     * Email of user to check access for.
     */
    userEmail: string;
};

declare function checkDocumentAccessRequestFromJSON(jsonString: string): Result<CheckDocumentAccessRequest, SDKValidationError>;

declare function checkDocumentAccessRequestToJSON(checkDocumentAccessRequest: CheckDocumentAccessRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CheckDocumentAccessResponse$ {
    /** @deprecated use `CheckDocumentAccessResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckDocumentAccessResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckDocumentAccessResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckDocumentAccessResponse$Outbound, z.ZodTypeDef, CheckDocumentAccessResponse>;
    /** @deprecated use `CheckDocumentAccessResponse$Outbound` instead. */
    type Outbound = CheckDocumentAccessResponse$Outbound;
}

/** @internal */
declare const CheckDocumentAccessResponse$inboundSchema: z.ZodType<CheckDocumentAccessResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type CheckDocumentAccessResponse$Outbound = {
    hasAccess?: boolean | undefined;
};

/** @internal */
declare const CheckDocumentAccessResponse$outboundSchema: z.ZodType<CheckDocumentAccessResponse$Outbound, z.ZodTypeDef, CheckDocumentAccessResponse>;

/**
 * Describes the response body of the /checkdocumentaccess API call
 */
declare type CheckDocumentAccessResponse = {
    /**
     * If true, user has access to document for search
     */
    hasAccess?: boolean | undefined;
};

declare function checkDocumentAccessResponseFromJSON(jsonString: string): Result<CheckDocumentAccessResponse, SDKValidationError>;

declare function checkDocumentAccessResponseToJSON(checkDocumentAccessResponse: CheckDocumentAccessResponse): string;

declare class Client extends ClientSDK {
    private _activity?;
    get activity(): Activity;
    private _announcements?;
    get announcements(): Announcements;
    private _answers?;
    get answers(): Answers;
    private _authentication?;
    get authentication(): ClientAuthentication;
    private _chat?;
    get chat(): Chat_2;
    private _agents?;
    get agents(): Agents;
    private _collections?;
    get collections(): Collections;
    private _documents?;
    get documents(): ClientDocuments;
    private _insights?;
    get insights(): Insights;
    private _messages?;
    get messages(): Messages;
    private _pins?;
    get pins(): Pins;
    private _search?;
    get search(): Search;
    private _entities?;
    get entities(): Entities;
    private _shortcuts?;
    get shortcuts(): ClientShortcuts;
    private _verification?;
    get verification(): Verification_2;
    private _tools?;
    get tools(): Tools;
    private _governance?;
    get governance(): Governance;
}

declare class ClientAuthentication extends ClientSDK {
    /**
     * Create authentication token
     *
     * @remarks
     * Creates an authentication token for the authenticated user. These are
     * specifically intended to be used with the [Web SDK](https://developers.glean.com/web).
     *
     * Note: The tokens generated from this endpoint are **not** valid tokens
     * for use with the Client API (e.g. `/rest/api/v1/*`).
     */
    createToken(options?: RequestOptions): Promise<components.CreateAuthTokenResponse>;
}

declare class ClientDocuments extends ClientSDK {
    /**
     * Read document permissions
     *
     * @remarks
     * Read the emails of all users who have access to the given document.
     */
    retrievePermissions(request: components.GetDocPermissionsRequest, options?: RequestOptions): Promise<components.GetDocPermissionsResponse>;
    /**
     * Read documents
     *
     * @remarks
     * Read the documents including metadata (does not include enhanced metadata via `/documentmetadata`) for the given list of Glean Document IDs or URLs specified in the request.
     */
    retrieve(request?: components.GetDocumentsRequest | undefined, options?: RequestOptions): Promise<components.GetDocumentsResponse>;
    /**
     * Read documents by facets
     *
     * @remarks
     * Read the documents including metadata (does not include enhanced metadata via `/documentmetadata`) macthing the given facet conditions.
     */
    retrieveByFacets(request?: components.GetDocumentsByFacetsRequest | undefined, options?: RequestOptions): Promise<components.GetDocumentsByFacetsResponse>;
    /**
     * Summarize documents
     *
     * @remarks
     * Generate an AI summary of the requested documents.
     */
    summarize(request: components.SummarizeRequest, options?: RequestOptions): Promise<components.SummarizeResponse>;
}

declare class ClientSDK {
    #private;
    readonly _baseURL: URL | null;
    readonly _options: SDKOptions & {
        hooks?: SDKHooks;
    };
    constructor(options?: SDKOptions);
    _createRequest(context: HookContext, conf: RequestConfig, options?: RequestOptions): Result<Request, InvalidRequestError | UnexpectedClientError>;
    _do(request: Request, options: {
        context: HookContext;
        errorCodes: number | string | (number | string)[];
        retryConfig: RetryConfig;
        retryCodes: string[];
    }): Promise<Result<Response, RequestAbortedError | RequestTimeoutError | ConnectionError | UnexpectedClientError>>;
}

declare class ClientShortcuts extends ClientSDK {
    /**
     * Create shortcut
     *
     * @remarks
     * Create a user-generated shortcut that contains an alias and destination URL.
     */
    create(request: components.CreateShortcutRequest, options?: RequestOptions): Promise<components.CreateShortcutResponse>;
    /**
     * Delete shortcut
     *
     * @remarks
     * Delete an existing user-generated shortcut.
     */
    delete(request: components.DeleteShortcutRequest, options?: RequestOptions): Promise<void>;
    /**
     * Read shortcut
     *
     * @remarks
     * Read a particular shortcut's details given its ID.
     */
    retrieve(request: components.GetShortcutRequestUnion, options?: RequestOptions): Promise<components.GetShortcutResponse>;
    /**
     * List shortcuts
     *
     * @remarks
     * List shortcuts editable/owned by the currently authenticated user.
     */
    list(request: components.ListShortcutsPaginatedRequest, options?: RequestOptions): Promise<components.ListShortcutsPaginatedResponse>;
    /**
     * Update shortcut
     *
     * @remarks
     * Updates the shortcut with the given ID.
     */
    update(request: components.UpdateShortcutRequest, options?: RequestOptions): Promise<components.UpdateShortcutResponse>;
}

declare type ClosedEnum<T> = T[keyof T];

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ClusterGroup$ {
    /** @deprecated use `ClusterGroup$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ClusterGroup, z.ZodTypeDef, unknown>;
    /** @deprecated use `ClusterGroup$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ClusterGroup$Outbound, z.ZodTypeDef, ClusterGroup>;
    /** @deprecated use `ClusterGroup$Outbound` instead. */
    type Outbound = ClusterGroup$Outbound;
}

/** @internal */
declare const ClusterGroup$inboundSchema: z.ZodType<ClusterGroup, z.ZodTypeDef, unknown>;

/** @internal */
declare type ClusterGroup$Outbound = {
    clusteredResults?: Array<SearchResult$Outbound> | undefined;
    clusterType?: string | undefined;
    visibleCountHint: number;
};

/** @internal */
declare const ClusterGroup$outboundSchema: z.ZodType<ClusterGroup$Outbound, z.ZodTypeDef, ClusterGroup>;

declare type ClusterGroup = {
    /**
     * A list of results that should be displayed as associated with this result.
     */
    clusteredResults?: Array<SearchResult> | undefined;
    /**
     * The reason for inclusion of clusteredResults.
     */
    clusterType?: ClusterTypeEnum | undefined;
    /**
     * The default number of results to display before truncating and showing a "see more" link
     */
    visibleCountHint: number;
};

declare function clusterGroupFromJSON(jsonString: string): Result<ClusterGroup, SDKValidationError>;

declare function clusterGroupToJSON(clusterGroup: ClusterGroup): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ClusterTypeEnum$ {
    /** @deprecated use `ClusterTypeEnum$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Similar: "SIMILAR";
        readonly Freshness: "FRESHNESS";
        readonly Title: "TITLE";
        readonly Content: "CONTENT";
        readonly None: "NONE";
        readonly ThreadReply: "THREAD_REPLY";
        readonly ThreadRoot: "THREAD_ROOT";
        readonly Prefix: "PREFIX";
        readonly Suffix: "SUFFIX";
        readonly AuthorPrefix: "AUTHOR_PREFIX";
        readonly AuthorSuffix: "AUTHOR_SUFFIX";
    }>;
    /** @deprecated use `ClusterTypeEnum$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Similar: "SIMILAR";
        readonly Freshness: "FRESHNESS";
        readonly Title: "TITLE";
        readonly Content: "CONTENT";
        readonly None: "NONE";
        readonly ThreadReply: "THREAD_REPLY";
        readonly ThreadRoot: "THREAD_ROOT";
        readonly Prefix: "PREFIX";
        readonly Suffix: "SUFFIX";
        readonly AuthorPrefix: "AUTHOR_PREFIX";
        readonly AuthorSuffix: "AUTHOR_SUFFIX";
    }>;
}

/** @internal */
declare const ClusterTypeEnum$inboundSchema: z.ZodNativeEnum<typeof ClusterTypeEnum>;

/** @internal */
declare const ClusterTypeEnum$outboundSchema: z.ZodNativeEnum<typeof ClusterTypeEnum>;

/**
 * The reason for inclusion of clusteredResults.
 */
declare const ClusterTypeEnum: {
    readonly Similar: "SIMILAR";
    readonly Freshness: "FRESHNESS";
    readonly Title: "TITLE";
    readonly Content: "CONTENT";
    readonly None: "NONE";
    readonly ThreadReply: "THREAD_REPLY";
    readonly ThreadRoot: "THREAD_ROOT";
    readonly Prefix: "PREFIX";
    readonly Suffix: "SUFFIX";
    readonly AuthorPrefix: "AUTHOR_PREFIX";
    readonly AuthorSuffix: "AUTHOR_SUFFIX";
};

/**
 * The reason for inclusion of clusteredResults.
 */
declare type ClusterTypeEnum = ClosedEnum<typeof ClusterTypeEnum>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Code$ {
    /** @deprecated use `Code$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Code, z.ZodTypeDef, unknown>;
    /** @deprecated use `Code$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Code$Outbound, z.ZodTypeDef, Code>;
    /** @deprecated use `Code$Outbound` instead. */
    type Outbound = Code$Outbound;
}

/** @internal */
declare const Code$inboundSchema: z.ZodType<Code, z.ZodTypeDef, unknown>;

/** @internal */
declare type Code$Outbound = {
    repoName?: string | undefined;
    fileName?: string | undefined;
    fileUrl?: string | undefined;
    lines?: Array<CodeLine$Outbound> | undefined;
    isLastMatch?: boolean | undefined;
};

/** @internal */
declare const Code$outboundSchema: z.ZodType<Code$Outbound, z.ZodTypeDef, Code>;

declare type Code = {
    repoName?: string | undefined;
    fileName?: string | undefined;
    fileUrl?: string | undefined;
    lines?: Array<CodeLine> | undefined;
    /**
     * Last file match for a repo
     */
    isLastMatch?: boolean | undefined;
};

declare function codeFromJSON(jsonString: string): Result<Code, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CodeLine$ {
    /** @deprecated use `CodeLine$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CodeLine, z.ZodTypeDef, unknown>;
    /** @deprecated use `CodeLine$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CodeLine$Outbound, z.ZodTypeDef, CodeLine>;
    /** @deprecated use `CodeLine$Outbound` instead. */
    type Outbound = CodeLine$Outbound;
}

/** @internal */
declare const CodeLine$inboundSchema: z.ZodType<CodeLine, z.ZodTypeDef, unknown>;

/** @internal */
declare type CodeLine$Outbound = {
    lineNumber?: number | undefined;
    content?: string | undefined;
    ranges?: Array<TextRange$Outbound> | undefined;
};

/** @internal */
declare const CodeLine$outboundSchema: z.ZodType<CodeLine$Outbound, z.ZodTypeDef, CodeLine>;

declare type CodeLine = {
    lineNumber?: number | undefined;
    content?: string | undefined;
    /**
     * Index ranges depicting matched sections of the line
     */
    ranges?: Array<TextRange> | undefined;
};

declare function codeLineFromJSON(jsonString: string): Result<CodeLine, SDKValidationError>;

declare function codeLineToJSON(codeLine: CodeLine): string;

declare function codeToJSON(code: Code): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Collection$ {
    /** @deprecated use `Collection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Collection, z.ZodTypeDef, unknown>;
    /** @deprecated use `Collection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Collection$Outbound, z.ZodTypeDef, Collection>;
    /** @deprecated use `Collection$Outbound` instead. */
    type Outbound = Collection$Outbound;
}

/** @internal */
declare const Collection$inboundSchema: z.ZodType<Collection, z.ZodTypeDef, unknown>;

/** @internal */
declare type Collection$Outbound = {
    name: string;
    description: string;
    addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    icon?: string | undefined;
    adminLocked?: boolean | undefined;
    parentId?: number | undefined;
    thumbnail?: Thumbnail$Outbound | undefined;
    allowedDatasource?: string | undefined;
    permissions?: ObjectPermissions$Outbound | undefined;
    id: number;
    createTime?: string | undefined;
    updateTime?: string | undefined;
    creator?: Person$Outbound | undefined;
    updatedBy?: Person$Outbound | undefined;
    itemCount?: number | undefined;
    childCount?: number | undefined;
    items?: Array<CollectionItem$Outbound> | undefined;
    pinMetadata?: CollectionPinnedMetadata$Outbound | undefined;
    shortcuts?: Array<string> | undefined;
    children?: Array<Collection$Outbound> | undefined;
    roles?: Array<UserRoleSpecification$Outbound> | undefined;
};

/** @internal */
declare const Collection$outboundSchema: z.ZodType<Collection$Outbound, z.ZodTypeDef, Collection>;

declare type Collection = {
    /**
     * The unique name of the Collection.
     */
    name: string;
    /**
     * A brief summary of the Collection's contents.
     */
    description: string;
    /**
     * A list of added user roles for the Collection.
     */
    addedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of removed user roles for the Collection.
     */
    removedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * The emoji icon of this Collection.
     */
    icon?: string | undefined;
    /**
     * Indicates whether edits are allowed for everyone or only admins.
     */
    adminLocked?: boolean | undefined;
    /**
     * The parent of this Collection, or 0 if it's a top-level Collection.
     */
    parentId?: number | undefined;
    thumbnail?: Thumbnail | undefined;
    /**
     * The datasource type this Collection can hold.
     */
    allowedDatasource?: string | undefined;
    permissions?: ObjectPermissions | undefined;
    /**
     * The unique ID of the Collection.
     */
    id: number;
    createTime?: Date | undefined;
    updateTime?: Date | undefined;
    creator?: Person | undefined;
    updatedBy?: Person | undefined;
    /**
     * The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
     */
    itemCount?: number | undefined;
    /**
     * The number of children Collections. Separated from the actual children so we can grab the count without children.
     */
    childCount?: number | undefined;
    /**
     * The items in this Collection.
     */
    items?: Array<CollectionItem> | undefined;
    pinMetadata?: CollectionPinnedMetadata | undefined;
    /**
     * The names of the shortcuts (Go Links) that point to this Collection.
     */
    shortcuts?: Array<string> | undefined;
    /**
     * The children Collections of this Collection.
     */
    children?: Array<Collection> | undefined;
    /**
     * A list of user roles for the Collection.
     */
    roles?: Array<UserRoleSpecification> | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CollectionError$ {
    /** @deprecated use `CollectionError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CollectionError, z.ZodTypeDef, unknown>;
    /** @deprecated use `CollectionError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CollectionError$Outbound, z.ZodTypeDef, CollectionError>;
    /** @deprecated use `CollectionError$Outbound` instead. */
    type Outbound = CollectionError$Outbound;
}

/** @internal */
declare const CollectionError$inboundSchema: z.ZodType<CollectionError, z.ZodTypeDef, unknown>;

/** @internal */
declare type CollectionError$Outbound = {
    errorCode: string;
};

/** @internal */
declare const CollectionError$outboundSchema: z.ZodType<CollectionError$Outbound, z.ZodTypeDef, CollectionError>;

declare type CollectionError = {
    errorCode: CollectionErrorErrorCode;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CollectionErrorErrorCode$ {
    /** @deprecated use `CollectionErrorErrorCode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly NameExists: "NAME_EXISTS";
        readonly NotFound: "NOT_FOUND";
        readonly CollectionPinned: "COLLECTION_PINNED";
        readonly ConcurrentHierarchyEdit: "CONCURRENT_HIERARCHY_EDIT";
        readonly HeightViolation: "HEIGHT_VIOLATION";
        readonly WidthViolation: "WIDTH_VIOLATION";
        readonly NoPermissions: "NO_PERMISSIONS";
    }>;
    /** @deprecated use `CollectionErrorErrorCode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly NameExists: "NAME_EXISTS";
        readonly NotFound: "NOT_FOUND";
        readonly CollectionPinned: "COLLECTION_PINNED";
        readonly ConcurrentHierarchyEdit: "CONCURRENT_HIERARCHY_EDIT";
        readonly HeightViolation: "HEIGHT_VIOLATION";
        readonly WidthViolation: "WIDTH_VIOLATION";
        readonly NoPermissions: "NO_PERMISSIONS";
    }>;
}

/** @internal */
declare const CollectionErrorErrorCode$inboundSchema: z.ZodNativeEnum<typeof CollectionErrorErrorCode>;

/** @internal */
declare const CollectionErrorErrorCode$outboundSchema: z.ZodNativeEnum<typeof CollectionErrorErrorCode>;

declare const CollectionErrorErrorCode: {
    readonly NameExists: "NAME_EXISTS";
    readonly NotFound: "NOT_FOUND";
    readonly CollectionPinned: "COLLECTION_PINNED";
    readonly ConcurrentHierarchyEdit: "CONCURRENT_HIERARCHY_EDIT";
    readonly HeightViolation: "HEIGHT_VIOLATION";
    readonly WidthViolation: "WIDTH_VIOLATION";
    readonly NoPermissions: "NO_PERMISSIONS";
};

declare type CollectionErrorErrorCode = ClosedEnum<typeof CollectionErrorErrorCode>;

declare function collectionErrorFromJSON(jsonString: string): Result<CollectionError, SDKValidationError>;

declare function collectionErrorToJSON(collectionError: CollectionError): string;

declare function collectionFromJSON(jsonString: string): Result<Collection, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CollectionItem$ {
    /** @deprecated use `CollectionItem$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CollectionItem, z.ZodTypeDef, unknown>;
    /** @deprecated use `CollectionItem$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CollectionItem$Outbound, z.ZodTypeDef, CollectionItem>;
    /** @deprecated use `CollectionItem$Outbound` instead. */
    type Outbound = CollectionItem$Outbound;
}

/** @internal */
declare const CollectionItem$inboundSchema: z.ZodType<CollectionItem, z.ZodTypeDef, unknown>;

/** @internal */
declare type CollectionItem$Outbound = {
    name?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;
    collectionId: number;
    documentId?: string | undefined;
    url?: string | undefined;
    itemId?: string | undefined;
    createdBy?: Person$Outbound | undefined;
    createdAt?: string | undefined;
    document?: Document$Outbound | undefined;
    shortcut?: Shortcut$Outbound | undefined;
    collection?: Collection$Outbound | undefined;
    itemType: string;
};

/** @internal */
declare const CollectionItem$outboundSchema: z.ZodType<CollectionItem$Outbound, z.ZodTypeDef, CollectionItem>;

declare type CollectionItem = {
    /**
     * The optional name of the Collection item.
     */
    name?: string | undefined;
    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    description?: string | undefined;
    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    icon?: string | undefined;
    /**
     * The Collection ID of the Collection that this CollectionItem belongs in.
     */
    collectionId: number;
    /**
     * If this CollectionItem is indexed, the Glean Document ID of that document.
     */
    documentId?: string | undefined;
    /**
     * The URL of this CollectionItem.
     */
    url?: string | undefined;
    /**
     * Unique identifier for the item within the Collection it belongs to.
     */
    itemId?: string | undefined;
    createdBy?: Person | undefined;
    /**
     * Unix timestamp for when the item was first added (in seconds since epoch UTC).
     */
    createdAt?: Date | undefined;
    document?: Document_2 | undefined;
    shortcut?: Shortcut | undefined;
    collection?: Collection | undefined;
    itemType: CollectionItemItemType;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CollectionItemDescriptor$ {
    /** @deprecated use `CollectionItemDescriptor$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CollectionItemDescriptor, z.ZodTypeDef, unknown>;
    /** @deprecated use `CollectionItemDescriptor$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CollectionItemDescriptor$Outbound, z.ZodTypeDef, CollectionItemDescriptor>;
    /** @deprecated use `CollectionItemDescriptor$Outbound` instead. */
    type Outbound = CollectionItemDescriptor$Outbound;
}

/** @internal */
declare const CollectionItemDescriptor$inboundSchema: z.ZodType<CollectionItemDescriptor, z.ZodTypeDef, unknown>;

/** @internal */
declare type CollectionItemDescriptor$Outbound = {
    name?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;
    url?: string | undefined;
    documentId?: string | undefined;
    newNextItemId?: string | undefined;
    itemType?: string | undefined;
};

/** @internal */
declare const CollectionItemDescriptor$outboundSchema: z.ZodType<CollectionItemDescriptor$Outbound, z.ZodTypeDef, CollectionItemDescriptor>;

declare type CollectionItemDescriptor = {
    /**
     * The optional name of the Collection item.
     */
    name?: string | undefined;
    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    description?: string | undefined;
    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    icon?: string | undefined;
    /**
     * The URL of the item being added.
     */
    url?: string | undefined;
    /**
     * The Glean Document ID of the item being added if it's an indexed document.
     */
    documentId?: string | undefined;
    /**
     * The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection
     */
    newNextItemId?: string | undefined;
    itemType?: CollectionItemDescriptorItemType | undefined;
};

declare function collectionItemDescriptorFromJSON(jsonString: string): Result<CollectionItemDescriptor, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CollectionItemDescriptorItemType$ {
    /** @deprecated use `CollectionItemDescriptorItemType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Document: "DOCUMENT";
        readonly Text: "TEXT";
        readonly Url: "URL";
    }>;
    /** @deprecated use `CollectionItemDescriptorItemType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Document: "DOCUMENT";
        readonly Text: "TEXT";
        readonly Url: "URL";
    }>;
}

/** @internal */
declare const CollectionItemDescriptorItemType$inboundSchema: z.ZodNativeEnum<typeof CollectionItemDescriptorItemType>;

/** @internal */
declare const CollectionItemDescriptorItemType$outboundSchema: z.ZodNativeEnum<typeof CollectionItemDescriptorItemType>;

declare const CollectionItemDescriptorItemType: {
    readonly Document: "DOCUMENT";
    readonly Text: "TEXT";
    readonly Url: "URL";
};

declare type CollectionItemDescriptorItemType = ClosedEnum<typeof CollectionItemDescriptorItemType>;

declare function collectionItemDescriptorToJSON(collectionItemDescriptor: CollectionItemDescriptor): string;

declare function collectionItemFromJSON(jsonString: string): Result<CollectionItem, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CollectionItemItemType$ {
    /** @deprecated use `CollectionItemItemType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Document: "DOCUMENT";
        readonly Text: "TEXT";
        readonly Url: "URL";
        readonly Collection: "COLLECTION";
    }>;
    /** @deprecated use `CollectionItemItemType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Document: "DOCUMENT";
        readonly Text: "TEXT";
        readonly Url: "URL";
        readonly Collection: "COLLECTION";
    }>;
}

/** @internal */
declare const CollectionItemItemType$inboundSchema: z.ZodNativeEnum<typeof CollectionItemItemType>;

/** @internal */
declare const CollectionItemItemType$outboundSchema: z.ZodNativeEnum<typeof CollectionItemItemType>;

declare const CollectionItemItemType: {
    readonly Document: "DOCUMENT";
    readonly Text: "TEXT";
    readonly Url: "URL";
    readonly Collection: "COLLECTION";
};

declare type CollectionItemItemType = ClosedEnum<typeof CollectionItemItemType>;

declare function collectionItemToJSON(collectionItem: CollectionItem): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CollectionPinMetadata$ {
    /** @deprecated use `CollectionPinMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CollectionPinMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CollectionPinMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CollectionPinMetadata$Outbound, z.ZodTypeDef, CollectionPinMetadata>;
    /** @deprecated use `CollectionPinMetadata$Outbound` instead. */
    type Outbound = CollectionPinMetadata$Outbound;
}

/** @internal */
declare const CollectionPinMetadata$inboundSchema: z.ZodType<CollectionPinMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type CollectionPinMetadata$Outbound = {
    id: number;
    target: CollectionPinTarget$Outbound;
};

/** @internal */
declare const CollectionPinMetadata$outboundSchema: z.ZodType<CollectionPinMetadata$Outbound, z.ZodTypeDef, CollectionPinMetadata>;

declare type CollectionPinMetadata = {
    /**
     * The ID of the Collection.
     */
    id: number;
    target: CollectionPinTarget;
};

declare function collectionPinMetadataFromJSON(jsonString: string): Result<CollectionPinMetadata, SDKValidationError>;

declare function collectionPinMetadataToJSON(collectionPinMetadata: CollectionPinMetadata): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CollectionPinnableCategories$ {
    /** @deprecated use `CollectionPinnableCategories$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly CompanyResource: "COMPANY_RESOURCE";
        readonly DepartmentResource: "DEPARTMENT_RESOURCE";
        readonly TeamResource: "TEAM_RESOURCE";
    }>;
    /** @deprecated use `CollectionPinnableCategories$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly CompanyResource: "COMPANY_RESOURCE";
        readonly DepartmentResource: "DEPARTMENT_RESOURCE";
        readonly TeamResource: "TEAM_RESOURCE";
    }>;
}

/** @internal */
declare const CollectionPinnableCategories$inboundSchema: z.ZodNativeEnum<typeof CollectionPinnableCategories>;

/** @internal */
declare const CollectionPinnableCategories$outboundSchema: z.ZodNativeEnum<typeof CollectionPinnableCategories>;

/**
 * Categories a Collection can be pinned to.
 */
declare const CollectionPinnableCategories: {
    readonly CompanyResource: "COMPANY_RESOURCE";
    readonly DepartmentResource: "DEPARTMENT_RESOURCE";
    readonly TeamResource: "TEAM_RESOURCE";
};

/**
 * Categories a Collection can be pinned to.
 */
declare type CollectionPinnableCategories = ClosedEnum<typeof CollectionPinnableCategories>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CollectionPinnableTargets$ {
    /** @deprecated use `CollectionPinnableTargets$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ResourceCard: "RESOURCE_CARD";
        readonly TeamProfilePage: "TEAM_PROFILE_PAGE";
    }>;
    /** @deprecated use `CollectionPinnableTargets$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ResourceCard: "RESOURCE_CARD";
        readonly TeamProfilePage: "TEAM_PROFILE_PAGE";
    }>;
}

/** @internal */
declare const CollectionPinnableTargets$inboundSchema: z.ZodNativeEnum<typeof CollectionPinnableTargets>;

/** @internal */
declare const CollectionPinnableTargets$outboundSchema: z.ZodNativeEnum<typeof CollectionPinnableTargets>;

/**
 * What targets can a Collection be pinned to.
 */
declare const CollectionPinnableTargets: {
    readonly ResourceCard: "RESOURCE_CARD";
    readonly TeamProfilePage: "TEAM_PROFILE_PAGE";
};

/**
 * What targets can a Collection be pinned to.
 */
declare type CollectionPinnableTargets = ClosedEnum<typeof CollectionPinnableTargets>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CollectionPinnedMetadata$ {
    /** @deprecated use `CollectionPinnedMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CollectionPinnedMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CollectionPinnedMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CollectionPinnedMetadata$Outbound, z.ZodTypeDef, CollectionPinnedMetadata>;
    /** @deprecated use `CollectionPinnedMetadata$Outbound` instead. */
    type Outbound = CollectionPinnedMetadata$Outbound;
}

/** @internal */
declare const CollectionPinnedMetadata$inboundSchema: z.ZodType<CollectionPinnedMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type CollectionPinnedMetadata$Outbound = {
    existingPins?: Array<CollectionPinTarget$Outbound> | undefined;
    eligiblePins?: Array<CollectionPinMetadata$Outbound> | undefined;
};

/** @internal */
declare const CollectionPinnedMetadata$outboundSchema: z.ZodType<CollectionPinnedMetadata$Outbound, z.ZodTypeDef, CollectionPinnedMetadata>;

declare type CollectionPinnedMetadata = {
    /**
     * List of targets this Collection is pinned to.
     */
    existingPins?: Array<CollectionPinTarget> | undefined;
    /**
     * List of targets this Collection can be pinned to, excluding the targets this Collection is already pinned to. We also include Collection ID already is pinned to each eligible target, which will be 0 if the target has no pinned Collection.
     */
    eligiblePins?: Array<CollectionPinMetadata> | undefined;
};

declare function collectionPinnedMetadataFromJSON(jsonString: string): Result<CollectionPinnedMetadata, SDKValidationError>;

declare function collectionPinnedMetadataToJSON(collectionPinnedMetadata: CollectionPinnedMetadata): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CollectionPinTarget$ {
    /** @deprecated use `CollectionPinTarget$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CollectionPinTarget, z.ZodTypeDef, unknown>;
    /** @deprecated use `CollectionPinTarget$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CollectionPinTarget$Outbound, z.ZodTypeDef, CollectionPinTarget>;
    /** @deprecated use `CollectionPinTarget$Outbound` instead. */
    type Outbound = CollectionPinTarget$Outbound;
}

/** @internal */
declare const CollectionPinTarget$inboundSchema: z.ZodType<CollectionPinTarget, z.ZodTypeDef, unknown>;

/** @internal */
declare type CollectionPinTarget$Outbound = {
    category: string;
    value?: string | undefined;
    target?: string | undefined;
};

/** @internal */
declare const CollectionPinTarget$outboundSchema: z.ZodType<CollectionPinTarget$Outbound, z.ZodTypeDef, CollectionPinTarget>;

declare type CollectionPinTarget = {
    /**
     * Categories a Collection can be pinned to.
     */
    category: CollectionPinnableCategories;
    /**
     * Optional. If category supports values, then the additional value for the category e.g. department name for DEPARTMENT_RESOURCE, team name/id for TEAM_RESOURCE and so on.
     */
    value?: string | undefined;
    /**
     * What targets can a Collection be pinned to.
     */
    target?: CollectionPinnableTargets | undefined;
};

declare function collectionPinTargetFromJSON(jsonString: string): Result<CollectionPinTarget, SDKValidationError>;

declare function collectionPinTargetToJSON(collectionPinTarget: CollectionPinTarget): string;

declare class Collections extends ClientSDK {
    /**
     * Add Collection item
     *
     * @remarks
     * Add items to a Collection.
     */
    addItems(request: components.AddCollectionItemsRequest, options?: RequestOptions): Promise<components.AddCollectionItemsResponse>;
    /**
     * Create Collection
     *
     * @remarks
     * Create a publicly visible (empty) Collection of documents.
     */
    create(request: components.CreateCollectionRequest, options?: RequestOptions): Promise<operations.CreatecollectionResponse>;
    /**
     * Delete Collection
     *
     * @remarks
     * Delete a Collection given the Collection's ID.
     */
    delete(request: components.DeleteCollectionRequest, options?: RequestOptions): Promise<void>;
    /**
     * Delete Collection item
     *
     * @remarks
     * Delete a single item from a Collection.
     */
    deleteItem(request: components.DeleteCollectionItemRequest, options?: RequestOptions): Promise<components.DeleteCollectionItemResponse>;
    /**
     * Update Collection
     *
     * @remarks
     * Update the properties of an existing Collection.
     */
    update(request: components.EditCollectionRequest, options?: RequestOptions): Promise<components.EditCollectionResponse>;
    /**
     * Update Collection item
     *
     * @remarks
     * Update the URL, Glean Document ID, description of an item within a Collection given its ID.
     */
    updateItem(request: components.EditCollectionItemRequest, options?: RequestOptions): Promise<components.EditCollectionItemResponse>;
    /**
     * Read Collection
     *
     * @remarks
     * Read the details of a Collection given its ID. Does not fetch items in this Collection.
     */
    retrieve(request: components.GetCollectionRequest, options?: RequestOptions): Promise<components.GetCollectionResponse>;
    /**
     * List Collections
     *
     * @remarks
     * List all existing Collections.
     */
    list(request: components.ListCollectionsRequest, options?: RequestOptions): Promise<components.ListCollectionsResponse>;
}

declare function collectionToJSON(collection: Collection): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CommentDefinition$ {
    /** @deprecated use `CommentDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CommentDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `CommentDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CommentDefinition$Outbound, z.ZodTypeDef, CommentDefinition>;
    /** @deprecated use `CommentDefinition$Outbound` instead. */
    type Outbound = CommentDefinition$Outbound;
}

/** @internal */
declare const CommentDefinition$inboundSchema: z.ZodType<CommentDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type CommentDefinition$Outbound = {
    id: string;
    author?: UserReferenceDefinition$Outbound | undefined;
    content?: ContentDefinition$Outbound | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    updatedBy?: UserReferenceDefinition$Outbound | undefined;
};

/** @internal */
declare const CommentDefinition$outboundSchema: z.ZodType<CommentDefinition$Outbound, z.ZodTypeDef, CommentDefinition>;

/**
 * Describes a comment on a document
 */
declare type CommentDefinition = {
    /**
     * The document specific id for the comment. This field is case insensitive and should not be more than 200 characters in length.
     */
    id: string;
    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    author?: UserReferenceDefinition | undefined;
    /**
     * Describes text content or base64 encoded binary content
     */
    content?: ContentDefinition | undefined;
    /**
     * The creation time, in epoch seconds.
     */
    createdAt?: number | undefined;
    /**
     * The last updated time, in epoch seconds.
     */
    updatedAt?: number | undefined;
    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    updatedBy?: UserReferenceDefinition | undefined;
};

declare function commentDefinitionFromJSON(jsonString: string): Result<CommentDefinition, SDKValidationError>;

declare function commentDefinitionToJSON(commentDefinition: CommentDefinition): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CommunicationChannel$ {
    /** @deprecated use `CommunicationChannel$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly CommunicationChannelEmail: "COMMUNICATION_CHANNEL_EMAIL";
        readonly CommunicationChannelSlack: "COMMUNICATION_CHANNEL_SLACK";
    }>;
    /** @deprecated use `CommunicationChannel$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly CommunicationChannelEmail: "COMMUNICATION_CHANNEL_EMAIL";
        readonly CommunicationChannelSlack: "COMMUNICATION_CHANNEL_SLACK";
    }>;
}

/** @internal */
declare const CommunicationChannel$inboundSchema: z.ZodNativeEnum<typeof CommunicationChannel>;

/** @internal */
declare const CommunicationChannel$outboundSchema: z.ZodNativeEnum<typeof CommunicationChannel>;

declare const CommunicationChannel: {
    readonly CommunicationChannelEmail: "COMMUNICATION_CHANNEL_EMAIL";
    readonly CommunicationChannelSlack: "COMMUNICATION_CHANNEL_SLACK";
};

declare type CommunicationChannel = ClosedEnum<typeof CommunicationChannel>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Company$ {
    /** @deprecated use `Company$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Company, z.ZodTypeDef, unknown>;
    /** @deprecated use `Company$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Company$Outbound, z.ZodTypeDef, Company>;
    /** @deprecated use `Company$Outbound` instead. */
    type Outbound = Company$Outbound;
}

/** @internal */
declare const Company$inboundSchema: z.ZodType<Company, z.ZodTypeDef, unknown>;

/** @internal */
declare type Company$Outbound = {
    name: string;
    profileUrl?: string | undefined;
    websiteUrls?: Array<string> | undefined;
    logoUrl?: string | undefined;
    location?: string | undefined;
    phone?: string | undefined;
    fax?: string | undefined;
    industry?: string | undefined;
    annualRevenue?: number | undefined;
    numberOfEmployees?: number | undefined;
    stockSymbol?: string | undefined;
    foundedDate?: string | undefined;
    about?: string | undefined;
};

/** @internal */
declare const Company$outboundSchema: z.ZodType<Company$Outbound, z.ZodTypeDef, Company>;

declare type Company = {
    /**
     * User-friendly display name.
     */
    name: string;
    /**
     * Link to internal company company profile.
     */
    profileUrl?: string | undefined;
    /**
     * Link to company's associated websites.
     */
    websiteUrls?: Array<string> | undefined;
    /**
     * The URL of the company's logo. Public, Glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    logoUrl?: string | undefined;
    /**
     * User facing string representing the company's location.
     */
    location?: string | undefined;
    /**
     * Phone number as a number string.
     */
    phone?: string | undefined;
    /**
     * Fax number as a number string.
     */
    fax?: string | undefined;
    /**
     * User facing string representing the company's industry.
     */
    industry?: string | undefined;
    /**
     * Average company's annual revenue for reference.
     */
    annualRevenue?: number | undefined;
    /**
     * Average company's number of employees for reference.
     */
    numberOfEmployees?: number | undefined;
    /**
     * Company's stock symbol if company is public.
     */
    stockSymbol?: string | undefined;
    /**
     * The date when the company was founded.
     */
    foundedDate?: RFCDate | undefined;
    /**
     * User facing description of company.
     */
    about?: string | undefined;
};

declare function companyFromJSON(jsonString: string): Result<Company, SDKValidationError>;

declare function companyToJSON(company: Company): string;

declare namespace components {
    export {
        activityToJSON,
        activityFromJSON,
        Activity_2 as Activity,
        Activity$inboundSchema,
        Activity$Outbound,
        Activity$outboundSchema,
        Activity$,
        activityEventToJSON,
        activityEventFromJSON,
        ActivityEventAction,
        ActivityEvent,
        ActivityEventAction$inboundSchema,
        ActivityEventAction$outboundSchema,
        ActivityEventAction$,
        ActivityEvent$inboundSchema,
        ActivityEvent$Outbound,
        ActivityEvent$outboundSchema,
        ActivityEvent$,
        activityEventParamsToJSON,
        activityEventParamsFromJSON,
        ActivityEventParams,
        ActivityEventParams$inboundSchema,
        ActivityEventParams$Outbound,
        ActivityEventParams$outboundSchema,
        ActivityEventParams$,
        addCollectionItemsErrorToJSON,
        addCollectionItemsErrorFromJSON,
        AddCollectionItemsErrorErrorType,
        AddCollectionItemsError,
        AddCollectionItemsErrorErrorType$inboundSchema,
        AddCollectionItemsErrorErrorType$outboundSchema,
        AddCollectionItemsErrorErrorType$,
        AddCollectionItemsError$inboundSchema,
        AddCollectionItemsError$Outbound,
        AddCollectionItemsError$outboundSchema,
        AddCollectionItemsError$,
        addCollectionItemsRequestToJSON,
        addCollectionItemsRequestFromJSON,
        AddCollectionItemsRequest,
        AddCollectionItemsRequest$inboundSchema,
        AddCollectionItemsRequest$Outbound,
        AddCollectionItemsRequest$outboundSchema,
        AddCollectionItemsRequest$,
        addCollectionItemsResponseToJSON,
        addCollectionItemsResponseFromJSON,
        AddCollectionItemsResponse,
        AddCollectionItemsResponse$inboundSchema,
        AddCollectionItemsResponse$Outbound,
        AddCollectionItemsResponse$outboundSchema,
        AddCollectionItemsResponse$,
        valueToJSON,
        valueFromJSON,
        additionalFieldDefinitionToJSON,
        additionalFieldDefinitionFromJSON,
        Value,
        AdditionalFieldDefinition,
        Value$inboundSchema,
        Value$Outbound,
        Value$outboundSchema,
        Value$,
        AdditionalFieldDefinition$inboundSchema,
        AdditionalFieldDefinition$Outbound,
        AdditionalFieldDefinition$outboundSchema,
        AdditionalFieldDefinition$,
        agentMetadataToJSON,
        agentMetadataFromJSON,
        agentCapabilitiesToJSON,
        agentCapabilitiesFromJSON,
        agentToJSON,
        agentFromJSON,
        AgentMetadata,
        AgentCapabilities,
        Agent,
        AgentMetadata$inboundSchema,
        AgentMetadata$Outbound,
        AgentMetadata$outboundSchema,
        AgentMetadata$,
        AgentCapabilities$inboundSchema,
        AgentCapabilities$Outbound,
        AgentCapabilities$outboundSchema,
        AgentCapabilities$,
        Agent$inboundSchema,
        Agent$Outbound,
        Agent$outboundSchema,
        Agent$,
        agentConfigToJSON,
        agentConfigFromJSON,
        AgentEnum,
        Mode,
        AgentConfig,
        AgentEnum$inboundSchema,
        AgentEnum$outboundSchema,
        AgentEnum$,
        Mode$inboundSchema,
        Mode$outboundSchema,
        Mode$,
        AgentConfig$inboundSchema,
        AgentConfig$Outbound,
        AgentConfig$outboundSchema,
        AgentConfig$,
        AgentExecutionStatus,
        AgentExecutionStatus$inboundSchema,
        AgentExecutionStatus$outboundSchema,
        AgentExecutionStatus$,
        agentRunToJSON,
        agentRunFromJSON,
        AgentRun,
        AgentRun$inboundSchema,
        AgentRun$Outbound,
        AgentRun$outboundSchema,
        AgentRun$,
        agentRunCreateToJSON,
        agentRunCreateFromJSON,
        AgentRunCreate,
        AgentRunCreate$inboundSchema,
        AgentRunCreate$Outbound,
        AgentRunCreate$outboundSchema,
        AgentRunCreate$,
        agentRunWaitResponseToJSON,
        agentRunWaitResponseFromJSON,
        AgentRunWaitResponse,
        AgentRunWaitResponse$inboundSchema,
        AgentRunWaitResponse$Outbound,
        AgentRunWaitResponse$outboundSchema,
        AgentRunWaitResponse$,
        inputSchemaToJSON,
        inputSchemaFromJSON,
        outputSchemaToJSON,
        outputSchemaFromJSON,
        agentSchemasToJSON,
        agentSchemasFromJSON,
        InputSchema,
        OutputSchema,
        AgentSchemas,
        InputSchema$inboundSchema,
        InputSchema$Outbound,
        InputSchema$outboundSchema,
        InputSchema$,
        OutputSchema$inboundSchema,
        OutputSchema$Outbound,
        OutputSchema$outboundSchema,
        OutputSchema$,
        AgentSchemas$inboundSchema,
        AgentSchemas$Outbound,
        AgentSchemas$outboundSchema,
        AgentSchemas$,
        agentsInsightsV2RequestToJSON,
        agentsInsightsV2RequestFromJSON,
        AgentsInsightsV2Request,
        AgentsInsightsV2Request$inboundSchema,
        AgentsInsightsV2Request$Outbound,
        AgentsInsightsV2Request$outboundSchema,
        AgentsInsightsV2Request$,
        aiAppActionCountsToJSON,
        aiAppActionCountsFromJSON,
        AiAppActionCounts,
        AiAppActionCounts$inboundSchema,
        AiAppActionCounts$Outbound,
        AiAppActionCounts$outboundSchema,
        AiAppActionCounts$,
        aiAppsInsightsResponseToJSON,
        aiAppsInsightsResponseFromJSON,
        AiAppsInsightsResponse,
        AiAppsInsightsResponse$inboundSchema,
        AiAppsInsightsResponse$Outbound,
        AiAppsInsightsResponse$outboundSchema,
        AiAppsInsightsResponse$,
        aiInsightsResponseToJSON,
        aiInsightsResponseFromJSON,
        AiInsightsResponse,
        AiInsightsResponse$inboundSchema,
        AiInsightsResponse$Outbound,
        AiInsightsResponse$outboundSchema,
        AiInsightsResponse$,
        allowlistOptionsToJSON,
        allowlistOptionsFromJSON,
        AllowlistOptions,
        AllowlistOptions$inboundSchema,
        AllowlistOptions$Outbound,
        AllowlistOptions$outboundSchema,
        AllowlistOptions$,
        announcementViewerInfoToJSON,
        announcementViewerInfoFromJSON,
        announcementToJSON,
        announcementFromJSON,
        AnnouncementChannel,
        AnnouncementPostType,
        AnnouncementViewerInfo,
        Announcement,
        AnnouncementChannel$inboundSchema,
        AnnouncementChannel$outboundSchema,
        AnnouncementChannel$,
        AnnouncementPostType$inboundSchema,
        AnnouncementPostType$outboundSchema,
        AnnouncementPostType$,
        AnnouncementViewerInfo$inboundSchema,
        AnnouncementViewerInfo$Outbound,
        AnnouncementViewerInfo$outboundSchema,
        AnnouncementViewerInfo$,
        Announcement$inboundSchema,
        Announcement$Outbound,
        Announcement$outboundSchema,
        Announcement$,
        anonymousEventToJSON,
        anonymousEventFromJSON,
        AnonymousEventEventType,
        AnonymousEvent,
        AnonymousEventEventType$inboundSchema,
        AnonymousEventEventType$outboundSchema,
        AnonymousEventEventType$,
        AnonymousEvent$inboundSchema,
        AnonymousEvent$Outbound,
        AnonymousEvent$outboundSchema,
        AnonymousEvent$,
        answerToJSON,
        answerFromJSON,
        AnswerSourceType,
        Answer,
        AnswerSourceType$inboundSchema,
        AnswerSourceType$outboundSchema,
        AnswerSourceType$,
        Answer$inboundSchema,
        Answer$Outbound,
        Answer$outboundSchema,
        Answer$,
        answerBoardToJSON,
        answerBoardFromJSON,
        AnswerBoard,
        AnswerBoard$inboundSchema,
        AnswerBoard$Outbound,
        AnswerBoard$outboundSchema,
        AnswerBoard$,
        answerCreationDataToJSON,
        answerCreationDataFromJSON,
        AnswerCreationDataSourceType,
        AnswerCreationData,
        AnswerCreationDataSourceType$inboundSchema,
        AnswerCreationDataSourceType$outboundSchema,
        AnswerCreationDataSourceType$,
        AnswerCreationData$inboundSchema,
        AnswerCreationData$Outbound,
        AnswerCreationData$outboundSchema,
        AnswerCreationData$,
        answerLikeToJSON,
        answerLikeFromJSON,
        AnswerLike,
        AnswerLike$inboundSchema,
        AnswerLike$Outbound,
        AnswerLike$outboundSchema,
        AnswerLike$,
        answerLikesToJSON,
        answerLikesFromJSON,
        AnswerLikes,
        AnswerLikes$inboundSchema,
        AnswerLikes$Outbound,
        AnswerLikes$outboundSchema,
        AnswerLikes$,
        answerResultToJSON,
        answerResultFromJSON,
        AnswerResult,
        AnswerResult$inboundSchema,
        AnswerResult$Outbound,
        AnswerResult$outboundSchema,
        AnswerResult$,
        appResultToJSON,
        appResultFromJSON,
        AppResult,
        AppResult$inboundSchema,
        AppResult$Outbound,
        AppResult$outboundSchema,
        AppResult$,
        authConfigToJSON,
        authConfigFromJSON,
        AuthConfigType,
        GrantType,
        AuthConfigStatus,
        AuthConfig,
        AuthConfigType$inboundSchema,
        AuthConfigType$outboundSchema,
        AuthConfigType$,
        GrantType$inboundSchema,
        GrantType$outboundSchema,
        GrantType$,
        AuthConfigStatus$inboundSchema,
        AuthConfigStatus$outboundSchema,
        AuthConfigStatus$,
        AuthConfig$inboundSchema,
        AuthConfig$Outbound,
        AuthConfig$outboundSchema,
        AuthConfig$,
        authTokenToJSON,
        authTokenFromJSON,
        AuthToken,
        AuthToken$inboundSchema,
        AuthToken$Outbound,
        AuthToken$outboundSchema,
        AuthToken$,
        autocompleteRequestToJSON,
        autocompleteRequestFromJSON,
        AutocompleteRequestResultType,
        AutocompleteRequest,
        AutocompleteRequestResultType$inboundSchema,
        AutocompleteRequestResultType$outboundSchema,
        AutocompleteRequestResultType$,
        AutocompleteRequest$inboundSchema,
        AutocompleteRequest$Outbound,
        AutocompleteRequest$outboundSchema,
        AutocompleteRequest$,
        autocompleteResponseToJSON,
        autocompleteResponseFromJSON,
        AutocompleteResponse,
        AutocompleteResponse$inboundSchema,
        AutocompleteResponse$Outbound,
        AutocompleteResponse$outboundSchema,
        AutocompleteResponse$,
        autocompleteResultToJSON,
        autocompleteResultFromJSON,
        AutocompleteResultResultType,
        AutocompleteResult,
        AutocompleteResultResultType$inboundSchema,
        AutocompleteResultResultType$outboundSchema,
        AutocompleteResultResultType$,
        AutocompleteResult$inboundSchema,
        AutocompleteResult$Outbound,
        AutocompleteResult$outboundSchema,
        AutocompleteResult$,
        autocompleteResultGroupToJSON,
        autocompleteResultGroupFromJSON,
        AutocompleteResultGroup,
        AutocompleteResultGroup$inboundSchema,
        AutocompleteResultGroup$Outbound,
        AutocompleteResultGroup$outboundSchema,
        AutocompleteResultGroup$,
        badgeToJSON,
        badgeFromJSON,
        Badge,
        Badge$inboundSchema,
        Badge$Outbound,
        Badge$outboundSchema,
        Badge$,
        bulkIndexDocumentsRequestToJSON,
        bulkIndexDocumentsRequestFromJSON,
        BulkIndexDocumentsRequest,
        BulkIndexDocumentsRequest$inboundSchema,
        BulkIndexDocumentsRequest$Outbound,
        BulkIndexDocumentsRequest$outboundSchema,
        BulkIndexDocumentsRequest$,
        bulkIndexEmployeesRequestToJSON,
        bulkIndexEmployeesRequestFromJSON,
        BulkIndexEmployeesRequest,
        BulkIndexEmployeesRequest$inboundSchema,
        BulkIndexEmployeesRequest$Outbound,
        BulkIndexEmployeesRequest$outboundSchema,
        BulkIndexEmployeesRequest$,
        bulkIndexGroupsRequestToJSON,
        bulkIndexGroupsRequestFromJSON,
        BulkIndexGroupsRequest,
        BulkIndexGroupsRequest$inboundSchema,
        BulkIndexGroupsRequest$Outbound,
        BulkIndexGroupsRequest$outboundSchema,
        BulkIndexGroupsRequest$,
        bulkIndexMembershipsRequestToJSON,
        bulkIndexMembershipsRequestFromJSON,
        BulkIndexMembershipsRequest,
        BulkIndexMembershipsRequest$inboundSchema,
        BulkIndexMembershipsRequest$Outbound,
        BulkIndexMembershipsRequest$outboundSchema,
        BulkIndexMembershipsRequest$,
        bulkIndexShortcutsRequestToJSON,
        bulkIndexShortcutsRequestFromJSON,
        BulkIndexShortcutsRequest,
        BulkIndexShortcutsRequest$inboundSchema,
        BulkIndexShortcutsRequest$Outbound,
        BulkIndexShortcutsRequest$outboundSchema,
        BulkIndexShortcutsRequest$,
        bulkIndexTeamsRequestToJSON,
        bulkIndexTeamsRequestFromJSON,
        BulkIndexTeamsRequest,
        BulkIndexTeamsRequest$inboundSchema,
        BulkIndexTeamsRequest$Outbound,
        BulkIndexTeamsRequest$outboundSchema,
        BulkIndexTeamsRequest$,
        bulkIndexUsersRequestToJSON,
        bulkIndexUsersRequestFromJSON,
        BulkIndexUsersRequest,
        BulkIndexUsersRequest$inboundSchema,
        BulkIndexUsersRequest$Outbound,
        BulkIndexUsersRequest$outboundSchema,
        BulkIndexUsersRequest$,
        bulkUploadHistoryEventToJSON,
        bulkUploadHistoryEventFromJSON,
        BulkUploadHistoryEventStatus,
        ProcessingState,
        BulkUploadHistoryEvent,
        BulkUploadHistoryEventStatus$inboundSchema,
        BulkUploadHistoryEventStatus$outboundSchema,
        BulkUploadHistoryEventStatus$,
        ProcessingState$inboundSchema,
        ProcessingState$outboundSchema,
        ProcessingState$,
        BulkUploadHistoryEvent$inboundSchema,
        BulkUploadHistoryEvent$Outbound,
        BulkUploadHistoryEvent$outboundSchema,
        BulkUploadHistoryEvent$,
        calendarAttendeeToJSON,
        calendarAttendeeFromJSON,
        ResponseStatus,
        CalendarAttendee,
        ResponseStatus$inboundSchema,
        ResponseStatus$outboundSchema,
        ResponseStatus$,
        CalendarAttendee$inboundSchema,
        CalendarAttendee$Outbound,
        CalendarAttendee$outboundSchema,
        CalendarAttendee$,
        calendarAttendeesToJSON,
        calendarAttendeesFromJSON,
        CalendarAttendees,
        CalendarAttendees$inboundSchema,
        CalendarAttendees$Outbound,
        CalendarAttendees$outboundSchema,
        CalendarAttendees$,
        calendarEventToJSON,
        calendarEventFromJSON,
        CalendarEventEventType,
        CalendarEvent,
        CalendarEventEventType$inboundSchema,
        CalendarEventEventType$outboundSchema,
        CalendarEventEventType$,
        CalendarEvent$inboundSchema,
        CalendarEvent$Outbound,
        CalendarEvent$outboundSchema,
        CalendarEvent$,
        canonicalizingRegexTypeToJSON,
        canonicalizingRegexTypeFromJSON,
        CanonicalizingRegexType,
        CanonicalizingRegexType$inboundSchema,
        CanonicalizingRegexType$Outbound,
        CanonicalizingRegexType$outboundSchema,
        CanonicalizingRegexType$,
        channelInviteInfoToJSON,
        channelInviteInfoFromJSON,
        ChannelInviteInfo,
        ChannelInviteInfo$inboundSchema,
        ChannelInviteInfo$Outbound,
        ChannelInviteInfo$outboundSchema,
        ChannelInviteInfo$,
        chatToJSON,
        chatFromJSON,
        Chat,
        Chat$inboundSchema,
        Chat$Outbound,
        Chat$outboundSchema,
        Chat$,
        chatFileToJSON,
        chatFileFromJSON,
        ChatFile,
        ChatFile$inboundSchema,
        ChatFile$Outbound,
        ChatFile$outboundSchema,
        ChatFile$,
        ChatFileFailureReason,
        ChatFileFailureReason$inboundSchema,
        ChatFileFailureReason$outboundSchema,
        ChatFileFailureReason$,
        chatFileMetadataToJSON,
        chatFileMetadataFromJSON,
        ChatFileMetadata,
        ChatFileMetadata$inboundSchema,
        ChatFileMetadata$Outbound,
        ChatFileMetadata$outboundSchema,
        ChatFileMetadata$,
        ChatFileStatus,
        ChatFileStatus$inboundSchema,
        ChatFileStatus$outboundSchema,
        ChatFileStatus$,
        chatMessageToJSON,
        chatMessageFromJSON,
        Author,
        MessageType,
        ChatMessage,
        Author$inboundSchema,
        Author$outboundSchema,
        Author$,
        MessageType$inboundSchema,
        MessageType$outboundSchema,
        MessageType$,
        ChatMessage$inboundSchema,
        ChatMessage$Outbound,
        ChatMessage$outboundSchema,
        ChatMessage$,
        chatMessageCitationToJSON,
        chatMessageCitationFromJSON,
        ChatMessageCitation,
        ChatMessageCitation$inboundSchema,
        ChatMessageCitation$Outbound,
        ChatMessageCitation$outboundSchema,
        ChatMessageCitation$,
        chatMessageFragmentToJSON,
        chatMessageFragmentFromJSON,
        ChatMessageFragment,
        ChatMessageFragment$inboundSchema,
        ChatMessageFragment$Outbound,
        ChatMessageFragment$outboundSchema,
        ChatMessageFragment$,
        chatMetadataToJSON,
        chatMetadataFromJSON,
        ChatMetadata,
        ChatMetadata$inboundSchema,
        ChatMetadata$Outbound,
        ChatMetadata$outboundSchema,
        ChatMetadata$,
        chatMetadataResultToJSON,
        chatMetadataResultFromJSON,
        ChatMetadataResult,
        ChatMetadataResult$inboundSchema,
        ChatMetadataResult$Outbound,
        ChatMetadataResult$outboundSchema,
        ChatMetadataResult$,
        chatRequestToJSON,
        chatRequestFromJSON,
        ChatRequest,
        ChatRequest$inboundSchema,
        ChatRequest$Outbound,
        ChatRequest$outboundSchema,
        ChatRequest$,
        chatResponseToJSON,
        chatResponseFromJSON,
        ChatResponse,
        ChatResponse$inboundSchema,
        ChatResponse$Outbound,
        ChatResponse$outboundSchema,
        ChatResponse$,
        chatRestrictionFiltersToJSON,
        chatRestrictionFiltersFromJSON,
        ChatRestrictionFilters,
        ChatRestrictionFilters$inboundSchema,
        ChatRestrictionFilters$Outbound,
        ChatRestrictionFilters$outboundSchema,
        ChatRestrictionFilters$,
        chatResultToJSON,
        chatResultFromJSON,
        ChatResult,
        ChatResult$inboundSchema,
        ChatResult$Outbound,
        ChatResult$outboundSchema,
        ChatResult$,
        chatSuggestionToJSON,
        chatSuggestionFromJSON,
        ChatSuggestion,
        ChatSuggestion$inboundSchema,
        ChatSuggestion$Outbound,
        ChatSuggestion$outboundSchema,
        ChatSuggestion$,
        chatZeroStateSuggestionOptionsToJSON,
        chatZeroStateSuggestionOptionsFromJSON,
        ChatZeroStateSuggestionOptions,
        ChatZeroStateSuggestionOptions$inboundSchema,
        ChatZeroStateSuggestionOptions$Outbound,
        ChatZeroStateSuggestionOptions$outboundSchema,
        ChatZeroStateSuggestionOptions$,
        checkDocumentAccessRequestToJSON,
        checkDocumentAccessRequestFromJSON,
        CheckDocumentAccessRequest,
        CheckDocumentAccessRequest$inboundSchema,
        CheckDocumentAccessRequest$Outbound,
        CheckDocumentAccessRequest$outboundSchema,
        CheckDocumentAccessRequest$,
        checkDocumentAccessResponseToJSON,
        checkDocumentAccessResponseFromJSON,
        CheckDocumentAccessResponse,
        CheckDocumentAccessResponse$inboundSchema,
        CheckDocumentAccessResponse$Outbound,
        CheckDocumentAccessResponse$outboundSchema,
        CheckDocumentAccessResponse$,
        clusterGroupToJSON,
        clusterGroupFromJSON,
        ClusterGroup,
        ClusterGroup$inboundSchema,
        ClusterGroup$Outbound,
        ClusterGroup$outboundSchema,
        ClusterGroup$,
        ClusterTypeEnum,
        ClusterTypeEnum$inboundSchema,
        ClusterTypeEnum$outboundSchema,
        ClusterTypeEnum$,
        codeToJSON,
        codeFromJSON,
        Code,
        Code$inboundSchema,
        Code$Outbound,
        Code$outboundSchema,
        Code$,
        codeLineToJSON,
        codeLineFromJSON,
        CodeLine,
        CodeLine$inboundSchema,
        CodeLine$Outbound,
        CodeLine$outboundSchema,
        CodeLine$,
        collectionToJSON,
        collectionFromJSON,
        Collection,
        Collection$inboundSchema,
        Collection$Outbound,
        Collection$outboundSchema,
        Collection$,
        collectionErrorToJSON,
        collectionErrorFromJSON,
        CollectionErrorErrorCode,
        CollectionError,
        CollectionErrorErrorCode$inboundSchema,
        CollectionErrorErrorCode$outboundSchema,
        CollectionErrorErrorCode$,
        CollectionError$inboundSchema,
        CollectionError$Outbound,
        CollectionError$outboundSchema,
        CollectionError$,
        collectionItemToJSON,
        collectionItemFromJSON,
        CollectionItemItemType,
        CollectionItem,
        CollectionItemItemType$inboundSchema,
        CollectionItemItemType$outboundSchema,
        CollectionItemItemType$,
        CollectionItem$inboundSchema,
        CollectionItem$Outbound,
        CollectionItem$outboundSchema,
        CollectionItem$,
        collectionItemDescriptorToJSON,
        collectionItemDescriptorFromJSON,
        CollectionItemDescriptorItemType,
        CollectionItemDescriptor,
        CollectionItemDescriptorItemType$inboundSchema,
        CollectionItemDescriptorItemType$outboundSchema,
        CollectionItemDescriptorItemType$,
        CollectionItemDescriptor$inboundSchema,
        CollectionItemDescriptor$Outbound,
        CollectionItemDescriptor$outboundSchema,
        CollectionItemDescriptor$,
        collectionPinMetadataToJSON,
        collectionPinMetadataFromJSON,
        CollectionPinMetadata,
        CollectionPinMetadata$inboundSchema,
        CollectionPinMetadata$Outbound,
        CollectionPinMetadata$outboundSchema,
        CollectionPinMetadata$,
        CollectionPinnableCategories,
        CollectionPinnableCategories$inboundSchema,
        CollectionPinnableCategories$outboundSchema,
        CollectionPinnableCategories$,
        CollectionPinnableTargets,
        CollectionPinnableTargets$inboundSchema,
        CollectionPinnableTargets$outboundSchema,
        CollectionPinnableTargets$,
        collectionPinnedMetadataToJSON,
        collectionPinnedMetadataFromJSON,
        CollectionPinnedMetadata,
        CollectionPinnedMetadata$inboundSchema,
        CollectionPinnedMetadata$Outbound,
        CollectionPinnedMetadata$outboundSchema,
        CollectionPinnedMetadata$,
        collectionPinTargetToJSON,
        collectionPinTargetFromJSON,
        CollectionPinTarget,
        CollectionPinTarget$inboundSchema,
        CollectionPinTarget$Outbound,
        CollectionPinTarget$outboundSchema,
        CollectionPinTarget$,
        commentDefinitionToJSON,
        commentDefinitionFromJSON,
        CommentDefinition,
        CommentDefinition$inboundSchema,
        CommentDefinition$Outbound,
        CommentDefinition$outboundSchema,
        CommentDefinition$,
        CommunicationChannel,
        CommunicationChannel$inboundSchema,
        CommunicationChannel$outboundSchema,
        CommunicationChannel$,
        companyToJSON,
        companyFromJSON,
        Company,
        Company$inboundSchema,
        Company$Outbound,
        Company$outboundSchema,
        Company$,
        conferenceDataToJSON,
        conferenceDataFromJSON,
        Provider,
        ConferenceDataSource,
        ConferenceData,
        Provider$inboundSchema,
        Provider$outboundSchema,
        Provider$,
        ConferenceDataSource$inboundSchema,
        ConferenceDataSource$outboundSchema,
        ConferenceDataSource$,
        ConferenceData$inboundSchema,
        ConferenceData$Outbound,
        ConferenceData$outboundSchema,
        ConferenceData$,
        ConnectorType,
        ConnectorType$inboundSchema,
        ConnectorType$outboundSchema,
        ConnectorType$,
        contentDefinitionToJSON,
        contentDefinitionFromJSON,
        ContentDefinition,
        ContentDefinition$inboundSchema,
        ContentDefinition$Outbound,
        ContentDefinition$outboundSchema,
        ContentDefinition$,
        contentInsightsResponseToJSON,
        contentInsightsResponseFromJSON,
        ContentInsightsResponse,
        ContentInsightsResponse$inboundSchema,
        ContentInsightsResponse$Outbound,
        ContentInsightsResponse$outboundSchema,
        ContentInsightsResponse$,
        ContentType,
        ContentType$inboundSchema,
        ContentType$outboundSchema,
        ContentType$,
        countInfoToJSON,
        countInfoFromJSON,
        CountInfo,
        CountInfo$inboundSchema,
        CountInfo$Outbound,
        CountInfo$outboundSchema,
        CountInfo$,
        createAnnouncementRequestToJSON,
        createAnnouncementRequestFromJSON,
        CreateAnnouncementRequestChannel,
        CreateAnnouncementRequestPostType,
        CreateAnnouncementRequest,
        CreateAnnouncementRequestChannel$inboundSchema,
        CreateAnnouncementRequestChannel$outboundSchema,
        CreateAnnouncementRequestChannel$,
        CreateAnnouncementRequestPostType$inboundSchema,
        CreateAnnouncementRequestPostType$outboundSchema,
        CreateAnnouncementRequestPostType$,
        CreateAnnouncementRequest$inboundSchema,
        CreateAnnouncementRequest$Outbound,
        CreateAnnouncementRequest$outboundSchema,
        CreateAnnouncementRequest$,
        createAnswerRequestToJSON,
        createAnswerRequestFromJSON,
        CreateAnswerRequest,
        CreateAnswerRequest$inboundSchema,
        CreateAnswerRequest$Outbound,
        CreateAnswerRequest$outboundSchema,
        CreateAnswerRequest$,
        createAuthTokenResponseToJSON,
        createAuthTokenResponseFromJSON,
        CreateAuthTokenResponse,
        CreateAuthTokenResponse$inboundSchema,
        CreateAuthTokenResponse$Outbound,
        CreateAuthTokenResponse$outboundSchema,
        CreateAuthTokenResponse$,
        createCollectionRequestToJSON,
        createCollectionRequestFromJSON,
        CreateCollectionRequest,
        CreateCollectionRequest$inboundSchema,
        CreateCollectionRequest$Outbound,
        CreateCollectionRequest$outboundSchema,
        CreateCollectionRequest$,
        createDlpReportRequestToJSON,
        createDlpReportRequestFromJSON,
        CreateDlpReportRequest,
        CreateDlpReportRequest$inboundSchema,
        CreateDlpReportRequest$Outbound,
        CreateDlpReportRequest$outboundSchema,
        CreateDlpReportRequest$,
        createDlpReportResponseToJSON,
        createDlpReportResponseFromJSON,
        CreateDlpReportResponse,
        CreateDlpReportResponse$inboundSchema,
        CreateDlpReportResponse$Outbound,
        CreateDlpReportResponse$outboundSchema,
        CreateDlpReportResponse$,
        createShortcutRequestToJSON,
        createShortcutRequestFromJSON,
        CreateShortcutRequest,
        CreateShortcutRequest$inboundSchema,
        CreateShortcutRequest$Outbound,
        CreateShortcutRequest$outboundSchema,
        CreateShortcutRequest$,
        createShortcutResponseToJSON,
        createShortcutResponseFromJSON,
        CreateShortcutResponse,
        CreateShortcutResponse$inboundSchema,
        CreateShortcutResponse$Outbound,
        CreateShortcutResponse$outboundSchema,
        CreateShortcutResponse$,
        customDatasourceConfigToJSON,
        customDatasourceConfigFromJSON,
        DatasourceCategory,
        HideBuiltInFacet,
        CustomDatasourceConfigConnectorType,
        CustomDatasourceConfig,
        DatasourceCategory$inboundSchema,
        DatasourceCategory$outboundSchema,
        DatasourceCategory$,
        HideBuiltInFacet$inboundSchema,
        HideBuiltInFacet$outboundSchema,
        HideBuiltInFacet$,
        CustomDatasourceConfigConnectorType$inboundSchema,
        CustomDatasourceConfigConnectorType$outboundSchema,
        CustomDatasourceConfigConnectorType$,
        CustomDatasourceConfig$inboundSchema,
        CustomDatasourceConfig$Outbound,
        CustomDatasourceConfig$outboundSchema,
        CustomDatasourceConfig$,
        customDataValueToJSON,
        customDataValueFromJSON,
        CustomDataValue,
        CustomDataValue$inboundSchema,
        CustomDataValue$Outbound,
        CustomDataValue$outboundSchema,
        CustomDataValue$,
        customEntityToJSON,
        customEntityFromJSON,
        CustomEntity,
        CustomEntity$inboundSchema,
        CustomEntity$Outbound,
        CustomEntity$outboundSchema,
        CustomEntity$,
        customEntityMetadataToJSON,
        customEntityMetadataFromJSON,
        CustomEntityMetadata,
        CustomEntityMetadata$inboundSchema,
        CustomEntityMetadata$Outbound,
        CustomEntityMetadata$outboundSchema,
        CustomEntityMetadata$,
        customerToJSON,
        customerFromJSON,
        Customer,
        Customer$inboundSchema,
        Customer$Outbound,
        Customer$outboundSchema,
        Customer$,
        customerMetadataToJSON,
        customerMetadataFromJSON,
        CustomerMetadata,
        CustomerMetadata$inboundSchema,
        CustomerMetadata$Outbound,
        CustomerMetadata$outboundSchema,
        CustomerMetadata$,
        customFieldDataToJSON,
        customFieldDataFromJSON,
        CustomFieldData,
        CustomFieldData$inboundSchema,
        CustomFieldData$Outbound,
        CustomFieldData$outboundSchema,
        CustomFieldData$,
        customFieldValueToJSON,
        customFieldValueFromJSON,
        CustomFieldValue,
        CustomFieldValue$inboundSchema,
        CustomFieldValue$Outbound,
        CustomFieldValue$outboundSchema,
        CustomFieldValue$,
        customFieldValueHyperlinkToJSON,
        customFieldValueHyperlinkFromJSON,
        CustomFieldValueHyperlink,
        CustomFieldValueHyperlink$inboundSchema,
        CustomFieldValueHyperlink$Outbound,
        CustomFieldValueHyperlink$outboundSchema,
        CustomFieldValueHyperlink$,
        customFieldValuePersonToJSON,
        customFieldValuePersonFromJSON,
        CustomFieldValuePerson,
        CustomFieldValuePerson$inboundSchema,
        CustomFieldValuePerson$Outbound,
        CustomFieldValuePerson$outboundSchema,
        CustomFieldValuePerson$,
        customFieldValueStrToJSON,
        customFieldValueStrFromJSON,
        CustomFieldValueStr,
        CustomFieldValueStr$inboundSchema,
        CustomFieldValueStr$Outbound,
        CustomFieldValueStr$outboundSchema,
        CustomFieldValueStr$,
        customPropertyToJSON,
        customPropertyFromJSON,
        CustomProperty,
        CustomProperty$inboundSchema,
        CustomProperty$Outbound,
        CustomProperty$outboundSchema,
        CustomProperty$,
        datasourceBulkMembershipDefinitionToJSON,
        datasourceBulkMembershipDefinitionFromJSON,
        DatasourceBulkMembershipDefinition,
        DatasourceBulkMembershipDefinition$inboundSchema,
        DatasourceBulkMembershipDefinition$Outbound,
        DatasourceBulkMembershipDefinition$outboundSchema,
        DatasourceBulkMembershipDefinition$,
        datasourceGroupDefinitionToJSON,
        datasourceGroupDefinitionFromJSON,
        DatasourceGroupDefinition,
        DatasourceGroupDefinition$inboundSchema,
        DatasourceGroupDefinition$Outbound,
        DatasourceGroupDefinition$outboundSchema,
        DatasourceGroupDefinition$,
        datasourceMembershipDefinitionToJSON,
        datasourceMembershipDefinitionFromJSON,
        DatasourceMembershipDefinition,
        DatasourceMembershipDefinition$inboundSchema,
        DatasourceMembershipDefinition$Outbound,
        DatasourceMembershipDefinition$outboundSchema,
        DatasourceMembershipDefinition$,
        datasourceObjectTypeDocumentCountEntryToJSON,
        datasourceObjectTypeDocumentCountEntryFromJSON,
        DatasourceObjectTypeDocumentCountEntry,
        DatasourceObjectTypeDocumentCountEntry$inboundSchema,
        DatasourceObjectTypeDocumentCountEntry$Outbound,
        DatasourceObjectTypeDocumentCountEntry$outboundSchema,
        DatasourceObjectTypeDocumentCountEntry$,
        datasourceProfileToJSON,
        datasourceProfileFromJSON,
        DatasourceProfile,
        DatasourceProfile$inboundSchema,
        DatasourceProfile$Outbound,
        DatasourceProfile$outboundSchema,
        DatasourceProfile$,
        datasourceUserDefinitionToJSON,
        datasourceUserDefinitionFromJSON,
        DatasourceUserDefinition,
        DatasourceUserDefinition$inboundSchema,
        DatasourceUserDefinition$Outbound,
        DatasourceUserDefinition$outboundSchema,
        DatasourceUserDefinition$,
        debugDatasourceStatusIdentityResponseComponentCountsToJSON,
        debugDatasourceStatusIdentityResponseComponentCountsFromJSON,
        debugDatasourceStatusIdentityResponseComponentToJSON,
        debugDatasourceStatusIdentityResponseComponentFromJSON,
        DebugDatasourceStatusIdentityResponseComponentCounts,
        DebugDatasourceStatusIdentityResponseComponent,
        DebugDatasourceStatusIdentityResponseComponentCounts$inboundSchema,
        DebugDatasourceStatusIdentityResponseComponentCounts$Outbound,
        DebugDatasourceStatusIdentityResponseComponentCounts$outboundSchema,
        DebugDatasourceStatusIdentityResponseComponentCounts$,
        DebugDatasourceStatusIdentityResponseComponent$inboundSchema,
        DebugDatasourceStatusIdentityResponseComponent$Outbound,
        DebugDatasourceStatusIdentityResponseComponent$outboundSchema,
        DebugDatasourceStatusIdentityResponseComponent$,
        debugDatasourceStatusResponseCountsToJSON,
        debugDatasourceStatusResponseCountsFromJSON,
        documentsToJSON,
        documentsFromJSON,
        identityToJSON,
        identityFromJSON,
        debugDatasourceStatusResponseToJSON,
        debugDatasourceStatusResponseFromJSON,
        DebugDatasourceStatusResponseCounts,
        Documents,
        Identity,
        DatasourceVisibility,
        DebugDatasourceStatusResponse,
        DebugDatasourceStatusResponseCounts$inboundSchema,
        DebugDatasourceStatusResponseCounts$Outbound,
        DebugDatasourceStatusResponseCounts$outboundSchema,
        DebugDatasourceStatusResponseCounts$,
        Documents$inboundSchema,
        Documents$Outbound,
        Documents$outboundSchema,
        Documents$,
        Identity$inboundSchema,
        Identity$Outbound,
        Identity$outboundSchema,
        Identity$,
        DatasourceVisibility$inboundSchema,
        DatasourceVisibility$outboundSchema,
        DatasourceVisibility$,
        DebugDatasourceStatusResponse$inboundSchema,
        DebugDatasourceStatusResponse$Outbound,
        DebugDatasourceStatusResponse$outboundSchema,
        DebugDatasourceStatusResponse$,
        debugDocumentRequestToJSON,
        debugDocumentRequestFromJSON,
        DebugDocumentRequest,
        DebugDocumentRequest$inboundSchema,
        DebugDocumentRequest$Outbound,
        DebugDocumentRequest$outboundSchema,
        DebugDocumentRequest$,
        debugDocumentResponseToJSON,
        debugDocumentResponseFromJSON,
        DebugDocumentResponse,
        DebugDocumentResponse$inboundSchema,
        DebugDocumentResponse$Outbound,
        DebugDocumentResponse$outboundSchema,
        DebugDocumentResponse$,
        debugDocumentsRequestToJSON,
        debugDocumentsRequestFromJSON,
        DebugDocumentsRequest,
        DebugDocumentsRequest$inboundSchema,
        DebugDocumentsRequest$Outbound,
        DebugDocumentsRequest$outboundSchema,
        DebugDocumentsRequest$,
        debugDocumentsResponseToJSON,
        debugDocumentsResponseFromJSON,
        DebugDocumentsResponse,
        DebugDocumentsResponse$inboundSchema,
        DebugDocumentsResponse$Outbound,
        DebugDocumentsResponse$outboundSchema,
        DebugDocumentsResponse$,
        debugDocumentsResponseItemToJSON,
        debugDocumentsResponseItemFromJSON,
        DebugDocumentsResponseItem,
        DebugDocumentsResponseItem$inboundSchema,
        DebugDocumentsResponseItem$Outbound,
        DebugDocumentsResponseItem$outboundSchema,
        DebugDocumentsResponseItem$,
        debugUserRequestToJSON,
        debugUserRequestFromJSON,
        DebugUserRequest,
        DebugUserRequest$inboundSchema,
        DebugUserRequest$Outbound,
        DebugUserRequest$outboundSchema,
        DebugUserRequest$,
        debugUserResponseToJSON,
        debugUserResponseFromJSON,
        DebugUserResponse,
        DebugUserResponse$inboundSchema,
        DebugUserResponse$Outbound,
        DebugUserResponse$outboundSchema,
        DebugUserResponse$,
        deleteAnnouncementRequestToJSON,
        deleteAnnouncementRequestFromJSON,
        DeleteAnnouncementRequest,
        DeleteAnnouncementRequest$inboundSchema,
        DeleteAnnouncementRequest$Outbound,
        DeleteAnnouncementRequest$outboundSchema,
        DeleteAnnouncementRequest$,
        deleteAnswerRequestToJSON,
        deleteAnswerRequestFromJSON,
        DeleteAnswerRequest,
        DeleteAnswerRequest$inboundSchema,
        DeleteAnswerRequest$Outbound,
        DeleteAnswerRequest$outboundSchema,
        DeleteAnswerRequest$,
        deleteChatFilesRequestToJSON,
        deleteChatFilesRequestFromJSON,
        DeleteChatFilesRequest,
        DeleteChatFilesRequest$inboundSchema,
        DeleteChatFilesRequest$Outbound,
        DeleteChatFilesRequest$outboundSchema,
        DeleteChatFilesRequest$,
        deleteChatsRequestToJSON,
        deleteChatsRequestFromJSON,
        DeleteChatsRequest,
        DeleteChatsRequest$inboundSchema,
        DeleteChatsRequest$Outbound,
        DeleteChatsRequest$outboundSchema,
        DeleteChatsRequest$,
        deleteCollectionItemRequestToJSON,
        deleteCollectionItemRequestFromJSON,
        DeleteCollectionItemRequest,
        DeleteCollectionItemRequest$inboundSchema,
        DeleteCollectionItemRequest$Outbound,
        DeleteCollectionItemRequest$outboundSchema,
        DeleteCollectionItemRequest$,
        deleteCollectionItemResponseToJSON,
        deleteCollectionItemResponseFromJSON,
        DeleteCollectionItemResponse,
        DeleteCollectionItemResponse$inboundSchema,
        DeleteCollectionItemResponse$Outbound,
        DeleteCollectionItemResponse$outboundSchema,
        DeleteCollectionItemResponse$,
        deleteCollectionRequestToJSON,
        deleteCollectionRequestFromJSON,
        DeleteCollectionRequest,
        DeleteCollectionRequest$inboundSchema,
        DeleteCollectionRequest$Outbound,
        DeleteCollectionRequest$outboundSchema,
        DeleteCollectionRequest$,
        deleteDocumentRequestToJSON,
        deleteDocumentRequestFromJSON,
        DeleteDocumentRequest,
        DeleteDocumentRequest$inboundSchema,
        DeleteDocumentRequest$Outbound,
        DeleteDocumentRequest$outboundSchema,
        DeleteDocumentRequest$,
        deleteEmployeeRequestToJSON,
        deleteEmployeeRequestFromJSON,
        DeleteEmployeeRequest,
        DeleteEmployeeRequest$inboundSchema,
        DeleteEmployeeRequest$Outbound,
        DeleteEmployeeRequest$outboundSchema,
        DeleteEmployeeRequest$,
        deleteGroupRequestToJSON,
        deleteGroupRequestFromJSON,
        DeleteGroupRequest,
        DeleteGroupRequest$inboundSchema,
        DeleteGroupRequest$Outbound,
        DeleteGroupRequest$outboundSchema,
        DeleteGroupRequest$,
        deleteMembershipRequestToJSON,
        deleteMembershipRequestFromJSON,
        DeleteMembershipRequest,
        DeleteMembershipRequest$inboundSchema,
        DeleteMembershipRequest$Outbound,
        DeleteMembershipRequest$outboundSchema,
        DeleteMembershipRequest$,
        deleteShortcutRequestToJSON,
        deleteShortcutRequestFromJSON,
        DeleteShortcutRequest,
        DeleteShortcutRequest$inboundSchema,
        DeleteShortcutRequest$Outbound,
        DeleteShortcutRequest$outboundSchema,
        DeleteShortcutRequest$,
        deleteTeamRequestToJSON,
        deleteTeamRequestFromJSON,
        DeleteTeamRequest,
        DeleteTeamRequest$inboundSchema,
        DeleteTeamRequest$Outbound,
        DeleteTeamRequest$outboundSchema,
        DeleteTeamRequest$,
        deleteUserRequestToJSON,
        deleteUserRequestFromJSON,
        DeleteUserRequest,
        DeleteUserRequest$inboundSchema,
        DeleteUserRequest$Outbound,
        DeleteUserRequest$outboundSchema,
        DeleteUserRequest$,
        digestToJSON,
        digestFromJSON,
        Digest,
        Digest$inboundSchema,
        Digest$Outbound,
        Digest$outboundSchema,
        Digest$,
        digestSectionToJSON,
        digestSectionFromJSON,
        DigestSection,
        DigestSection$inboundSchema,
        DigestSection$Outbound,
        DigestSection$outboundSchema,
        DigestSection$,
        digestUpdateToJSON,
        digestUpdateFromJSON,
        DigestUpdate,
        DigestUpdate$inboundSchema,
        DigestUpdate$Outbound,
        DigestUpdate$outboundSchema,
        DigestUpdate$,
        disambiguationToJSON,
        disambiguationFromJSON,
        Disambiguation,
        Disambiguation$inboundSchema,
        Disambiguation$Outbound,
        Disambiguation$outboundSchema,
        Disambiguation$,
        displayableListItemUIConfigToJSON,
        displayableListItemUIConfigFromJSON,
        DisplayableListItemUIConfig,
        DisplayableListItemUIConfig$inboundSchema,
        DisplayableListItemUIConfig$Outbound,
        DisplayableListItemUIConfig$outboundSchema,
        DisplayableListItemUIConfig$,
        dlpConfigToJSON,
        dlpConfigFromJSON,
        DlpConfig,
        DlpConfig$inboundSchema,
        DlpConfig$Outbound,
        DlpConfig$outboundSchema,
        DlpConfig$,
        DlpFrequency,
        DlpFrequency$inboundSchema,
        DlpFrequency$outboundSchema,
        DlpFrequency$,
        dlpPersonToJSON,
        dlpPersonFromJSON,
        DlpPerson,
        DlpPerson$inboundSchema,
        DlpPerson$Outbound,
        DlpPerson$outboundSchema,
        DlpPerson$,
        dlpPersonMetadataToJSON,
        dlpPersonMetadataFromJSON,
        DlpPersonMetadata,
        DlpPersonMetadata$inboundSchema,
        DlpPersonMetadata$Outbound,
        DlpPersonMetadata$outboundSchema,
        DlpPersonMetadata$,
        dlpReportToJSON,
        dlpReportFromJSON,
        LastScanStatus,
        DlpReport,
        LastScanStatus$inboundSchema,
        LastScanStatus$outboundSchema,
        LastScanStatus$,
        DlpReport$inboundSchema,
        DlpReport$Outbound,
        DlpReport$outboundSchema,
        DlpReport$,
        DlpReportStatus,
        DlpReportStatus$inboundSchema,
        DlpReportStatus$outboundSchema,
        DlpReportStatus$,
        DlpSimpleResult,
        DlpSimpleResult$inboundSchema,
        DlpSimpleResult$outboundSchema,
        DlpSimpleResult$,
        documentToJSON,
        documentFromJSON,
        Document_2 as Document,
        Document$inboundSchema,
        Document$Outbound,
        Document$outboundSchema,
        Document$,
        documentContentToJSON,
        documentContentFromJSON,
        DocumentContent,
        DocumentContent$inboundSchema,
        DocumentContent$Outbound,
        DocumentContent$outboundSchema,
        DocumentContent$,
        documentDefinitionToJSON,
        documentDefinitionFromJSON,
        DocumentDefinition,
        DocumentDefinition$inboundSchema,
        DocumentDefinition$Outbound,
        DocumentDefinition$outboundSchema,
        DocumentDefinition$,
        documentInsightToJSON,
        documentInsightFromJSON,
        DocumentInsight,
        DocumentInsight$inboundSchema,
        DocumentInsight$Outbound,
        DocumentInsight$outboundSchema,
        DocumentInsight$,
        documentInteractionsToJSON,
        documentInteractionsFromJSON,
        DocumentInteractions,
        DocumentInteractions$inboundSchema,
        DocumentInteractions$Outbound,
        DocumentInteractions$outboundSchema,
        DocumentInteractions$,
        documentInteractionsDefinitionToJSON,
        documentInteractionsDefinitionFromJSON,
        DocumentInteractionsDefinition,
        DocumentInteractionsDefinition$inboundSchema,
        DocumentInteractionsDefinition$Outbound,
        DocumentInteractionsDefinition$outboundSchema,
        DocumentInteractionsDefinition$,
        documentMetadataToJSON,
        documentMetadataFromJSON,
        DocumentMetadata,
        DocumentMetadata$inboundSchema,
        DocumentMetadata$Outbound,
        DocumentMetadata$outboundSchema,
        DocumentMetadata$,
        documentOrErrorToJSON,
        documentOrErrorFromJSON,
        documentOrErrorUnionToJSON,
        documentOrErrorUnionFromJSON,
        DocumentOrError,
        DocumentOrErrorUnion,
        DocumentOrError$inboundSchema,
        DocumentOrError$Outbound,
        DocumentOrError$outboundSchema,
        DocumentOrError$,
        DocumentOrErrorUnion$inboundSchema,
        DocumentOrErrorUnion$Outbound,
        DocumentOrErrorUnion$outboundSchema,
        DocumentOrErrorUnion$,
        documentPermissionsDefinitionToJSON,
        documentPermissionsDefinitionFromJSON,
        DocumentPermissionsDefinition,
        DocumentPermissionsDefinition$inboundSchema,
        DocumentPermissionsDefinition$Outbound,
        DocumentPermissionsDefinition$outboundSchema,
        DocumentPermissionsDefinition$,
        documentSectionToJSON,
        documentSectionFromJSON,
        DocumentSection,
        DocumentSection$inboundSchema,
        DocumentSection$Outbound,
        DocumentSection$outboundSchema,
        DocumentSection$,
        documentSpec4ToJSON,
        documentSpec4FromJSON,
        documentSpec3ToJSON,
        documentSpec3FromJSON,
        documentSpec2ToJSON,
        documentSpec2FromJSON,
        documentSpec1ToJSON,
        documentSpec1FromJSON,
        documentSpecUnionToJSON,
        documentSpecUnionFromJSON,
        DocumentSpecUgcType2,
        DocumentSpec4,
        DocumentSpecUgcType1,
        DocumentSpec3,
        DocumentSpec2,
        DocumentSpec1,
        DocumentSpecUnion,
        DocumentSpecUgcType2$inboundSchema,
        DocumentSpecUgcType2$outboundSchema,
        DocumentSpecUgcType2$,
        DocumentSpec4$inboundSchema,
        DocumentSpec4$Outbound,
        DocumentSpec4$outboundSchema,
        DocumentSpec4$,
        DocumentSpecUgcType1$inboundSchema,
        DocumentSpecUgcType1$outboundSchema,
        DocumentSpecUgcType1$,
        DocumentSpec3$inboundSchema,
        DocumentSpec3$Outbound,
        DocumentSpec3$outboundSchema,
        DocumentSpec3$,
        DocumentSpec2$inboundSchema,
        DocumentSpec2$Outbound,
        DocumentSpec2$outboundSchema,
        DocumentSpec2$,
        DocumentSpec1$inboundSchema,
        DocumentSpec1$Outbound,
        DocumentSpec1$outboundSchema,
        DocumentSpec1$,
        DocumentSpecUnion$inboundSchema,
        DocumentSpecUnion$Outbound,
        DocumentSpecUnion$outboundSchema,
        DocumentSpecUnion$,
        documentStatusResponseToJSON,
        documentStatusResponseFromJSON,
        DocumentStatusResponse,
        DocumentStatusResponse$inboundSchema,
        DocumentStatusResponse$Outbound,
        DocumentStatusResponse$outboundSchema,
        DocumentStatusResponse$,
        DocumentVisibility,
        DocumentVisibility$inboundSchema,
        DocumentVisibility$outboundSchema,
        DocumentVisibility$,
        documentVisibilityOverrideToJSON,
        documentVisibilityOverrideFromJSON,
        DocumentVisibilityOverrideOverride,
        DocumentVisibilityOverride,
        DocumentVisibilityOverrideOverride$inboundSchema,
        DocumentVisibilityOverrideOverride$outboundSchema,
        DocumentVisibilityOverrideOverride$,
        DocumentVisibilityOverride$inboundSchema,
        DocumentVisibilityOverride$Outbound,
        DocumentVisibilityOverride$outboundSchema,
        DocumentVisibilityOverride$,
        documentVisibilityUpdateResultToJSON,
        documentVisibilityUpdateResultFromJSON,
        DocumentVisibilityUpdateResultOverride,
        DocumentVisibilityUpdateResult,
        DocumentVisibilityUpdateResultOverride$inboundSchema,
        DocumentVisibilityUpdateResultOverride$outboundSchema,
        DocumentVisibilityUpdateResultOverride$,
        DocumentVisibilityUpdateResult$inboundSchema,
        DocumentVisibilityUpdateResult$Outbound,
        DocumentVisibilityUpdateResult$outboundSchema,
        DocumentVisibilityUpdateResult$,
        editAnswerRequestToJSON,
        editAnswerRequestFromJSON,
        EditAnswerRequestSourceType,
        EditAnswerRequest,
        EditAnswerRequestSourceType$inboundSchema,
        EditAnswerRequestSourceType$outboundSchema,
        EditAnswerRequestSourceType$,
        EditAnswerRequest$inboundSchema,
        EditAnswerRequest$Outbound,
        EditAnswerRequest$outboundSchema,
        EditAnswerRequest$,
        editCollectionItemRequestToJSON,
        editCollectionItemRequestFromJSON,
        EditCollectionItemRequest,
        EditCollectionItemRequest$inboundSchema,
        EditCollectionItemRequest$Outbound,
        EditCollectionItemRequest$outboundSchema,
        EditCollectionItemRequest$,
        editCollectionItemResponseToJSON,
        editCollectionItemResponseFromJSON,
        EditCollectionItemResponse,
        EditCollectionItemResponse$inboundSchema,
        EditCollectionItemResponse$Outbound,
        EditCollectionItemResponse$outboundSchema,
        EditCollectionItemResponse$,
        editCollectionRequestToJSON,
        editCollectionRequestFromJSON,
        EditCollectionRequest,
        EditCollectionRequest$inboundSchema,
        EditCollectionRequest$Outbound,
        EditCollectionRequest$outboundSchema,
        EditCollectionRequest$,
        editCollectionResponseToJSON,
        editCollectionResponseFromJSON,
        EditCollectionResponseErrorCode,
        EditCollectionResponse,
        EditCollectionResponseErrorCode$inboundSchema,
        EditCollectionResponseErrorCode$outboundSchema,
        EditCollectionResponseErrorCode$,
        EditCollectionResponse$inboundSchema,
        EditCollectionResponse$Outbound,
        EditCollectionResponse$outboundSchema,
        EditCollectionResponse$,
        editPinRequestToJSON,
        editPinRequestFromJSON,
        EditPinRequest,
        EditPinRequest$inboundSchema,
        EditPinRequest$Outbound,
        EditPinRequest$outboundSchema,
        EditPinRequest$,
        employeeInfoDefinitionToJSON,
        employeeInfoDefinitionFromJSON,
        EmployeeInfoDefinition,
        EmployeeInfoDefinition$inboundSchema,
        EmployeeInfoDefinition$Outbound,
        EmployeeInfoDefinition$outboundSchema,
        EmployeeInfoDefinition$,
        employeeTeamInfoToJSON,
        employeeTeamInfoFromJSON,
        EmployeeTeamInfo,
        EmployeeTeamInfo$inboundSchema,
        EmployeeTeamInfo$Outbound,
        EmployeeTeamInfo$outboundSchema,
        EmployeeTeamInfo$,
        EntitiesSortOrder,
        EntitiesSortOrder$inboundSchema,
        EntitiesSortOrder$outboundSchema,
        EntitiesSortOrder$,
        entityRelationshipToJSON,
        entityRelationshipFromJSON,
        EntityRelationship,
        EntityRelationship$inboundSchema,
        EntityRelationship$Outbound,
        EntityRelationship$outboundSchema,
        EntityRelationship$,
        EntityType,
        EntityType$inboundSchema,
        EntityType$outboundSchema,
        EntityType$,
        errorMessageToJSON,
        errorMessageFromJSON,
        ErrorMessage,
        ErrorMessage$inboundSchema,
        ErrorMessage$Outbound,
        ErrorMessage$outboundSchema,
        ErrorMessage$,
        eventClassificationToJSON,
        eventClassificationFromJSON,
        EventClassification,
        EventClassification$inboundSchema,
        EventClassification$Outbound,
        EventClassification$outboundSchema,
        EventClassification$,
        EventClassificationName,
        EventClassificationName$inboundSchema,
        EventClassificationName$outboundSchema,
        EventClassificationName$,
        EventStrategyName,
        EventStrategyName$inboundSchema,
        EventStrategyName$outboundSchema,
        EventStrategyName$,
        externalSharingOptionsToJSON,
        externalSharingOptionsFromJSON,
        ExternalSharingOptions,
        ExternalSharingOptions$inboundSchema,
        ExternalSharingOptions$Outbound,
        ExternalSharingOptions$outboundSchema,
        ExternalSharingOptions$,
        externalShortcutToJSON,
        externalShortcutFromJSON,
        ExternalShortcut,
        ExternalShortcut$inboundSchema,
        ExternalShortcut$Outbound,
        ExternalShortcut$outboundSchema,
        ExternalShortcut$,
        extractedQnAToJSON,
        extractedQnAFromJSON,
        ExtractedQnA,
        ExtractedQnA$inboundSchema,
        ExtractedQnA$Outbound,
        ExtractedQnA$outboundSchema,
        ExtractedQnA$,
        facetBucketToJSON,
        facetBucketFromJSON,
        FacetBucket,
        FacetBucket$inboundSchema,
        FacetBucket$Outbound,
        FacetBucket$outboundSchema,
        FacetBucket$,
        facetBucketFilterToJSON,
        facetBucketFilterFromJSON,
        FacetBucketFilter,
        FacetBucketFilter$inboundSchema,
        FacetBucketFilter$Outbound,
        FacetBucketFilter$outboundSchema,
        FacetBucketFilter$,
        facetFilterToJSON,
        facetFilterFromJSON,
        FacetFilter,
        FacetFilter$inboundSchema,
        FacetFilter$Outbound,
        FacetFilter$outboundSchema,
        FacetFilter$,
        facetFilterSetToJSON,
        facetFilterSetFromJSON,
        FacetFilterSet,
        FacetFilterSet$inboundSchema,
        FacetFilterSet$Outbound,
        FacetFilterSet$outboundSchema,
        FacetFilterSet$,
        facetFilterValueToJSON,
        facetFilterValueFromJSON,
        RelationType,
        FacetFilterValue,
        RelationType$inboundSchema,
        RelationType$outboundSchema,
        RelationType$,
        FacetFilterValue$inboundSchema,
        FacetFilterValue$Outbound,
        FacetFilterValue$outboundSchema,
        FacetFilterValue$,
        facetResultToJSON,
        facetResultFromJSON,
        FacetResult,
        FacetResult$inboundSchema,
        FacetResult$Outbound,
        FacetResult$outboundSchema,
        FacetResult$,
        facetValueToJSON,
        facetValueFromJSON,
        FacetValue,
        FacetValue$inboundSchema,
        FacetValue$Outbound,
        FacetValue$outboundSchema,
        FacetValue$,
        favoriteInfoToJSON,
        favoriteInfoFromJSON,
        FavoriteInfo,
        FavoriteInfo$inboundSchema,
        FavoriteInfo$Outbound,
        FavoriteInfo$outboundSchema,
        FavoriteInfo$,
        feedbackToJSON,
        feedbackFromJSON,
        FeedbackCategory,
        Event_2 as Event,
        FeedbackChannel,
        Feedback,
        FeedbackCategory$inboundSchema,
        FeedbackCategory$outboundSchema,
        FeedbackCategory$,
        Event$inboundSchema,
        Event$outboundSchema,
        Event$,
        FeedbackChannel$inboundSchema,
        FeedbackChannel$outboundSchema,
        FeedbackChannel$,
        Feedback$inboundSchema,
        Feedback$Outbound,
        Feedback$outboundSchema,
        Feedback$,
        resultDocumentToJSON,
        resultDocumentFromJSON,
        feedbackChatExchangeToJSON,
        feedbackChatExchangeFromJSON,
        ResultDocument,
        FeedbackChatExchange,
        ResultDocument$inboundSchema,
        ResultDocument$Outbound,
        ResultDocument$outboundSchema,
        ResultDocument$,
        FeedbackChatExchange$inboundSchema,
        FeedbackChatExchange$Outbound,
        FeedbackChatExchange$outboundSchema,
        FeedbackChatExchange$,
        uiConfigToJSON,
        uiConfigFromJSON,
        feedEntryToJSON,
        feedEntryFromJSON,
        Format,
        UiConfig,
        JustificationType,
        FeedEntry,
        Format$inboundSchema,
        Format$outboundSchema,
        Format$,
        UiConfig$inboundSchema,
        UiConfig$Outbound,
        UiConfig$outboundSchema,
        UiConfig$,
        JustificationType$inboundSchema,
        JustificationType$outboundSchema,
        JustificationType$,
        FeedEntry$inboundSchema,
        FeedEntry$Outbound,
        FeedEntry$outboundSchema,
        FeedEntry$,
        feedRequestToJSON,
        feedRequestFromJSON,
        FeedRequestCategory,
        FeedRequest,
        FeedRequestCategory$inboundSchema,
        FeedRequestCategory$outboundSchema,
        FeedRequestCategory$,
        FeedRequest$inboundSchema,
        FeedRequest$Outbound,
        FeedRequest$outboundSchema,
        FeedRequest$,
        categoryToResultSizeToJSON,
        categoryToResultSizeFromJSON,
        feedRequestOptionsToJSON,
        feedRequestOptionsFromJSON,
        CategoryToResultSize,
        FeedRequestOptions,
        CategoryToResultSize$inboundSchema,
        CategoryToResultSize$Outbound,
        CategoryToResultSize$outboundSchema,
        CategoryToResultSize$,
        FeedRequestOptions$inboundSchema,
        FeedRequestOptions$Outbound,
        FeedRequestOptions$outboundSchema,
        FeedRequestOptions$,
        feedResponseToJSON,
        feedResponseFromJSON,
        FeedResponse,
        FeedResponse$inboundSchema,
        FeedResponse$Outbound,
        FeedResponse$outboundSchema,
        FeedResponse$,
        feedResultToJSON,
        feedResultFromJSON,
        FeedResultCategory,
        FeedResult,
        FeedResultCategory$inboundSchema,
        FeedResultCategory$outboundSchema,
        FeedResultCategory$,
        FeedResult$inboundSchema,
        FeedResult$Outbound,
        FeedResult$outboundSchema,
        FeedResult$,
        followupActionToJSON,
        followupActionFromJSON,
        FollowupAction,
        FollowupAction$inboundSchema,
        FollowupAction$Outbound,
        FollowupAction$outboundSchema,
        FollowupAction$,
        generatedAttachmentToJSON,
        generatedAttachmentFromJSON,
        GeneratedAttachment,
        GeneratedAttachment$inboundSchema,
        GeneratedAttachment$Outbound,
        GeneratedAttachment$outboundSchema,
        GeneratedAttachment$,
        generatedAttachmentContentToJSON,
        generatedAttachmentContentFromJSON,
        GeneratedAttachmentContent,
        GeneratedAttachmentContent$inboundSchema,
        GeneratedAttachmentContent$Outbound,
        GeneratedAttachmentContent$outboundSchema,
        GeneratedAttachmentContent$,
        generatedQnaToJSON,
        generatedQnaFromJSON,
        GeneratedQnaStatus,
        GeneratedQna,
        GeneratedQnaStatus$inboundSchema,
        GeneratedQnaStatus$outboundSchema,
        GeneratedQnaStatus$,
        GeneratedQna$inboundSchema,
        GeneratedQna$Outbound,
        GeneratedQna$outboundSchema,
        GeneratedQna$,
        getAnswerErrorToJSON,
        getAnswerErrorFromJSON,
        GetAnswerErrorErrorType,
        GetAnswerError,
        GetAnswerErrorErrorType$inboundSchema,
        GetAnswerErrorErrorType$outboundSchema,
        GetAnswerErrorErrorType$,
        GetAnswerError$inboundSchema,
        GetAnswerError$Outbound,
        GetAnswerError$outboundSchema,
        GetAnswerError$,
        getAnswerRequestToJSON,
        getAnswerRequestFromJSON,
        GetAnswerRequest,
        GetAnswerRequest$inboundSchema,
        GetAnswerRequest$Outbound,
        GetAnswerRequest$outboundSchema,
        GetAnswerRequest$,
        getAnswerResponseToJSON,
        getAnswerResponseFromJSON,
        GetAnswerResponse,
        GetAnswerResponse$inboundSchema,
        GetAnswerResponse$Outbound,
        GetAnswerResponse$outboundSchema,
        GetAnswerResponse$,
        getChatApplicationRequestToJSON,
        getChatApplicationRequestFromJSON,
        GetChatApplicationRequest,
        GetChatApplicationRequest$inboundSchema,
        GetChatApplicationRequest$Outbound,
        GetChatApplicationRequest$outboundSchema,
        GetChatApplicationRequest$,
        getChatApplicationResponseToJSON,
        getChatApplicationResponseFromJSON,
        GetChatApplicationResponse,
        GetChatApplicationResponse$inboundSchema,
        GetChatApplicationResponse$Outbound,
        GetChatApplicationResponse$outboundSchema,
        GetChatApplicationResponse$,
        getChatFilesRequestToJSON,
        getChatFilesRequestFromJSON,
        GetChatFilesRequest,
        GetChatFilesRequest$inboundSchema,
        GetChatFilesRequest$Outbound,
        GetChatFilesRequest$outboundSchema,
        GetChatFilesRequest$,
        getChatFilesResponseToJSON,
        getChatFilesResponseFromJSON,
        GetChatFilesResponse,
        GetChatFilesResponse$inboundSchema,
        GetChatFilesResponse$Outbound,
        GetChatFilesResponse$outboundSchema,
        GetChatFilesResponse$,
        getChatRequestToJSON,
        getChatRequestFromJSON,
        GetChatRequest,
        GetChatRequest$inboundSchema,
        GetChatRequest$Outbound,
        GetChatRequest$outboundSchema,
        GetChatRequest$,
        getChatResponseToJSON,
        getChatResponseFromJSON,
        GetChatResponse,
        GetChatResponse$inboundSchema,
        GetChatResponse$Outbound,
        GetChatResponse$outboundSchema,
        GetChatResponse$,
        getCollectionRequestToJSON,
        getCollectionRequestFromJSON,
        GetCollectionRequest,
        GetCollectionRequest$inboundSchema,
        GetCollectionRequest$Outbound,
        GetCollectionRequest$outboundSchema,
        GetCollectionRequest$,
        getCollectionResponseToJSON,
        getCollectionResponseFromJSON,
        GetCollectionResponse,
        GetCollectionResponse$inboundSchema,
        GetCollectionResponse$Outbound,
        GetCollectionResponse$outboundSchema,
        GetCollectionResponse$,
        getDatasourceConfigRequestToJSON,
        getDatasourceConfigRequestFromJSON,
        GetDatasourceConfigRequest,
        GetDatasourceConfigRequest$inboundSchema,
        GetDatasourceConfigRequest$Outbound,
        GetDatasourceConfigRequest$outboundSchema,
        GetDatasourceConfigRequest$,
        getDlpReportResponseToJSON,
        getDlpReportResponseFromJSON,
        GetDlpReportResponse,
        GetDlpReportResponse$inboundSchema,
        GetDlpReportResponse$Outbound,
        GetDlpReportResponse$outboundSchema,
        GetDlpReportResponse$,
        getDocPermissionsRequestToJSON,
        getDocPermissionsRequestFromJSON,
        GetDocPermissionsRequest,
        GetDocPermissionsRequest$inboundSchema,
        GetDocPermissionsRequest$Outbound,
        GetDocPermissionsRequest$outboundSchema,
        GetDocPermissionsRequest$,
        getDocPermissionsResponseToJSON,
        getDocPermissionsResponseFromJSON,
        GetDocPermissionsResponse,
        GetDocPermissionsResponse$inboundSchema,
        GetDocPermissionsResponse$Outbound,
        GetDocPermissionsResponse$outboundSchema,
        GetDocPermissionsResponse$,
        getDocumentCountRequestToJSON,
        getDocumentCountRequestFromJSON,
        GetDocumentCountRequest,
        GetDocumentCountRequest$inboundSchema,
        GetDocumentCountRequest$Outbound,
        GetDocumentCountRequest$outboundSchema,
        GetDocumentCountRequest$,
        getDocumentCountResponseToJSON,
        getDocumentCountResponseFromJSON,
        GetDocumentCountResponse,
        GetDocumentCountResponse$inboundSchema,
        GetDocumentCountResponse$Outbound,
        GetDocumentCountResponse$outboundSchema,
        GetDocumentCountResponse$,
        getDocumentsByFacetsRequestToJSON,
        getDocumentsByFacetsRequestFromJSON,
        GetDocumentsByFacetsRequest,
        GetDocumentsByFacetsRequest$inboundSchema,
        GetDocumentsByFacetsRequest$Outbound,
        GetDocumentsByFacetsRequest$outboundSchema,
        GetDocumentsByFacetsRequest$,
        getDocumentsByFacetsResponseToJSON,
        getDocumentsByFacetsResponseFromJSON,
        GetDocumentsByFacetsResponse,
        GetDocumentsByFacetsResponse$inboundSchema,
        GetDocumentsByFacetsResponse$Outbound,
        GetDocumentsByFacetsResponse$outboundSchema,
        GetDocumentsByFacetsResponse$,
        getDocumentsRequestToJSON,
        getDocumentsRequestFromJSON,
        GetDocumentsRequestIncludeField,
        GetDocumentsRequest,
        GetDocumentsRequestIncludeField$inboundSchema,
        GetDocumentsRequestIncludeField$outboundSchema,
        GetDocumentsRequestIncludeField$,
        GetDocumentsRequest$inboundSchema,
        GetDocumentsRequest$Outbound,
        GetDocumentsRequest$outboundSchema,
        GetDocumentsRequest$,
        getDocumentsResponseToJSON,
        getDocumentsResponseFromJSON,
        GetDocumentsResponse,
        GetDocumentsResponse$inboundSchema,
        GetDocumentsResponse$Outbound,
        GetDocumentsResponse$outboundSchema,
        GetDocumentsResponse$,
        getDocumentStatusRequestToJSON,
        getDocumentStatusRequestFromJSON,
        GetDocumentStatusRequest,
        GetDocumentStatusRequest$inboundSchema,
        GetDocumentStatusRequest$Outbound,
        GetDocumentStatusRequest$outboundSchema,
        GetDocumentStatusRequest$,
        getDocumentStatusResponseToJSON,
        getDocumentStatusResponseFromJSON,
        GetDocumentStatusResponse,
        GetDocumentStatusResponse$inboundSchema,
        GetDocumentStatusResponse$Outbound,
        GetDocumentStatusResponse$outboundSchema,
        GetDocumentStatusResponse$,
        getDocumentVisibilityOverridesResponseToJSON,
        getDocumentVisibilityOverridesResponseFromJSON,
        GetDocumentVisibilityOverridesResponse,
        GetDocumentVisibilityOverridesResponse$inboundSchema,
        GetDocumentVisibilityOverridesResponse$Outbound,
        GetDocumentVisibilityOverridesResponse$outboundSchema,
        GetDocumentVisibilityOverridesResponse$,
        getPinRequestToJSON,
        getPinRequestFromJSON,
        GetPinRequest,
        GetPinRequest$inboundSchema,
        GetPinRequest$Outbound,
        GetPinRequest$outboundSchema,
        GetPinRequest$,
        getPinResponseToJSON,
        getPinResponseFromJSON,
        GetPinResponse,
        GetPinResponse$inboundSchema,
        GetPinResponse$Outbound,
        GetPinResponse$outboundSchema,
        GetPinResponse$,
        getShortcutRequestToJSON,
        getShortcutRequestFromJSON,
        getShortcutRequestUnionToJSON,
        getShortcutRequestUnionFromJSON,
        GetShortcutRequest,
        GetShortcutRequestUnion,
        GetShortcutRequest$inboundSchema,
        GetShortcutRequest$Outbound,
        GetShortcutRequest$outboundSchema,
        GetShortcutRequest$,
        GetShortcutRequestUnion$inboundSchema,
        GetShortcutRequestUnion$Outbound,
        GetShortcutRequestUnion$outboundSchema,
        GetShortcutRequestUnion$,
        getShortcutResponseToJSON,
        getShortcutResponseFromJSON,
        GetShortcutResponse,
        GetShortcutResponse$inboundSchema,
        GetShortcutResponse$Outbound,
        GetShortcutResponse$outboundSchema,
        GetShortcutResponse$,
        getUserCountRequestToJSON,
        getUserCountRequestFromJSON,
        GetUserCountRequest,
        GetUserCountRequest$inboundSchema,
        GetUserCountRequest$Outbound,
        GetUserCountRequest$outboundSchema,
        GetUserCountRequest$,
        getUserCountResponseToJSON,
        getUserCountResponseFromJSON,
        GetUserCountResponse,
        GetUserCountResponse$inboundSchema,
        GetUserCountResponse$Outbound,
        GetUserCountResponse$outboundSchema,
        GetUserCountResponse$,
        gleanAssistInsightsResponseToJSON,
        gleanAssistInsightsResponseFromJSON,
        GleanAssistInsightsResponse,
        GleanAssistInsightsResponse$inboundSchema,
        GleanAssistInsightsResponse$Outbound,
        GleanAssistInsightsResponse$outboundSchema,
        GleanAssistInsightsResponse$,
        gleanDataErrorToJSON,
        gleanDataErrorFromJSON,
        GleanDataError,
        GleanDataError$inboundSchema,
        GleanDataError$Outbound,
        GleanDataError$outboundSchema,
        GleanDataError$,
        grantPermissionToJSON,
        grantPermissionFromJSON,
        GrantPermission,
        GrantPermission$inboundSchema,
        GrantPermission$Outbound,
        GrantPermission$outboundSchema,
        GrantPermission$,
        greenlistUsersRequestToJSON,
        greenlistUsersRequestFromJSON,
        GreenlistUsersRequest,
        GreenlistUsersRequest$inboundSchema,
        GreenlistUsersRequest$Outbound,
        GreenlistUsersRequest$outboundSchema,
        GreenlistUsersRequest$,
        groupToJSON,
        groupFromJSON,
        Group,
        Group$inboundSchema,
        Group$Outbound,
        Group$outboundSchema,
        Group$,
        GroupType,
        GroupType$inboundSchema,
        GroupType$outboundSchema,
        GroupType$,
        hotwordToJSON,
        hotwordFromJSON,
        Hotword,
        Hotword$inboundSchema,
        Hotword$Outbound,
        Hotword$outboundSchema,
        Hotword$,
        hotwordProximityToJSON,
        hotwordProximityFromJSON,
        HotwordProximity,
        HotwordProximity$inboundSchema,
        HotwordProximity$Outbound,
        HotwordProximity$outboundSchema,
        HotwordProximity$,
        iconConfigToJSON,
        iconConfigFromJSON,
        IconType,
        IconConfig,
        IconType$inboundSchema,
        IconType$outboundSchema,
        IconType$,
        IconConfig$inboundSchema,
        IconConfig$Outbound,
        IconConfig$outboundSchema,
        IconConfig$,
        indexDocumentRequestToJSON,
        indexDocumentRequestFromJSON,
        IndexDocumentRequest,
        IndexDocumentRequest$inboundSchema,
        IndexDocumentRequest$Outbound,
        IndexDocumentRequest$outboundSchema,
        IndexDocumentRequest$,
        indexDocumentsRequestToJSON,
        indexDocumentsRequestFromJSON,
        IndexDocumentsRequest,
        IndexDocumentsRequest$inboundSchema,
        IndexDocumentsRequest$Outbound,
        IndexDocumentsRequest$outboundSchema,
        IndexDocumentsRequest$,
        indexEmployeeRequestToJSON,
        indexEmployeeRequestFromJSON,
        IndexEmployeeRequest,
        IndexEmployeeRequest$inboundSchema,
        IndexEmployeeRequest$Outbound,
        IndexEmployeeRequest$outboundSchema,
        IndexEmployeeRequest$,
        indexGroupRequestToJSON,
        indexGroupRequestFromJSON,
        IndexGroupRequest,
        IndexGroupRequest$inboundSchema,
        IndexGroupRequest$Outbound,
        IndexGroupRequest$outboundSchema,
        IndexGroupRequest$,
        indexingShortcutToJSON,
        indexingShortcutFromJSON,
        IndexingShortcut,
        IndexingShortcut$inboundSchema,
        IndexingShortcut$Outbound,
        IndexingShortcut$outboundSchema,
        IndexingShortcut$,
        indexMembershipRequestToJSON,
        indexMembershipRequestFromJSON,
        IndexMembershipRequest,
        IndexMembershipRequest$inboundSchema,
        IndexMembershipRequest$Outbound,
        IndexMembershipRequest$outboundSchema,
        IndexMembershipRequest$,
        indexStatusToJSON,
        indexStatusFromJSON,
        IndexStatus,
        IndexStatus$inboundSchema,
        IndexStatus$Outbound,
        IndexStatus$outboundSchema,
        IndexStatus$,
        indexTeamRequestToJSON,
        indexTeamRequestFromJSON,
        IndexTeamRequest,
        IndexTeamRequest$inboundSchema,
        IndexTeamRequest$Outbound,
        IndexTeamRequest$outboundSchema,
        IndexTeamRequest$,
        indexUserRequestToJSON,
        indexUserRequestFromJSON,
        IndexUserRequest,
        IndexUserRequest$inboundSchema,
        IndexUserRequest$Outbound,
        IndexUserRequest$outboundSchema,
        IndexUserRequest$,
        inputOptionsToJSON,
        inputOptionsFromJSON,
        DatasourcesType,
        TimePeriodType,
        InputOptions,
        DatasourcesType$inboundSchema,
        DatasourcesType$outboundSchema,
        DatasourcesType$,
        TimePeriodType$inboundSchema,
        TimePeriodType$outboundSchema,
        TimePeriodType$,
        InputOptions$inboundSchema,
        InputOptions$Outbound,
        InputOptions$outboundSchema,
        InputOptions$,
        insightsAgentsRequestOptionsToJSON,
        insightsAgentsRequestOptionsFromJSON,
        InsightsAgentsRequestOptions,
        InsightsAgentsRequestOptions$inboundSchema,
        InsightsAgentsRequestOptions$Outbound,
        InsightsAgentsRequestOptions$outboundSchema,
        InsightsAgentsRequestOptions$,
        insightsAiAppRequestOptionsToJSON,
        insightsAiAppRequestOptionsFromJSON,
        InsightsAiAppRequestOptions,
        InsightsAiAppRequestOptions$inboundSchema,
        InsightsAiAppRequestOptions$Outbound,
        InsightsAiAppRequestOptions$outboundSchema,
        InsightsAiAppRequestOptions$,
        insightsAssistantRequestToJSON,
        insightsAssistantRequestFromJSON,
        InsightsAssistantRequest,
        InsightsAssistantRequest$inboundSchema,
        InsightsAssistantRequest$Outbound,
        InsightsAssistantRequest$outboundSchema,
        InsightsAssistantRequest$,
        insightsOverviewRequestToJSON,
        insightsOverviewRequestFromJSON,
        InsightsOverviewRequest,
        InsightsOverviewRequest$inboundSchema,
        InsightsOverviewRequest$Outbound,
        InsightsOverviewRequest$outboundSchema,
        InsightsOverviewRequest$,
        insightsRequestToJSON,
        insightsRequestFromJSON,
        InsightsRequestCategory,
        AssistantActivityType,
        InsightsRequest,
        InsightsRequestCategory$inboundSchema,
        InsightsRequestCategory$outboundSchema,
        InsightsRequestCategory$,
        AssistantActivityType$inboundSchema,
        AssistantActivityType$outboundSchema,
        AssistantActivityType$,
        InsightsRequest$inboundSchema,
        InsightsRequest$Outbound,
        InsightsRequest$outboundSchema,
        InsightsRequest$,
        insightsResponseToJSON,
        insightsResponseFromJSON,
        InsightsResponse,
        InsightsResponse$inboundSchema,
        InsightsResponse$Outbound,
        InsightsResponse$outboundSchema,
        InsightsResponse$,
        invalidOperatorValueErrorToJSON,
        invalidOperatorValueErrorFromJSON,
        InvalidOperatorValueError,
        InvalidOperatorValueError$inboundSchema,
        InvalidOperatorValueError$Outbound,
        InvalidOperatorValueError$outboundSchema,
        InvalidOperatorValueError$,
        inviteInfoToJSON,
        inviteInfoFromJSON,
        InviteInfo,
        InviteInfo$inboundSchema,
        InviteInfo$Outbound,
        InviteInfo$outboundSchema,
        InviteInfo$,
        labeledCountInfoToJSON,
        labeledCountInfoFromJSON,
        LabeledCountInfo,
        LabeledCountInfo$inboundSchema,
        LabeledCountInfo$Outbound,
        LabeledCountInfo$outboundSchema,
        LabeledCountInfo$,
        listAnswersRequestToJSON,
        listAnswersRequestFromJSON,
        ListAnswersRequest,
        ListAnswersRequest$inboundSchema,
        ListAnswersRequest$Outbound,
        ListAnswersRequest$outboundSchema,
        ListAnswersRequest$,
        listAnswersResponseToJSON,
        listAnswersResponseFromJSON,
        ListAnswersResponse,
        ListAnswersResponse$inboundSchema,
        ListAnswersResponse$Outbound,
        ListAnswersResponse$outboundSchema,
        ListAnswersResponse$,
        listChatsResponseToJSON,
        listChatsResponseFromJSON,
        ListChatsResponse,
        ListChatsResponse$inboundSchema,
        ListChatsResponse$Outbound,
        ListChatsResponse$outboundSchema,
        ListChatsResponse$,
        listCollectionsRequestToJSON,
        listCollectionsRequestFromJSON,
        ListCollectionsRequest,
        ListCollectionsRequest$inboundSchema,
        ListCollectionsRequest$Outbound,
        ListCollectionsRequest$outboundSchema,
        ListCollectionsRequest$,
        listCollectionsResponseToJSON,
        listCollectionsResponseFromJSON,
        ListCollectionsResponse,
        ListCollectionsResponse$inboundSchema,
        ListCollectionsResponse$Outbound,
        ListCollectionsResponse$outboundSchema,
        ListCollectionsResponse$,
        listDlpReportsResponseToJSON,
        listDlpReportsResponseFromJSON,
        ListDlpReportsResponse,
        ListDlpReportsResponse$inboundSchema,
        ListDlpReportsResponse$Outbound,
        ListDlpReportsResponse$outboundSchema,
        ListDlpReportsResponse$,
        listEntitiesRequestToJSON,
        listEntitiesRequestFromJSON,
        ListEntitiesRequestEntityType,
        ListEntitiesRequestIncludeField,
        RequestType,
        ListEntitiesRequest,
        ListEntitiesRequestEntityType$inboundSchema,
        ListEntitiesRequestEntityType$outboundSchema,
        ListEntitiesRequestEntityType$,
        ListEntitiesRequestIncludeField$inboundSchema,
        ListEntitiesRequestIncludeField$outboundSchema,
        ListEntitiesRequestIncludeField$,
        RequestType$inboundSchema,
        RequestType$outboundSchema,
        RequestType$,
        ListEntitiesRequest$inboundSchema,
        ListEntitiesRequest$Outbound,
        ListEntitiesRequest$outboundSchema,
        ListEntitiesRequest$,
        listEntitiesResponseToJSON,
        listEntitiesResponseFromJSON,
        ListEntitiesResponse,
        ListEntitiesResponse$inboundSchema,
        ListEntitiesResponse$Outbound,
        ListEntitiesResponse$outboundSchema,
        ListEntitiesResponse$,
        listPinsResponseToJSON,
        listPinsResponseFromJSON,
        ListPinsResponse,
        ListPinsResponse$inboundSchema,
        ListPinsResponse$Outbound,
        ListPinsResponse$outboundSchema,
        ListPinsResponse$,
        listShortcutsPaginatedRequestToJSON,
        listShortcutsPaginatedRequestFromJSON,
        ListShortcutsPaginatedRequestIncludeField,
        ListShortcutsPaginatedRequest,
        ListShortcutsPaginatedRequestIncludeField$inboundSchema,
        ListShortcutsPaginatedRequestIncludeField$outboundSchema,
        ListShortcutsPaginatedRequestIncludeField$,
        ListShortcutsPaginatedRequest$inboundSchema,
        ListShortcutsPaginatedRequest$Outbound,
        ListShortcutsPaginatedRequest$outboundSchema,
        ListShortcutsPaginatedRequest$,
        listShortcutsPaginatedResponseToJSON,
        listShortcutsPaginatedResponseFromJSON,
        ListShortcutsPaginatedResponse,
        ListShortcutsPaginatedResponse$inboundSchema,
        ListShortcutsPaginatedResponse$Outbound,
        ListShortcutsPaginatedResponse$outboundSchema,
        ListShortcutsPaginatedResponse$,
        manualFeedbackInfoToJSON,
        manualFeedbackInfoFromJSON,
        ManualFeedbackInfoSource,
        Issue,
        ManualFeedbackInfoVote,
        ManualFeedbackInfo,
        ManualFeedbackInfoSource$inboundSchema,
        ManualFeedbackInfoSource$outboundSchema,
        ManualFeedbackInfoSource$,
        Issue$inboundSchema,
        Issue$outboundSchema,
        Issue$,
        ManualFeedbackInfoVote$inboundSchema,
        ManualFeedbackInfoVote$outboundSchema,
        ManualFeedbackInfoVote$,
        ManualFeedbackInfo$inboundSchema,
        ManualFeedbackInfo$Outbound,
        ManualFeedbackInfo$outboundSchema,
        ManualFeedbackInfo$,
        manualFeedbackSideBySideInfoToJSON,
        manualFeedbackSideBySideInfoFromJSON,
        ManualFeedbackSideBySideInfoSource,
        ManualFeedbackSideBySideInfoVote,
        ManualFeedbackSideBySideInfo,
        ManualFeedbackSideBySideInfoSource$inboundSchema,
        ManualFeedbackSideBySideInfoSource$outboundSchema,
        ManualFeedbackSideBySideInfoSource$,
        ManualFeedbackSideBySideInfoVote$inboundSchema,
        ManualFeedbackSideBySideInfoVote$outboundSchema,
        ManualFeedbackSideBySideInfoVote$,
        ManualFeedbackSideBySideInfo$inboundSchema,
        ManualFeedbackSideBySideInfo$Outbound,
        ManualFeedbackSideBySideInfo$outboundSchema,
        ManualFeedbackSideBySideInfo$,
        meetingToJSON,
        meetingFromJSON,
        Meeting,
        Meeting$inboundSchema,
        Meeting$Outbound,
        Meeting$outboundSchema,
        Meeting$,
        messageTextBlockToJSON,
        messageTextBlockFromJSON,
        messageToJSON,
        messageFromJSON,
        MessageTextBlock,
        Message,
        MessageTextBlock$inboundSchema,
        MessageTextBlock$Outbound,
        MessageTextBlock$outboundSchema,
        MessageTextBlock$,
        Message$inboundSchema,
        Message$Outbound,
        Message$outboundSchema,
        Message$,
        messagesRequestToJSON,
        messagesRequestFromJSON,
        IdType,
        Direction,
        Datasource,
        MessagesRequest,
        IdType$inboundSchema,
        IdType$outboundSchema,
        IdType$,
        Direction$inboundSchema,
        Direction$outboundSchema,
        Direction$,
        Datasource$inboundSchema,
        Datasource$outboundSchema,
        Datasource$,
        MessagesRequest$inboundSchema,
        MessagesRequest$Outbound,
        MessagesRequest$outboundSchema,
        MessagesRequest$,
        messagesResponseToJSON,
        messagesResponseFromJSON,
        MessagesResponse,
        MessagesResponse$inboundSchema,
        MessagesResponse$Outbound,
        MessagesResponse$outboundSchema,
        MessagesResponse$,
        objectDefinitionToJSON,
        objectDefinitionFromJSON,
        DocCategory,
        ObjectDefinition,
        DocCategory$inboundSchema,
        DocCategory$outboundSchema,
        DocCategory$,
        ObjectDefinition$inboundSchema,
        ObjectDefinition$Outbound,
        ObjectDefinition$outboundSchema,
        ObjectDefinition$,
        objectPermissionsToJSON,
        objectPermissionsFromJSON,
        ObjectPermissions,
        ObjectPermissions$inboundSchema,
        ObjectPermissions$Outbound,
        ObjectPermissions$outboundSchema,
        ObjectPermissions$,
        operatorMetadataToJSON,
        operatorMetadataFromJSON,
        OperatorType,
        OperatorMetadata,
        OperatorType$inboundSchema,
        OperatorType$outboundSchema,
        OperatorType$,
        OperatorMetadata$inboundSchema,
        OperatorMetadata$Outbound,
        OperatorMetadata$outboundSchema,
        OperatorMetadata$,
        operatorScopeToJSON,
        operatorScopeFromJSON,
        OperatorScope,
        OperatorScope$inboundSchema,
        OperatorScope$Outbound,
        OperatorScope$outboundSchema,
        OperatorScope$,
        peopleRequestToJSON,
        peopleRequestFromJSON,
        PeopleRequestIncludeField,
        IncludeType,
        PeopleRequest,
        PeopleRequestIncludeField$inboundSchema,
        PeopleRequestIncludeField$outboundSchema,
        PeopleRequestIncludeField$,
        IncludeType$inboundSchema,
        IncludeType$outboundSchema,
        IncludeType$,
        PeopleRequest$inboundSchema,
        PeopleRequest$Outbound,
        PeopleRequest$outboundSchema,
        PeopleRequest$,
        peopleResponseToJSON,
        peopleResponseFromJSON,
        PeopleResponse,
        PeopleResponse$inboundSchema,
        PeopleResponse$Outbound,
        PeopleResponse$outboundSchema,
        PeopleResponse$,
        periodToJSON,
        periodFromJSON,
        Period,
        Period$inboundSchema,
        Period$Outbound,
        Period$outboundSchema,
        Period$,
        permissionsToJSON,
        permissionsFromJSON,
        Permissions_2 as Permissions,
        Permissions$inboundSchema,
        Permissions$Outbound,
        Permissions$outboundSchema,
        Permissions$,
        permissionsGroupIntersectionDefinitionToJSON,
        permissionsGroupIntersectionDefinitionFromJSON,
        PermissionsGroupIntersectionDefinition,
        PermissionsGroupIntersectionDefinition$inboundSchema,
        PermissionsGroupIntersectionDefinition$Outbound,
        PermissionsGroupIntersectionDefinition$outboundSchema,
        PermissionsGroupIntersectionDefinition$,
        personToJSON,
        personFromJSON,
        Person,
        Person$inboundSchema,
        Person$Outbound,
        Person$outboundSchema,
        Person$,
        personDistanceToJSON,
        personDistanceFromJSON,
        PersonDistance,
        PersonDistance$inboundSchema,
        PersonDistance$Outbound,
        PersonDistance$outboundSchema,
        PersonDistance$,
        personMetadataToJSON,
        personMetadataFromJSON,
        PersonMetadataType,
        PersonMetadata,
        PersonMetadataType$inboundSchema,
        PersonMetadataType$outboundSchema,
        PersonMetadataType$,
        PersonMetadata$inboundSchema,
        PersonMetadata$Outbound,
        PersonMetadata$outboundSchema,
        PersonMetadata$,
        personObjectToJSON,
        personObjectFromJSON,
        PersonObject,
        PersonObject$inboundSchema,
        PersonObject$Outbound,
        PersonObject$outboundSchema,
        PersonObject$,
        personTeamToJSON,
        personTeamFromJSON,
        PersonTeamRelationship,
        PersonTeam,
        PersonTeamRelationship$inboundSchema,
        PersonTeamRelationship$outboundSchema,
        PersonTeamRelationship$,
        PersonTeam$inboundSchema,
        PersonTeam$Outbound,
        PersonTeam$outboundSchema,
        PersonTeam$,
        personToTeamRelationshipToJSON,
        personToTeamRelationshipFromJSON,
        PersonToTeamRelationshipRelationship,
        PersonToTeamRelationship,
        PersonToTeamRelationshipRelationship$inboundSchema,
        PersonToTeamRelationshipRelationship$outboundSchema,
        PersonToTeamRelationshipRelationship$,
        PersonToTeamRelationship$inboundSchema,
        PersonToTeamRelationship$Outbound,
        PersonToTeamRelationship$outboundSchema,
        PersonToTeamRelationship$,
        pinDocumentToJSON,
        pinDocumentFromJSON,
        PinDocument,
        PinDocument$inboundSchema,
        PinDocument$Outbound,
        PinDocument$outboundSchema,
        PinDocument$,
        pinRequestToJSON,
        pinRequestFromJSON,
        PinRequest,
        PinRequest$inboundSchema,
        PinRequest$Outbound,
        PinRequest$outboundSchema,
        PinRequest$,
        possibleValueToJSON,
        possibleValueFromJSON,
        PossibleValue,
        PossibleValue$inboundSchema,
        PossibleValue$Outbound,
        PossibleValue$outboundSchema,
        PossibleValue$,
        processAllDocumentsRequestToJSON,
        processAllDocumentsRequestFromJSON,
        ProcessAllDocumentsRequest,
        ProcessAllDocumentsRequest$inboundSchema,
        ProcessAllDocumentsRequest$Outbound,
        ProcessAllDocumentsRequest$outboundSchema,
        ProcessAllDocumentsRequest$,
        processAllMembershipsRequestToJSON,
        processAllMembershipsRequestFromJSON,
        ProcessAllMembershipsRequest,
        ProcessAllMembershipsRequest$inboundSchema,
        ProcessAllMembershipsRequest$Outbound,
        ProcessAllMembershipsRequest$outboundSchema,
        ProcessAllMembershipsRequest$,
        processingHistoryEventToJSON,
        processingHistoryEventFromJSON,
        ProcessingHistoryEvent,
        ProcessingHistoryEvent$inboundSchema,
        ProcessingHistoryEvent$Outbound,
        ProcessingHistoryEvent$outboundSchema,
        ProcessingHistoryEvent$,
        promptTemplateToJSON,
        promptTemplateFromJSON,
        PromptTemplate,
        PromptTemplate$inboundSchema,
        PromptTemplate$Outbound,
        PromptTemplate$outboundSchema,
        PromptTemplate$,
        promptTemplateResultToJSON,
        promptTemplateResultFromJSON,
        PromptTemplateResult,
        PromptTemplateResult$inboundSchema,
        PromptTemplateResult$Outbound,
        PromptTemplateResult$outboundSchema,
        PromptTemplateResult$,
        propertyDefinitionToJSON,
        propertyDefinitionFromJSON,
        PropertyType,
        UiOptions,
        PropertyDefinition_2 as PropertyDefinition,
        PropertyType$inboundSchema,
        PropertyType$outboundSchema,
        PropertyType$,
        UiOptions$inboundSchema,
        UiOptions$outboundSchema,
        UiOptions$,
        PropertyDefinition$inboundSchema,
        PropertyDefinition$Outbound,
        PropertyDefinition$outboundSchema,
        PropertyDefinition$,
        propertyGroupToJSON,
        propertyGroupFromJSON,
        PropertyGroup,
        PropertyGroup$inboundSchema,
        PropertyGroup$Outbound,
        PropertyGroup$outboundSchema,
        PropertyGroup$,
        queryInsightToJSON,
        queryInsightFromJSON,
        QueryInsight,
        QueryInsight$inboundSchema,
        QueryInsight$Outbound,
        QueryInsight$outboundSchema,
        QueryInsight$,
        queryInsightsResponseToJSON,
        queryInsightsResponseFromJSON,
        QueryInsightsResponse,
        QueryInsightsResponse$inboundSchema,
        QueryInsightsResponse$Outbound,
        QueryInsightsResponse$outboundSchema,
        QueryInsightsResponse$,
        querySuggestionToJSON,
        querySuggestionFromJSON,
        QuerySuggestion,
        QuerySuggestion$inboundSchema,
        QuerySuggestion$Outbound,
        QuerySuggestion$outboundSchema,
        QuerySuggestion$,
        querySuggestionListToJSON,
        querySuggestionListFromJSON,
        QuerySuggestionList,
        QuerySuggestionList$inboundSchema,
        QuerySuggestionList$Outbound,
        QuerySuggestionList$outboundSchema,
        QuerySuggestionList$,
        quicklinkToJSON,
        quicklinkFromJSON,
        Scope,
        Quicklink,
        Scope$inboundSchema,
        Scope$outboundSchema,
        Scope$,
        Quicklink$inboundSchema,
        Quicklink$Outbound,
        Quicklink$outboundSchema,
        Quicklink$,
        reactionToJSON,
        reactionFromJSON,
        Reaction,
        Reaction$inboundSchema,
        Reaction$Outbound,
        Reaction$outboundSchema,
        Reaction$,
        readPermissionToJSON,
        readPermissionFromJSON,
        ReadPermission,
        ReadPermission$inboundSchema,
        ReadPermission$Outbound,
        ReadPermission$outboundSchema,
        ReadPermission$,
        recommendationsRequestToJSON,
        recommendationsRequestFromJSON,
        RecommendationsRequest,
        RecommendationsRequest$inboundSchema,
        RecommendationsRequest$Outbound,
        RecommendationsRequest$outboundSchema,
        RecommendationsRequest$,
        recommendationsRequestOptionsToJSON,
        recommendationsRequestOptionsFromJSON,
        RecommendationsRequestOptions,
        RecommendationsRequestOptions$inboundSchema,
        RecommendationsRequestOptions$Outbound,
        RecommendationsRequestOptions$outboundSchema,
        RecommendationsRequestOptions$,
        referenceRangeToJSON,
        referenceRangeFromJSON,
        ReferenceRange,
        ReferenceRange$inboundSchema,
        ReferenceRange$Outbound,
        ReferenceRange$outboundSchema,
        ReferenceRange$,
        relatedDocumentsToJSON,
        relatedDocumentsFromJSON,
        Relation,
        RelatedDocuments,
        Relation$inboundSchema,
        Relation$outboundSchema,
        Relation$,
        RelatedDocuments$inboundSchema,
        RelatedDocuments$Outbound,
        RelatedDocuments$outboundSchema,
        RelatedDocuments$,
        relatedObjectMetadataToJSON,
        relatedObjectMetadataFromJSON,
        relatedObjectToJSON,
        relatedObjectFromJSON,
        RelatedObjectMetadata,
        RelatedObject,
        RelatedObjectMetadata$inboundSchema,
        RelatedObjectMetadata$Outbound,
        RelatedObjectMetadata$outboundSchema,
        RelatedObjectMetadata$,
        RelatedObject$inboundSchema,
        RelatedObject$Outbound,
        RelatedObject$outboundSchema,
        RelatedObject$,
        relatedObjectEdgeToJSON,
        relatedObjectEdgeFromJSON,
        RelatedObjectEdge,
        RelatedObjectEdge$inboundSchema,
        RelatedObjectEdge$Outbound,
        RelatedObjectEdge$outboundSchema,
        RelatedObjectEdge$,
        relatedQuestionToJSON,
        relatedQuestionFromJSON,
        RelatedQuestion,
        RelatedQuestion$inboundSchema,
        RelatedQuestion$Outbound,
        RelatedQuestion$outboundSchema,
        RelatedQuestion$,
        reminderToJSON,
        reminderFromJSON,
        Reminder,
        Reminder$inboundSchema,
        Reminder$Outbound,
        Reminder$outboundSchema,
        Reminder$,
        reminderRequestToJSON,
        reminderRequestFromJSON,
        ReminderRequest,
        ReminderRequest$inboundSchema,
        ReminderRequest$Outbound,
        ReminderRequest$outboundSchema,
        ReminderRequest$,
        reportStatusResponseToJSON,
        reportStatusResponseFromJSON,
        ReportStatusResponseStatus,
        ReportStatusResponse,
        ReportStatusResponseStatus$inboundSchema,
        ReportStatusResponseStatus$outboundSchema,
        ReportStatusResponseStatus$,
        ReportStatusResponse$inboundSchema,
        ReportStatusResponse$Outbound,
        ReportStatusResponse$outboundSchema,
        ReportStatusResponse$,
        restrictionFiltersToJSON,
        restrictionFiltersFromJSON,
        RestrictionFilters,
        RestrictionFilters$inboundSchema,
        RestrictionFilters$Outbound,
        RestrictionFilters$outboundSchema,
        RestrictionFilters$,
        resultsDescriptionToJSON,
        resultsDescriptionFromJSON,
        ResultsDescription,
        ResultsDescription$inboundSchema,
        ResultsDescription$Outbound,
        ResultsDescription$outboundSchema,
        ResultsDescription$,
        resultsResponseToJSON,
        resultsResponseFromJSON,
        ResultsResponse,
        ResultsResponse$inboundSchema,
        ResultsResponse$Outbound,
        ResultsResponse$outboundSchema,
        ResultsResponse$,
        resultTabToJSON,
        resultTabFromJSON,
        ResultTab,
        ResultTab$inboundSchema,
        ResultTab$Outbound,
        ResultTab$outboundSchema,
        ResultTab$,
        rotateTokenResponseToJSON,
        rotateTokenResponseFromJSON,
        RotateTokenResponse,
        RotateTokenResponse$inboundSchema,
        RotateTokenResponse$Outbound,
        RotateTokenResponse$outboundSchema,
        RotateTokenResponse$,
        ScopeType,
        ScopeType$inboundSchema,
        ScopeType$outboundSchema,
        ScopeType$,
        searchAgentsRequestToJSON,
        searchAgentsRequestFromJSON,
        SearchAgentsRequest,
        SearchAgentsRequest$inboundSchema,
        SearchAgentsRequest$Outbound,
        SearchAgentsRequest$outboundSchema,
        SearchAgentsRequest$,
        searchAgentsResponseToJSON,
        searchAgentsResponseFromJSON,
        SearchAgentsResponse,
        SearchAgentsResponse$inboundSchema,
        SearchAgentsResponse$Outbound,
        SearchAgentsResponse$outboundSchema,
        SearchAgentsResponse$,
        searchProviderInfoToJSON,
        searchProviderInfoFromJSON,
        SearchProviderInfo,
        SearchProviderInfo$inboundSchema,
        SearchProviderInfo$Outbound,
        SearchProviderInfo$outboundSchema,
        SearchProviderInfo$,
        searchRequestToJSON,
        searchRequestFromJSON,
        SearchRequest,
        SearchRequest$inboundSchema,
        SearchRequest$Outbound,
        SearchRequest$outboundSchema,
        SearchRequest$,
        searchRequestInputDetailsToJSON,
        searchRequestInputDetailsFromJSON,
        SearchRequestInputDetails,
        SearchRequestInputDetails$inboundSchema,
        SearchRequestInputDetails$Outbound,
        SearchRequestInputDetails$outboundSchema,
        SearchRequestInputDetails$,
        searchRequestOptionsToJSON,
        searchRequestOptionsFromJSON,
        ResponseHint,
        SearchRequestOptions,
        ResponseHint$inboundSchema,
        ResponseHint$outboundSchema,
        ResponseHint$,
        SearchRequestOptions$inboundSchema,
        SearchRequestOptions$Outbound,
        SearchRequestOptions$outboundSchema,
        SearchRequestOptions$,
        searchResponseToJSON,
        searchResponseFromJSON,
        SearchResponse,
        SearchResponse$inboundSchema,
        SearchResponse$Outbound,
        SearchResponse$outboundSchema,
        SearchResponse$,
        searchResponseMetadataToJSON,
        searchResponseMetadataFromJSON,
        SearchResponseMetadata,
        SearchResponseMetadata$inboundSchema,
        SearchResponseMetadata$Outbound,
        SearchResponseMetadata$outboundSchema,
        SearchResponseMetadata$,
        searchResultToJSON,
        searchResultFromJSON,
        SearchResult,
        SearchResult$inboundSchema,
        SearchResult$Outbound,
        SearchResult$outboundSchema,
        SearchResult$,
        SearchResultProminenceEnum,
        SearchResultProminenceEnum$inboundSchema,
        SearchResultProminenceEnum$outboundSchema,
        SearchResultProminenceEnum$,
        searchResultSnippetToJSON,
        searchResultSnippetFromJSON,
        SearchResultSnippet,
        SearchResultSnippet$inboundSchema,
        SearchResultSnippet$Outbound,
        SearchResultSnippet$outboundSchema,
        SearchResultSnippet$,
        searchWarningToJSON,
        searchWarningFromJSON,
        WarningType,
        SearchWarning,
        WarningType$inboundSchema,
        WarningType$outboundSchema,
        WarningType$,
        SearchWarning$inboundSchema,
        SearchWarning$Outbound,
        SearchWarning$outboundSchema,
        SearchWarning$,
        SectionType,
        SectionType$inboundSchema,
        SectionType$outboundSchema,
        SectionType$,
        securityToJSON,
        securityFromJSON,
        Security,
        Security$inboundSchema,
        Security$Outbound,
        Security$outboundSchema,
        Security$,
        seenFeedbackInfoToJSON,
        seenFeedbackInfoFromJSON,
        SeenFeedbackInfo,
        SeenFeedbackInfo$inboundSchema,
        SeenFeedbackInfo$Outbound,
        SeenFeedbackInfo$outboundSchema,
        SeenFeedbackInfo$,
        sensitiveContentOptionsToJSON,
        sensitiveContentOptionsFromJSON,
        SensitiveContentOptions,
        SensitiveContentOptions$inboundSchema,
        SensitiveContentOptions$Outbound,
        SensitiveContentOptions$outboundSchema,
        SensitiveContentOptions$,
        sensitiveExpressionToJSON,
        sensitiveExpressionFromJSON,
        SensitiveExpression,
        SensitiveExpression$inboundSchema,
        SensitiveExpression$Outbound,
        SensitiveExpression$outboundSchema,
        SensitiveExpression$,
        sensitiveInfoTypeToJSON,
        sensitiveInfoTypeFromJSON,
        LikelihoodThreshold,
        SensitiveInfoType,
        LikelihoodThreshold$inboundSchema,
        LikelihoodThreshold$outboundSchema,
        LikelihoodThreshold$,
        SensitiveInfoType$inboundSchema,
        SensitiveInfoType$Outbound,
        SensitiveInfoType$outboundSchema,
        SensitiveInfoType$,
        sessionInfoToJSON,
        sessionInfoFromJSON,
        SessionInfo,
        SessionInfo$inboundSchema,
        SessionInfo$Outbound,
        SessionInfo$outboundSchema,
        SessionInfo$,
        shareToJSON,
        shareFromJSON,
        Share,
        Share$inboundSchema,
        Share$Outbound,
        Share$outboundSchema,
        Share$,
        sharingOptionsToJSON,
        sharingOptionsFromJSON,
        SharingOptions,
        SharingOptions$inboundSchema,
        SharingOptions$Outbound,
        SharingOptions$outboundSchema,
        SharingOptions$,
        shortcutToJSON,
        shortcutFromJSON,
        Shortcut,
        Shortcut$inboundSchema,
        Shortcut$Outbound,
        Shortcut$outboundSchema,
        Shortcut$,
        shortcutErrorToJSON,
        shortcutErrorFromJSON,
        ShortcutErrorErrorType,
        ShortcutError,
        ShortcutErrorErrorType$inboundSchema,
        ShortcutErrorErrorType$outboundSchema,
        ShortcutErrorErrorType$,
        ShortcutError$inboundSchema,
        ShortcutError$Outbound,
        ShortcutError$outboundSchema,
        ShortcutError$,
        shortcutInsightToJSON,
        shortcutInsightFromJSON,
        ShortcutInsight,
        ShortcutInsight$inboundSchema,
        ShortcutInsight$Outbound,
        ShortcutInsight$outboundSchema,
        ShortcutInsight$,
        shortcutInsightsResponseToJSON,
        shortcutInsightsResponseFromJSON,
        ShortcutInsightsResponse,
        ShortcutInsightsResponse$inboundSchema,
        ShortcutInsightsResponse$Outbound,
        ShortcutInsightsResponse$outboundSchema,
        ShortcutInsightsResponse$,
        shortcutMutablePropertiesToJSON,
        shortcutMutablePropertiesFromJSON,
        ShortcutMutableProperties,
        ShortcutMutableProperties$inboundSchema,
        ShortcutMutableProperties$Outbound,
        ShortcutMutableProperties$outboundSchema,
        ShortcutMutableProperties$,
        shortcutsPaginationMetadataToJSON,
        shortcutsPaginationMetadataFromJSON,
        ShortcutsPaginationMetadata,
        ShortcutsPaginationMetadata$inboundSchema,
        ShortcutsPaginationMetadata$Outbound,
        ShortcutsPaginationMetadata$outboundSchema,
        ShortcutsPaginationMetadata$,
        responseMetadataToJSON,
        responseMetadataFromJSON,
        sideBySideImplementationToJSON,
        sideBySideImplementationFromJSON,
        ResponseMetadata,
        SideBySideImplementation,
        ResponseMetadata$inboundSchema,
        ResponseMetadata$Outbound,
        ResponseMetadata$outboundSchema,
        ResponseMetadata$,
        SideBySideImplementation$inboundSchema,
        SideBySideImplementation$Outbound,
        SideBySideImplementation$outboundSchema,
        SideBySideImplementation$,
        socialNetworkToJSON,
        socialNetworkFromJSON,
        SocialNetwork,
        SocialNetwork$inboundSchema,
        SocialNetwork$Outbound,
        SocialNetwork$outboundSchema,
        SocialNetwork$,
        socialNetworkDefinitionToJSON,
        socialNetworkDefinitionFromJSON,
        SocialNetworkDefinition,
        SocialNetworkDefinition$inboundSchema,
        SocialNetworkDefinition$Outbound,
        SocialNetworkDefinition$outboundSchema,
        SocialNetworkDefinition$,
        sortOptionsToJSON,
        sortOptionsFromJSON,
        OrderBy,
        SortOptions,
        OrderBy$inboundSchema,
        OrderBy$outboundSchema,
        OrderBy$,
        SortOptions$inboundSchema,
        SortOptions$Outbound,
        SortOptions$outboundSchema,
        SortOptions$,
        structuredLinkToJSON,
        structuredLinkFromJSON,
        StructuredLink,
        StructuredLink$inboundSchema,
        StructuredLink$Outbound,
        StructuredLink$outboundSchema,
        StructuredLink$,
        structuredLocationToJSON,
        structuredLocationFromJSON,
        StructuredLocation,
        StructuredLocation$inboundSchema,
        StructuredLocation$Outbound,
        StructuredLocation$outboundSchema,
        StructuredLocation$,
        structuredResultToJSON,
        structuredResultFromJSON,
        Prominence,
        StructuredResultSource,
        StructuredResult,
        Prominence$inboundSchema,
        Prominence$outboundSchema,
        Prominence$,
        StructuredResultSource$inboundSchema,
        StructuredResultSource$outboundSchema,
        StructuredResultSource$,
        StructuredResult$inboundSchema,
        StructuredResult$Outbound,
        StructuredResult$outboundSchema,
        StructuredResult$,
        structuredTextToJSON,
        structuredTextFromJSON,
        StructuredText,
        StructuredText$inboundSchema,
        StructuredText$Outbound,
        StructuredText$outboundSchema,
        StructuredText$,
        structuredTextItemToJSON,
        structuredTextItemFromJSON,
        StructuredTextItem,
        StructuredTextItem$inboundSchema,
        StructuredTextItem$Outbound,
        StructuredTextItem$outboundSchema,
        StructuredTextItem$,
        structuredTextMutablePropertiesToJSON,
        structuredTextMutablePropertiesFromJSON,
        StructuredTextMutableProperties,
        StructuredTextMutableProperties$inboundSchema,
        StructuredTextMutableProperties$Outbound,
        StructuredTextMutableProperties$outboundSchema,
        StructuredTextMutableProperties$,
        summarizeRequestToJSON,
        summarizeRequestFromJSON,
        SummarizeRequest,
        SummarizeRequest$inboundSchema,
        SummarizeRequest$Outbound,
        SummarizeRequest$outboundSchema,
        SummarizeRequest$,
        errorToJSON,
        errorFromJSON,
        summarizeResponseToJSON,
        summarizeResponseFromJSON,
        ErrorT,
        SummarizeResponse,
        ErrorT$inboundSchema,
        ErrorT$Outbound,
        ErrorT$outboundSchema,
        ErrorT$,
        SummarizeResponse$inboundSchema,
        SummarizeResponse$Outbound,
        SummarizeResponse$outboundSchema,
        SummarizeResponse$,
        summaryToJSON,
        summaryFromJSON,
        Summary,
        Summary$inboundSchema,
        Summary$Outbound,
        Summary$outboundSchema,
        Summary$,
        teamToJSON,
        teamFromJSON,
        TeamStatus,
        Team,
        TeamStatus$inboundSchema,
        TeamStatus$outboundSchema,
        TeamStatus$,
        Team$inboundSchema,
        Team$Outbound,
        Team$outboundSchema,
        Team$,
        teamEmailToJSON,
        teamEmailFromJSON,
        TeamEmail,
        TeamEmail$inboundSchema,
        TeamEmail$Outbound,
        TeamEmail$outboundSchema,
        TeamEmail$,
        teamInfoDefinitionToJSON,
        teamInfoDefinitionFromJSON,
        TeamInfoDefinition,
        TeamInfoDefinition$inboundSchema,
        TeamInfoDefinition$Outbound,
        TeamInfoDefinition$outboundSchema,
        TeamInfoDefinition$,
        teamMemberToJSON,
        teamMemberFromJSON,
        TeamMember,
        TeamMember$inboundSchema,
        TeamMember$Outbound,
        TeamMember$outboundSchema,
        TeamMember$,
        textRangeToJSON,
        textRangeFromJSON,
        TextRangeType,
        TextRange,
        TextRangeType$inboundSchema,
        TextRangeType$outboundSchema,
        TextRangeType$,
        TextRange$inboundSchema,
        TextRange$Outbound,
        TextRange$outboundSchema,
        TextRange$,
        thumbnailToJSON,
        thumbnailFromJSON,
        Thumbnail,
        Thumbnail$inboundSchema,
        Thumbnail$Outbound,
        Thumbnail$outboundSchema,
        Thumbnail$,
        timeIntervalToJSON,
        timeIntervalFromJSON,
        TimeInterval,
        TimeInterval$inboundSchema,
        TimeInterval$Outbound,
        TimeInterval$outboundSchema,
        TimeInterval$,
        timePointToJSON,
        timePointFromJSON,
        TimePoint,
        TimePoint$inboundSchema,
        TimePoint$Outbound,
        TimePoint$outboundSchema,
        TimePoint$,
        timeRangeToJSON,
        timeRangeFromJSON,
        TimeRange,
        TimeRange$inboundSchema,
        TimeRange$Outbound,
        TimeRange$outboundSchema,
        TimeRange$,
        toolToJSON,
        toolFromJSON,
        ToolType,
        Tool,
        ToolType$inboundSchema,
        ToolType$outboundSchema,
        ToolType$,
        Tool$inboundSchema,
        Tool$Outbound,
        Tool$outboundSchema,
        Tool$,
        toolInfoToJSON,
        toolInfoFromJSON,
        ToolInfo,
        ToolInfo$inboundSchema,
        ToolInfo$Outbound,
        ToolInfo$outboundSchema,
        ToolInfo$,
        toolMetadataToJSON,
        toolMetadataFromJSON,
        ToolMetadataType,
        KnowledgeType,
        WriteActionType,
        AuthType,
        ToolMetadata,
        ToolMetadataType$inboundSchema,
        ToolMetadataType$outboundSchema,
        ToolMetadataType$,
        KnowledgeType$inboundSchema,
        KnowledgeType$outboundSchema,
        KnowledgeType$,
        WriteActionType$inboundSchema,
        WriteActionType$outboundSchema,
        WriteActionType$,
        AuthType$inboundSchema,
        AuthType$outboundSchema,
        AuthType$,
        ToolMetadata$inboundSchema,
        ToolMetadata$Outbound,
        ToolMetadata$outboundSchema,
        ToolMetadata$,
        toolParameterToJSON,
        toolParameterFromJSON,
        ToolParameterType,
        ToolParameter,
        ToolParameterType$inboundSchema,
        ToolParameterType$outboundSchema,
        ToolParameterType$,
        ToolParameter$inboundSchema,
        ToolParameter$Outbound,
        ToolParameter$outboundSchema,
        ToolParameter$,
        toolsCallParameterToJSON,
        toolsCallParameterFromJSON,
        ToolsCallParameter,
        ToolsCallParameter$inboundSchema,
        ToolsCallParameter$Outbound,
        ToolsCallParameter$outboundSchema,
        ToolsCallParameter$,
        toolsCallRequestToJSON,
        toolsCallRequestFromJSON,
        ToolsCallRequest,
        ToolsCallRequest$inboundSchema,
        ToolsCallRequest$Outbound,
        ToolsCallRequest$outboundSchema,
        ToolsCallRequest$,
        toolsCallResponseToJSON,
        toolsCallResponseFromJSON,
        ToolsCallResponse,
        ToolsCallResponse$inboundSchema,
        ToolsCallResponse$Outbound,
        ToolsCallResponse$outboundSchema,
        ToolsCallResponse$,
        toolSetsToJSON,
        toolSetsFromJSON,
        ToolSets,
        ToolSets$inboundSchema,
        ToolSets$Outbound,
        ToolSets$outboundSchema,
        ToolSets$,
        toolsListResponseToJSON,
        toolsListResponseFromJSON,
        ToolsListResponse,
        ToolsListResponse$inboundSchema,
        ToolsListResponse$Outbound,
        ToolsListResponse$outboundSchema,
        ToolsListResponse$,
        UgcType,
        UgcType$inboundSchema,
        UgcType$outboundSchema,
        UgcType$,
        unpinToJSON,
        unpinFromJSON,
        Unpin,
        Unpin$inboundSchema,
        Unpin$Outbound,
        Unpin$outboundSchema,
        Unpin$,
        updateAnnouncementRequestToJSON,
        updateAnnouncementRequestFromJSON,
        UpdateAnnouncementRequestChannel,
        UpdateAnnouncementRequestPostType,
        UpdateAnnouncementRequest,
        UpdateAnnouncementRequestChannel$inboundSchema,
        UpdateAnnouncementRequestChannel$outboundSchema,
        UpdateAnnouncementRequestChannel$,
        UpdateAnnouncementRequestPostType$inboundSchema,
        UpdateAnnouncementRequestPostType$outboundSchema,
        UpdateAnnouncementRequestPostType$,
        UpdateAnnouncementRequest$inboundSchema,
        UpdateAnnouncementRequest$Outbound,
        UpdateAnnouncementRequest$outboundSchema,
        UpdateAnnouncementRequest$,
        updateDlpConfigRequestToJSON,
        updateDlpConfigRequestFromJSON,
        UpdateDlpConfigRequest,
        UpdateDlpConfigRequest$inboundSchema,
        UpdateDlpConfigRequest$Outbound,
        UpdateDlpConfigRequest$outboundSchema,
        UpdateDlpConfigRequest$,
        updateDlpConfigResponseToJSON,
        updateDlpConfigResponseFromJSON,
        UpdateDlpConfigResponse,
        UpdateDlpConfigResponse$inboundSchema,
        UpdateDlpConfigResponse$Outbound,
        UpdateDlpConfigResponse$outboundSchema,
        UpdateDlpConfigResponse$,
        updateDlpReportRequestToJSON,
        updateDlpReportRequestFromJSON,
        UpdateDlpReportRequest,
        UpdateDlpReportRequest$inboundSchema,
        UpdateDlpReportRequest$Outbound,
        UpdateDlpReportRequest$outboundSchema,
        UpdateDlpReportRequest$,
        updateDlpReportResponseToJSON,
        updateDlpReportResponseFromJSON,
        UpdateDlpReportResponse,
        UpdateDlpReportResponse$inboundSchema,
        UpdateDlpReportResponse$Outbound,
        UpdateDlpReportResponse$outboundSchema,
        UpdateDlpReportResponse$,
        updateDocumentVisibilityOverridesRequestToJSON,
        updateDocumentVisibilityOverridesRequestFromJSON,
        UpdateDocumentVisibilityOverridesRequest,
        UpdateDocumentVisibilityOverridesRequest$inboundSchema,
        UpdateDocumentVisibilityOverridesRequest$Outbound,
        UpdateDocumentVisibilityOverridesRequest$outboundSchema,
        UpdateDocumentVisibilityOverridesRequest$,
        updateDocumentVisibilityOverridesResponseToJSON,
        updateDocumentVisibilityOverridesResponseFromJSON,
        UpdateDocumentVisibilityOverridesResponse,
        UpdateDocumentVisibilityOverridesResponse$inboundSchema,
        UpdateDocumentVisibilityOverridesResponse$Outbound,
        UpdateDocumentVisibilityOverridesResponse$outboundSchema,
        UpdateDocumentVisibilityOverridesResponse$,
        updatePermissionsRequestToJSON,
        updatePermissionsRequestFromJSON,
        UpdatePermissionsRequest,
        UpdatePermissionsRequest$inboundSchema,
        UpdatePermissionsRequest$Outbound,
        UpdatePermissionsRequest$outboundSchema,
        UpdatePermissionsRequest$,
        updateShortcutRequestToJSON,
        updateShortcutRequestFromJSON,
        UpdateShortcutRequest,
        UpdateShortcutRequest$inboundSchema,
        UpdateShortcutRequest$Outbound,
        UpdateShortcutRequest$outboundSchema,
        UpdateShortcutRequest$,
        updateShortcutResponseToJSON,
        updateShortcutResponseFromJSON,
        UpdateShortcutResponse,
        UpdateShortcutResponse$inboundSchema,
        UpdateShortcutResponse$Outbound,
        UpdateShortcutResponse$outboundSchema,
        UpdateShortcutResponse$,
        UpdateType,
        UpdateType$inboundSchema,
        UpdateType$outboundSchema,
        UpdateType$,
        fileToJSON,
        fileFromJSON,
        uploadChatFilesRequestToJSON,
        uploadChatFilesRequestFromJSON,
        FileT,
        UploadChatFilesRequest,
        FileT$inboundSchema,
        FileT$Outbound,
        FileT$outboundSchema,
        FileT$,
        UploadChatFilesRequest$inboundSchema,
        UploadChatFilesRequest$Outbound,
        UploadChatFilesRequest$outboundSchema,
        UploadChatFilesRequest$,
        uploadChatFilesResponseToJSON,
        uploadChatFilesResponseFromJSON,
        UploadChatFilesResponse,
        UploadChatFilesResponse$inboundSchema,
        UploadChatFilesResponse$Outbound,
        UploadChatFilesResponse$outboundSchema,
        UploadChatFilesResponse$,
        uploadShortcutsRequestToJSON,
        uploadShortcutsRequestFromJSON,
        UploadShortcutsRequest,
        UploadShortcutsRequest$inboundSchema,
        UploadShortcutsRequest$Outbound,
        UploadShortcutsRequest$outboundSchema,
        UploadShortcutsRequest$,
        UploadStatusEnum,
        UploadStatusEnum$inboundSchema,
        UploadStatusEnum$outboundSchema,
        UploadStatusEnum$,
        userToJSON,
        userFromJSON,
        User,
        User$inboundSchema,
        User$Outbound,
        User$outboundSchema,
        User$,
        userActivityToJSON,
        userActivityFromJSON,
        UserActivityAction,
        UserActivity,
        UserActivityAction$inboundSchema,
        UserActivityAction$outboundSchema,
        UserActivityAction$,
        UserActivity$inboundSchema,
        UserActivity$Outbound,
        UserActivity$outboundSchema,
        UserActivity$,
        userActivityInsightToJSON,
        userActivityInsightFromJSON,
        ActivityEnum,
        UserActivityInsight,
        ActivityEnum$inboundSchema,
        ActivityEnum$outboundSchema,
        ActivityEnum$,
        UserActivityInsight$inboundSchema,
        UserActivityInsight$Outbound,
        UserActivityInsight$outboundSchema,
        UserActivityInsight$,
        userGeneratedContentIdToJSON,
        userGeneratedContentIdFromJSON,
        UserGeneratedContentId,
        UserGeneratedContentId$inboundSchema,
        UserGeneratedContentId$Outbound,
        UserGeneratedContentId$outboundSchema,
        UserGeneratedContentId$,
        userInsightsResponseToJSON,
        userInsightsResponseFromJSON,
        UserInsightsResponse,
        UserInsightsResponse$inboundSchema,
        UserInsightsResponse$Outbound,
        UserInsightsResponse$outboundSchema,
        UserInsightsResponse$,
        userReferenceDefinitionToJSON,
        userReferenceDefinitionFromJSON,
        UserReferenceDefinition,
        UserReferenceDefinition$inboundSchema,
        UserReferenceDefinition$Outbound,
        UserReferenceDefinition$outboundSchema,
        UserReferenceDefinition$,
        UserRole,
        UserRole$inboundSchema,
        UserRole$outboundSchema,
        UserRole$,
        userRoleSpecificationToJSON,
        userRoleSpecificationFromJSON,
        UserRoleSpecification,
        UserRoleSpecification$inboundSchema,
        UserRoleSpecification$Outbound,
        UserRoleSpecification$outboundSchema,
        UserRoleSpecification$,
        userStatusResponseToJSON,
        userStatusResponseFromJSON,
        UserStatusResponse,
        UserStatusResponse$inboundSchema,
        UserStatusResponse$Outbound,
        UserStatusResponse$outboundSchema,
        UserStatusResponse$,
        userViewInfoToJSON,
        userViewInfoFromJSON,
        UserViewInfo,
        UserViewInfo$inboundSchema,
        UserViewInfo$Outbound,
        UserViewInfo$outboundSchema,
        UserViewInfo$,
        verificationToJSON,
        verificationFromJSON,
        State,
        Verification,
        State$inboundSchema,
        State$outboundSchema,
        State$,
        Verification$inboundSchema,
        Verification$Outbound,
        Verification$outboundSchema,
        Verification$,
        verificationFeedToJSON,
        verificationFeedFromJSON,
        VerificationFeed,
        VerificationFeed$inboundSchema,
        VerificationFeed$Outbound,
        VerificationFeed$outboundSchema,
        VerificationFeed$,
        verificationMetadataToJSON,
        verificationMetadataFromJSON,
        VerificationMetadata,
        VerificationMetadata$inboundSchema,
        VerificationMetadata$Outbound,
        VerificationMetadata$outboundSchema,
        VerificationMetadata$,
        verifyRequestToJSON,
        verifyRequestFromJSON,
        VerifyRequestAction,
        VerifyRequest,
        VerifyRequestAction$inboundSchema,
        VerifyRequestAction$outboundSchema,
        VerifyRequestAction$,
        VerifyRequest$inboundSchema,
        VerifyRequest$Outbound,
        VerifyRequest$outboundSchema,
        VerifyRequest$,
        viewerInfoToJSON,
        viewerInfoFromJSON,
        Role,
        ViewerInfo,
        Role$inboundSchema,
        Role$outboundSchema,
        Role$,
        ViewerInfo$inboundSchema,
        ViewerInfo$Outbound,
        ViewerInfo$outboundSchema,
        ViewerInfo$,
        workflowToJSON,
        workflowFromJSON,
        Workflow,
        Workflow$inboundSchema,
        Workflow$Outbound,
        Workflow$outboundSchema,
        Workflow$,
        workflowFeedbackInfoToJSON,
        workflowFeedbackInfoFromJSON,
        WorkflowFeedbackInfoSource,
        WorkflowFeedbackInfo,
        WorkflowFeedbackInfoSource$inboundSchema,
        WorkflowFeedbackInfoSource$outboundSchema,
        WorkflowFeedbackInfoSource$,
        WorkflowFeedbackInfo$inboundSchema,
        WorkflowFeedbackInfo$Outbound,
        WorkflowFeedbackInfo$outboundSchema,
        WorkflowFeedbackInfo$,
        workflowResultToJSON,
        workflowResultFromJSON,
        WorkflowResult,
        WorkflowResult$inboundSchema,
        WorkflowResult$Outbound,
        WorkflowResult$outboundSchema,
        WorkflowResult$,
        writeActionParameterToJSON,
        writeActionParameterFromJSON,
        WriteActionParameterType,
        WriteActionParameter,
        WriteActionParameterType$inboundSchema,
        WriteActionParameterType$outboundSchema,
        WriteActionParameterType$,
        WriteActionParameter$inboundSchema,
        WriteActionParameter$Outbound,
        WriteActionParameter$outboundSchema,
        WriteActionParameter$,
        writePermissionToJSON,
        writePermissionFromJSON,
        WritePermission,
        WritePermission$inboundSchema,
        WritePermission$Outbound,
        WritePermission$outboundSchema,
        WritePermission$
    }
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ConferenceData$ {
    /** @deprecated use `ConferenceData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ConferenceData, z.ZodTypeDef, unknown>;
    /** @deprecated use `ConferenceData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ConferenceData$Outbound, z.ZodTypeDef, ConferenceData>;
    /** @deprecated use `ConferenceData$Outbound` instead. */
    type Outbound = ConferenceData$Outbound;
}

/** @internal */
declare const ConferenceData$inboundSchema: z.ZodType<ConferenceData, z.ZodTypeDef, unknown>;

/** @internal */
declare type ConferenceData$Outbound = {
    provider: string;
    uri: string;
    source?: string | undefined;
};

/** @internal */
declare const ConferenceData$outboundSchema: z.ZodType<ConferenceData$Outbound, z.ZodTypeDef, ConferenceData>;

declare type ConferenceData = {
    provider: Provider;
    /**
     * A permalink for the conference.
     */
    uri: string;
    source?: ConferenceDataSource | undefined;
};

declare function conferenceDataFromJSON(jsonString: string): Result<ConferenceData, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ConferenceDataSource$ {
    /** @deprecated use `ConferenceDataSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly NativeConference: "NATIVE_CONFERENCE";
        readonly Location: "LOCATION";
        readonly Description: "DESCRIPTION";
    }>;
    /** @deprecated use `ConferenceDataSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly NativeConference: "NATIVE_CONFERENCE";
        readonly Location: "LOCATION";
        readonly Description: "DESCRIPTION";
    }>;
}

/** @internal */
declare const ConferenceDataSource$inboundSchema: z.ZodNativeEnum<typeof ConferenceDataSource>;

/** @internal */
declare const ConferenceDataSource$outboundSchema: z.ZodNativeEnum<typeof ConferenceDataSource>;

declare const ConferenceDataSource: {
    readonly NativeConference: "NATIVE_CONFERENCE";
    readonly Location: "LOCATION";
    readonly Description: "DESCRIPTION";
};

declare type ConferenceDataSource = ClosedEnum<typeof ConferenceDataSource>;

declare function conferenceDataToJSON(conferenceData: ConferenceData): string;

/**
 * An error that is raised when a HTTP client is unable to make a request to
 * a server.
 */
declare class ConnectionError extends HTTPClientError {
    readonly name = "ConnectionError";
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ConnectorType$ {
    /** @deprecated use `ConnectorType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ApiCrawl: "API_CRAWL";
        readonly BrowserCrawl: "BROWSER_CRAWL";
        readonly BrowserHistory: "BROWSER_HISTORY";
        readonly Builtin: "BUILTIN";
        readonly FederatedSearch: "FEDERATED_SEARCH";
        readonly PushApi: "PUSH_API";
        readonly WebCrawl: "WEB_CRAWL";
        readonly NativeHistory: "NATIVE_HISTORY";
    }>;
    /** @deprecated use `ConnectorType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ApiCrawl: "API_CRAWL";
        readonly BrowserCrawl: "BROWSER_CRAWL";
        readonly BrowserHistory: "BROWSER_HISTORY";
        readonly Builtin: "BUILTIN";
        readonly FederatedSearch: "FEDERATED_SEARCH";
        readonly PushApi: "PUSH_API";
        readonly WebCrawl: "WEB_CRAWL";
        readonly NativeHistory: "NATIVE_HISTORY";
    }>;
}

/** @internal */
declare const ConnectorType$inboundSchema: z.ZodNativeEnum<typeof ConnectorType>;

/** @internal */
declare const ConnectorType$outboundSchema: z.ZodNativeEnum<typeof ConnectorType>;

/**
 * The source from which document content was pulled, e.g. an API crawl or browser history
 */
declare const ConnectorType: {
    readonly ApiCrawl: "API_CRAWL";
    readonly BrowserCrawl: "BROWSER_CRAWL";
    readonly BrowserHistory: "BROWSER_HISTORY";
    readonly Builtin: "BUILTIN";
    readonly FederatedSearch: "FEDERATED_SEARCH";
    readonly PushApi: "PUSH_API";
    readonly WebCrawl: "WEB_CRAWL";
    readonly NativeHistory: "NATIVE_HISTORY";
};

/**
 * The source from which document content was pulled, e.g. an API crawl or browser history
 */
declare type ConnectorType = ClosedEnum<typeof ConnectorType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ContentDefinition$ {
    /** @deprecated use `ContentDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ContentDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `ContentDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ContentDefinition$Outbound, z.ZodTypeDef, ContentDefinition>;
    /** @deprecated use `ContentDefinition$Outbound` instead. */
    type Outbound = ContentDefinition$Outbound;
}

/** @internal */
declare const ContentDefinition$inboundSchema: z.ZodType<ContentDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type ContentDefinition$Outbound = {
    mimeType: string;
    textContent?: string | undefined;
    binaryContent?: string | undefined;
};

/** @internal */
declare const ContentDefinition$outboundSchema: z.ZodType<ContentDefinition$Outbound, z.ZodTypeDef, ContentDefinition>;

/**
 * Describes text content or base64 encoded binary content
 */
declare type ContentDefinition = {
    mimeType: string;
    /**
     * text content. Only one of textContent or binary content can be specified
     */
    textContent?: string | undefined;
    /**
     * base64 encoded binary content. Only one of textContent or binary content can be specified
     */
    binaryContent?: string | undefined;
};

declare function contentDefinitionFromJSON(jsonString: string): Result<ContentDefinition, SDKValidationError>;

declare function contentDefinitionToJSON(contentDefinition: ContentDefinition): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ContentInsightsResponse$ {
    /** @deprecated use `ContentInsightsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ContentInsightsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ContentInsightsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ContentInsightsResponse$Outbound, z.ZodTypeDef, ContentInsightsResponse>;
    /** @deprecated use `ContentInsightsResponse$Outbound` instead. */
    type Outbound = ContentInsightsResponse$Outbound;
}

/** @internal */
declare const ContentInsightsResponse$inboundSchema: z.ZodType<ContentInsightsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ContentInsightsResponse$Outbound = {
    lastLogTimestamp?: number | undefined;
    documentInsights?: Array<DocumentInsight$Outbound> | undefined;
    departments?: Array<string> | undefined;
    minDepartmentSizeThreshold?: number | undefined;
    minVisitorThreshold?: number | undefined;
};

/** @internal */
declare const ContentInsightsResponse$outboundSchema: z.ZodType<ContentInsightsResponse$Outbound, z.ZodTypeDef, ContentInsightsResponse>;

declare type ContentInsightsResponse = {
    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    lastLogTimestamp?: number | undefined;
    /**
     * Insights for documents.
     */
    documentInsights?: Array<DocumentInsight> | undefined;
    /**
     * list of departments applicable for contents tab.
     */
    departments?: Array<string> | undefined;
    /**
     * Min threshold in size of departments while populating results, otherwise 0.
     */
    minDepartmentSizeThreshold?: number | undefined;
    /**
     * Minimum number of visitors to a document required to be included in insights.
     */
    minVisitorThreshold?: number | undefined;
};

declare function contentInsightsResponseFromJSON(jsonString: string): Result<ContentInsightsResponse, SDKValidationError>;

declare function contentInsightsResponseToJSON(contentInsightsResponse: ContentInsightsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ContentType$ {
    /** @deprecated use `ContentType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Text: "text";
    }>;
    /** @deprecated use `ContentType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Text: "text";
    }>;
}

/** @internal */
declare const ContentType$inboundSchema: z.ZodNativeEnum<typeof ContentType>;

/** @internal */
declare const ContentType$outboundSchema: z.ZodNativeEnum<typeof ContentType>;

declare const ContentType: {
    readonly Text: "text";
};

declare type ContentType = ClosedEnum<typeof ContentType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CountInfo$ {
    /** @deprecated use `CountInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CountInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `CountInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CountInfo$Outbound, z.ZodTypeDef, CountInfo>;
    /** @deprecated use `CountInfo$Outbound` instead. */
    type Outbound = CountInfo$Outbound;
}

/** @internal */
declare const CountInfo$inboundSchema: z.ZodType<CountInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type CountInfo$Outbound = {
    count: number;
    period?: Period$Outbound | undefined;
    org?: string | undefined;
};

/** @internal */
declare const CountInfo$outboundSchema: z.ZodType<CountInfo$Outbound, z.ZodTypeDef, CountInfo>;

declare type CountInfo = {
    /**
     * The counter value
     */
    count: number;
    period?: Period | undefined;
    /**
     * The unit of organization over which we did the count aggregation, e.g. org (department) or company
     */
    org?: string | undefined;
};

declare function countInfoFromJSON(jsonString: string): Result<CountInfo, SDKValidationError>;

declare function countInfoToJSON(countInfo: CountInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CreateAnnouncementRequest$ {
    /** @deprecated use `CreateAnnouncementRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateAnnouncementRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateAnnouncementRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateAnnouncementRequest$Outbound, z.ZodTypeDef, CreateAnnouncementRequest>;
    /** @deprecated use `CreateAnnouncementRequest$Outbound` instead. */
    type Outbound = CreateAnnouncementRequest$Outbound;
}

/** @internal */
declare const CreateAnnouncementRequest$inboundSchema: z.ZodType<CreateAnnouncementRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type CreateAnnouncementRequest$Outbound = {
    startTime: string;
    endTime: string;
    title: string;
    body?: StructuredText$Outbound | undefined;
    emoji?: string | undefined;
    thumbnail?: Thumbnail$Outbound | undefined;
    banner?: Thumbnail$Outbound | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    sourceDocumentId?: string | undefined;
    hideAttribution?: boolean | undefined;
    channel?: string | undefined;
    postType?: string | undefined;
    isPrioritized?: boolean | undefined;
    viewUrl?: string | undefined;
};

/** @internal */
declare const CreateAnnouncementRequest$outboundSchema: z.ZodType<CreateAnnouncementRequest$Outbound, z.ZodTypeDef, CreateAnnouncementRequest>;

declare type CreateAnnouncementRequest = {
    /**
     * The date and time at which the announcement becomes active.
     */
    startTime: Date;
    /**
     * The date and time at which the announcement expires.
     */
    endTime: Date;
    /**
     * The headline of the announcement.
     */
    title: string;
    body?: StructuredText | undefined;
    /**
     * An emoji used to indicate the nature of the announcement.
     */
    emoji?: string | undefined;
    thumbnail?: Thumbnail | undefined;
    banner?: Thumbnail | undefined;
    /**
     * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
     */
    sourceDocumentId?: string | undefined;
    /**
     * Whether or not to hide an author attribution.
     */
    hideAttribution?: boolean | undefined;
    /**
     * This determines whether this is a Social Feed post or a regular announcement.
     */
    channel?: CreateAnnouncementRequestChannel | undefined;
    /**
     * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
     */
    postType?: CreateAnnouncementRequestPostType | undefined;
    /**
     * Used by the Social Feed to pin posts to the front of the feed.
     */
    isPrioritized?: boolean | undefined;
    /**
     * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
     */
    viewUrl?: string | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CreateAnnouncementRequestChannel$ {
    /** @deprecated use `CreateAnnouncementRequestChannel$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Main: "MAIN";
        readonly SocialFeed: "SOCIAL_FEED";
    }>;
    /** @deprecated use `CreateAnnouncementRequestChannel$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Main: "MAIN";
        readonly SocialFeed: "SOCIAL_FEED";
    }>;
}

/** @internal */
declare const CreateAnnouncementRequestChannel$inboundSchema: z.ZodNativeEnum<typeof CreateAnnouncementRequestChannel>;

/** @internal */
declare const CreateAnnouncementRequestChannel$outboundSchema: z.ZodNativeEnum<typeof CreateAnnouncementRequestChannel>;

/**
 * This determines whether this is a Social Feed post or a regular announcement.
 */
declare const CreateAnnouncementRequestChannel: {
    readonly Main: "MAIN";
    readonly SocialFeed: "SOCIAL_FEED";
};

/**
 * This determines whether this is a Social Feed post or a regular announcement.
 */
declare type CreateAnnouncementRequestChannel = ClosedEnum<typeof CreateAnnouncementRequestChannel>;

declare function createAnnouncementRequestFromJSON(jsonString: string): Result<CreateAnnouncementRequest, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CreateAnnouncementRequestPostType$ {
    /** @deprecated use `CreateAnnouncementRequestPostType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Text: "TEXT";
        readonly Link: "LINK";
    }>;
    /** @deprecated use `CreateAnnouncementRequestPostType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Text: "TEXT";
        readonly Link: "LINK";
    }>;
}

/** @internal */
declare const CreateAnnouncementRequestPostType$inboundSchema: z.ZodNativeEnum<typeof CreateAnnouncementRequestPostType>;

/** @internal */
declare const CreateAnnouncementRequestPostType$outboundSchema: z.ZodNativeEnum<typeof CreateAnnouncementRequestPostType>;

/**
 * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
 */
declare const CreateAnnouncementRequestPostType: {
    readonly Text: "TEXT";
    readonly Link: "LINK";
};

/**
 * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
 */
declare type CreateAnnouncementRequestPostType = ClosedEnum<typeof CreateAnnouncementRequestPostType>;

declare function createAnnouncementRequestToJSON(createAnnouncementRequest: CreateAnnouncementRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CreateAnswerRequest$ {
    /** @deprecated use `CreateAnswerRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateAnswerRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateAnswerRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateAnswerRequest$Outbound, z.ZodTypeDef, CreateAnswerRequest>;
    /** @deprecated use `CreateAnswerRequest$Outbound` instead. */
    type Outbound = CreateAnswerRequest$Outbound;
}

/** @internal */
declare const CreateAnswerRequest$inboundSchema: z.ZodType<CreateAnswerRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type CreateAnswerRequest$Outbound = {
    data: AnswerCreationData$Outbound;
};

/** @internal */
declare const CreateAnswerRequest$outboundSchema: z.ZodType<CreateAnswerRequest$Outbound, z.ZodTypeDef, CreateAnswerRequest>;

declare type CreateAnswerRequest = {
    data: AnswerCreationData;
};

declare function createAnswerRequestFromJSON(jsonString: string): Result<CreateAnswerRequest, SDKValidationError>;

declare function createAnswerRequestToJSON(createAnswerRequest: CreateAnswerRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CreateAuthTokenResponse$ {
    /** @deprecated use `CreateAuthTokenResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateAuthTokenResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateAuthTokenResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateAuthTokenResponse$Outbound, z.ZodTypeDef, CreateAuthTokenResponse>;
    /** @deprecated use `CreateAuthTokenResponse$Outbound` instead. */
    type Outbound = CreateAuthTokenResponse$Outbound;
}

/** @internal */
declare const CreateAuthTokenResponse$inboundSchema: z.ZodType<CreateAuthTokenResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type CreateAuthTokenResponse$Outbound = {
    token: string;
    expirationTime: number;
};

/** @internal */
declare const CreateAuthTokenResponse$outboundSchema: z.ZodType<CreateAuthTokenResponse$Outbound, z.ZodTypeDef, CreateAuthTokenResponse>;

declare type CreateAuthTokenResponse = {
    /**
     * An authentication token that can be passed to any endpoint via Bearer Authentication
     */
    token: string;
    /**
     * Unix timestamp for when this token expires (in seconds since epoch UTC).
     */
    expirationTime: number;
};

declare function createAuthTokenResponseFromJSON(jsonString: string): Result<CreateAuthTokenResponse, SDKValidationError>;

declare function createAuthTokenResponseToJSON(createAuthTokenResponse: CreateAuthTokenResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CreateCollectionRequest$ {
    /** @deprecated use `CreateCollectionRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateCollectionRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateCollectionRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateCollectionRequest$Outbound, z.ZodTypeDef, CreateCollectionRequest>;
    /** @deprecated use `CreateCollectionRequest$Outbound` instead. */
    type Outbound = CreateCollectionRequest$Outbound;
}

/** @internal */
declare const CreateCollectionRequest$inboundSchema: z.ZodType<CreateCollectionRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type CreateCollectionRequest$Outbound = {
    name: string;
    description?: string | undefined;
    addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    icon?: string | undefined;
    adminLocked?: boolean | undefined;
    parentId?: number | undefined;
    thumbnail?: Thumbnail$Outbound | undefined;
    allowedDatasource?: string | undefined;
    newNextItemId?: string | undefined;
};

/** @internal */
declare const CreateCollectionRequest$outboundSchema: z.ZodType<CreateCollectionRequest$Outbound, z.ZodTypeDef, CreateCollectionRequest>;

declare type CreateCollectionRequest = {
    /**
     * The unique name of the Collection.
     */
    name: string;
    /**
     * A brief summary of the Collection's contents.
     */
    description?: string | undefined;
    /**
     * A list of added user roles for the Collection.
     */
    addedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of removed user roles for the Collection.
     */
    removedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * The emoji icon of this Collection.
     */
    icon?: string | undefined;
    /**
     * Indicates whether edits are allowed for everyone or only admins.
     */
    adminLocked?: boolean | undefined;
    /**
     * The parent of this Collection, or 0 if it's a top-level Collection.
     */
    parentId?: number | undefined;
    thumbnail?: Thumbnail | undefined;
    /**
     * The datasource type this Collection can hold.
     */
    allowedDatasource?: string | undefined;
    /**
     * The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection. Only used if parentId is specified.
     */
    newNextItemId?: string | undefined;
};

declare function createCollectionRequestFromJSON(jsonString: string): Result<CreateCollectionRequest, SDKValidationError>;

declare function createCollectionRequestToJSON(createCollectionRequest: CreateCollectionRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CreatecollectionResponse$ {
    /** @deprecated use `CreatecollectionResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreatecollectionResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreatecollectionResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreatecollectionResponse$Outbound, z.ZodTypeDef, CreatecollectionResponse>;
    /** @deprecated use `CreatecollectionResponse$Outbound` instead. */
    type Outbound = CreatecollectionResponse$Outbound;
}

/** @internal */
declare const CreatecollectionResponse$inboundSchema: z.ZodType<CreatecollectionResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type CreatecollectionResponse$Outbound = ResponseBody1$Outbound | ResponseBody2$Outbound;

/** @internal */
declare const CreatecollectionResponse$outboundSchema: z.ZodType<CreatecollectionResponse$Outbound, z.ZodTypeDef, CreatecollectionResponse>;

/**
 * OK
 */
declare type CreatecollectionResponse = ResponseBody1 | ResponseBody2;

declare function createcollectionResponseFromJSON(jsonString: string): Result<CreatecollectionResponse, SDKValidationError>;

declare function createcollectionResponseToJSON(createcollectionResponse: CreatecollectionResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CreateDlpReportRequest$ {
    /** @deprecated use `CreateDlpReportRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDlpReportRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDlpReportRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDlpReportRequest$Outbound, z.ZodTypeDef, CreateDlpReportRequest>;
    /** @deprecated use `CreateDlpReportRequest$Outbound` instead. */
    type Outbound = CreateDlpReportRequest$Outbound;
}

/** @internal */
declare const CreateDlpReportRequest$inboundSchema: z.ZodType<CreateDlpReportRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type CreateDlpReportRequest$Outbound = {
    name?: string | undefined;
    config?: DlpConfig$Outbound | undefined;
    frequency?: string | undefined;
    autoHideDocs?: boolean | undefined;
};

/** @internal */
declare const CreateDlpReportRequest$outboundSchema: z.ZodType<CreateDlpReportRequest$Outbound, z.ZodTypeDef, CreateDlpReportRequest>;

declare type CreateDlpReportRequest = {
    /**
     * Name of the policy being created.
     */
    name?: string | undefined;
    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    config?: DlpConfig | undefined;
    /**
     * Interval between scans. DAILY is deprecated.
     */
    frequency?: DlpFrequency | undefined;
    /**
     * Controls whether the policy should hide documents with violations.
     */
    autoHideDocs?: boolean | undefined;
};

declare function createDlpReportRequestFromJSON(jsonString: string): Result<CreateDlpReportRequest, SDKValidationError>;

declare function createDlpReportRequestToJSON(createDlpReportRequest: CreateDlpReportRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CreateDlpReportResponse$ {
    /** @deprecated use `CreateDlpReportResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateDlpReportResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateDlpReportResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateDlpReportResponse$Outbound, z.ZodTypeDef, CreateDlpReportResponse>;
    /** @deprecated use `CreateDlpReportResponse$Outbound` instead. */
    type Outbound = CreateDlpReportResponse$Outbound;
}

/** @internal */
declare const CreateDlpReportResponse$inboundSchema: z.ZodType<CreateDlpReportResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type CreateDlpReportResponse$Outbound = {
    report?: DlpReport$Outbound | undefined;
};

/** @internal */
declare const CreateDlpReportResponse$outboundSchema: z.ZodType<CreateDlpReportResponse$Outbound, z.ZodTypeDef, CreateDlpReportResponse>;

declare type CreateDlpReportResponse = {
    /**
     * Full policy information that will be used for scans.
     */
    report?: DlpReport | undefined;
};

declare function createDlpReportResponseFromJSON(jsonString: string): Result<CreateDlpReportResponse, SDKValidationError>;

declare function createDlpReportResponseToJSON(createDlpReportResponse: CreateDlpReportResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CreateShortcutRequest$ {
    /** @deprecated use `CreateShortcutRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateShortcutRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateShortcutRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateShortcutRequest$Outbound, z.ZodTypeDef, CreateShortcutRequest>;
    /** @deprecated use `CreateShortcutRequest$Outbound` instead. */
    type Outbound = CreateShortcutRequest$Outbound;
}

/** @internal */
declare const CreateShortcutRequest$inboundSchema: z.ZodType<CreateShortcutRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type CreateShortcutRequest$Outbound = {
    data: ShortcutMutableProperties$Outbound;
};

/** @internal */
declare const CreateShortcutRequest$outboundSchema: z.ZodType<CreateShortcutRequest$Outbound, z.ZodTypeDef, CreateShortcutRequest>;

declare type CreateShortcutRequest = {
    data: ShortcutMutableProperties;
};

declare function createShortcutRequestFromJSON(jsonString: string): Result<CreateShortcutRequest, SDKValidationError>;

declare function createShortcutRequestToJSON(createShortcutRequest: CreateShortcutRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CreateShortcutResponse$ {
    /** @deprecated use `CreateShortcutResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CreateShortcutResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `CreateShortcutResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CreateShortcutResponse$Outbound, z.ZodTypeDef, CreateShortcutResponse>;
    /** @deprecated use `CreateShortcutResponse$Outbound` instead. */
    type Outbound = CreateShortcutResponse$Outbound;
}

/** @internal */
declare const CreateShortcutResponse$inboundSchema: z.ZodType<CreateShortcutResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type CreateShortcutResponse$Outbound = {
    shortcut?: Shortcut$Outbound | undefined;
    error?: ShortcutError$Outbound | undefined;
};

/** @internal */
declare const CreateShortcutResponse$outboundSchema: z.ZodType<CreateShortcutResponse$Outbound, z.ZodTypeDef, CreateShortcutResponse>;

declare type CreateShortcutResponse = {
    shortcut?: Shortcut | undefined;
    error?: ShortcutError | undefined;
};

declare function createShortcutResponseFromJSON(jsonString: string): Result<CreateShortcutResponse, SDKValidationError>;

declare function createShortcutResponseToJSON(createShortcutResponse: CreateShortcutResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CustomDatasourceConfig$ {
    /** @deprecated use `CustomDatasourceConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomDatasourceConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomDatasourceConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomDatasourceConfig$Outbound, z.ZodTypeDef, CustomDatasourceConfig>;
    /** @deprecated use `CustomDatasourceConfig$Outbound` instead. */
    type Outbound = CustomDatasourceConfig$Outbound;
}

/** @internal */
declare const CustomDatasourceConfig$inboundSchema: z.ZodType<CustomDatasourceConfig, z.ZodTypeDef, unknown>;

/** @internal */
declare type CustomDatasourceConfig$Outbound = {
    name: string;
    displayName?: string | undefined;
    datasourceCategory: string;
    urlRegex?: string | undefined;
    iconUrl?: string | undefined;
    objectDefinitions?: Array<ObjectDefinition$Outbound> | undefined;
    suggestionText?: string | undefined;
    homeUrl?: string | undefined;
    crawlerSeedUrls?: Array<string> | undefined;
    iconDarkUrl?: string | undefined;
    hideBuiltInFacets?: Array<string> | undefined;
    canonicalizingURLRegex?: Array<CanonicalizingRegexType$Outbound> | undefined;
    canonicalizingTitleRegex?: Array<CanonicalizingRegexType$Outbound> | undefined;
    redlistTitleRegex?: string | undefined;
    connectorType?: string | undefined;
    quicklinks?: Array<Quicklink$Outbound> | undefined;
    renderConfigPreset?: string | undefined;
    aliases?: Array<string> | undefined;
    isOnPrem?: boolean | undefined;
    trustUrlRegexForViewActivity: boolean;
    includeUtmSource?: boolean | undefined;
    stripFragmentInCanonicalUrl: boolean;
    identityDatasourceName?: string | undefined;
    productAccessGroup?: string | undefined;
    isUserReferencedByEmail?: boolean | undefined;
    isEntityDatasource: boolean;
    isTestDatasource: boolean;
};

/** @internal */
declare const CustomDatasourceConfig$outboundSchema: z.ZodType<CustomDatasourceConfig$Outbound, z.ZodTypeDef, CustomDatasourceConfig>;

/**
 * Structure describing config properties of a custom datasource
 */
declare type CustomDatasourceConfig = {
    /**
     * Unique identifier of datasource instance to which this config applies.
     */
    name: string;
    /**
     * The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.
     */
    displayName?: string | undefined;
    /**
     * The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
     */
    datasourceCategory?: DatasourceCategory | undefined;
    /**
     * Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: `urlRegex` is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**
     */
    urlRegex?: string | undefined;
    /**
     * The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    iconUrl?: string | undefined;
    /**
     * The list of top-level `objectType`s for the datasource.
     */
    objectDefinitions?: Array<ObjectDefinition> | undefined;
    /**
     * Example text for what to search for in this datasource
     */
    suggestionText?: string | undefined;
    /**
     * The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.
     */
    homeUrl?: string | undefined;
    /**
     * This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed URLs for crawling.
     */
    crawlerSeedUrls?: Array<string> | undefined;
    /**
     * The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    iconDarkUrl?: string | undefined;
    /**
     * List of built-in facet types that should be hidden for the datasource.
     */
    hideBuiltInFacets?: Array<HideBuiltInFacet> | undefined;
    /**
     * A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.
     */
    canonicalizingURLRegex?: Array<CanonicalizingRegexType> | undefined;
    /**
     * A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results
     */
    canonicalizingTitleRegex?: Array<CanonicalizingRegexType> | undefined;
    /**
     * A regex that identifies titles that should not be indexed
     */
    redlistTitleRegex?: string | undefined;
    connectorType?: CustomDatasourceConfigConnectorType | undefined;
    /**
     * List of actions for this datasource instance that will show up in autocomplete and app card, e.g. "Create new issue" for jira
     */
    quicklinks?: Array<Quicklink> | undefined;
    /**
     * The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`. Please refer to [this](https://developers.glean.com/docs/rendering_search_results/) for more details
     */
    renderConfigPreset?: string | undefined;
    /**
     * Aliases that can be used as `app` operator-values.
     */
    aliases?: Array<string> | undefined;
    /**
     * Whether or not this datasource is hosted on-premise.
     */
    isOnPrem?: boolean | undefined;
    /**
     * True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.
     */
    trustUrlRegexForViewActivity?: boolean | undefined;
    /**
     * If true, a utm_source query param will be added to outbound links to this datasource within Glean.
     */
    includeUtmSource?: boolean | undefined;
    /**
     * If true, the fragment part of the URL will be stripped when converting to a canonical url.
     */
    stripFragmentInCanonicalUrl?: boolean | undefined;
    /**
     * If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.
     */
    identityDatasourceName?: string | undefined;
    /**
     * If the datasource uses a specific product access group, then the name of that group.
     */
    productAccessGroup?: string | undefined;
    /**
     * whether email is used to reference users in document ACLs and in group memberships.
     */
    isUserReferencedByEmail?: boolean | undefined;
    /**
     * True if this datasource is used to push custom entities.
     */
    isEntityDatasource?: boolean | undefined;
    /**
     * True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.
     */
    isTestDatasource?: boolean | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CustomDatasourceConfigConnectorType$ {
    /** @deprecated use `CustomDatasourceConfigConnectorType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ApiCrawl: "API_CRAWL";
        readonly BrowserCrawl: "BROWSER_CRAWL";
        readonly BrowserHistory: "BROWSER_HISTORY";
        readonly Builtin: "BUILTIN";
        readonly FederatedSearch: "FEDERATED_SEARCH";
        readonly PushApi: "PUSH_API";
        readonly WebCrawl: "WEB_CRAWL";
        readonly NativeHistory: "NATIVE_HISTORY";
    }>;
    /** @deprecated use `CustomDatasourceConfigConnectorType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ApiCrawl: "API_CRAWL";
        readonly BrowserCrawl: "BROWSER_CRAWL";
        readonly BrowserHistory: "BROWSER_HISTORY";
        readonly Builtin: "BUILTIN";
        readonly FederatedSearch: "FEDERATED_SEARCH";
        readonly PushApi: "PUSH_API";
        readonly WebCrawl: "WEB_CRAWL";
        readonly NativeHistory: "NATIVE_HISTORY";
    }>;
}

/** @internal */
declare const CustomDatasourceConfigConnectorType$inboundSchema: z.ZodNativeEnum<typeof CustomDatasourceConfigConnectorType>;

/** @internal */
declare const CustomDatasourceConfigConnectorType$outboundSchema: z.ZodNativeEnum<typeof CustomDatasourceConfigConnectorType>;

/**
 * The source from which document content was pulled, e.g. an API crawl or browser history
 */
declare const CustomDatasourceConfigConnectorType: {
    readonly ApiCrawl: "API_CRAWL";
    readonly BrowserCrawl: "BROWSER_CRAWL";
    readonly BrowserHistory: "BROWSER_HISTORY";
    readonly Builtin: "BUILTIN";
    readonly FederatedSearch: "FEDERATED_SEARCH";
    readonly PushApi: "PUSH_API";
    readonly WebCrawl: "WEB_CRAWL";
    readonly NativeHistory: "NATIVE_HISTORY";
};

/**
 * The source from which document content was pulled, e.g. an API crawl or browser history
 */
declare type CustomDatasourceConfigConnectorType = ClosedEnum<typeof CustomDatasourceConfigConnectorType>;

declare function customDatasourceConfigFromJSON(jsonString: string): Result<CustomDatasourceConfig, SDKValidationError>;

declare function customDatasourceConfigToJSON(customDatasourceConfig: CustomDatasourceConfig): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CustomDataValue$ {
    /** @deprecated use `CustomDataValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomDataValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomDataValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomDataValue$Outbound, z.ZodTypeDef, CustomDataValue>;
    /** @deprecated use `CustomDataValue$Outbound` instead. */
    type Outbound = CustomDataValue$Outbound;
}

/** @internal */
declare const CustomDataValue$inboundSchema: z.ZodType<CustomDataValue, z.ZodTypeDef, unknown>;

/** @internal */
declare type CustomDataValue$Outbound = {
    displayLabel?: string | undefined;
    stringValue?: string | undefined;
    stringListValue?: Array<string> | undefined;
    numberValue?: number | undefined;
    booleanValue?: boolean | undefined;
};

/** @internal */
declare const CustomDataValue$outboundSchema: z.ZodType<CustomDataValue$Outbound, z.ZodTypeDef, CustomDataValue>;

declare type CustomDataValue = {
    displayLabel?: string | undefined;
    stringValue?: string | undefined;
    /**
     * list of strings for multi-value properties
     */
    stringListValue?: Array<string> | undefined;
    numberValue?: number | undefined;
    booleanValue?: boolean | undefined;
};

declare function customDataValueFromJSON(jsonString: string): Result<CustomDataValue, SDKValidationError>;

declare function customDataValueToJSON(customDataValue: CustomDataValue): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CustomEntity$ {
    /** @deprecated use `CustomEntity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomEntity, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomEntity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomEntity$Outbound, z.ZodTypeDef, CustomEntity>;
    /** @deprecated use `CustomEntity$Outbound` instead. */
    type Outbound = CustomEntity$Outbound;
}

/** @internal */
declare const CustomEntity$inboundSchema: z.ZodType<CustomEntity, z.ZodTypeDef, unknown>;

/** @internal */
declare type CustomEntity$Outbound = {
    permissions?: ObjectPermissions$Outbound | undefined;
    id?: string | undefined;
    title?: string | undefined;
    datasource?: string | undefined;
    objectType?: string | undefined;
    metadata?: CustomEntityMetadata$Outbound | undefined;
    roles?: Array<UserRoleSpecification$Outbound> | undefined;
};

/** @internal */
declare const CustomEntity$outboundSchema: z.ZodType<CustomEntity$Outbound, z.ZodTypeDef, CustomEntity>;

declare type CustomEntity = {
    permissions?: ObjectPermissions | undefined;
    /**
     * Unique identifier.
     */
    id?: string | undefined;
    /**
     * Title or name of the custom entity.
     */
    title?: string | undefined;
    /**
     * The datasource the custom entity is from.
     */
    datasource?: string | undefined;
    /**
     * The type of the entity. Interpretation is specific to each datasource
     */
    objectType?: string | undefined;
    metadata?: CustomEntityMetadata | undefined;
    /**
     * A list of user roles for the custom entity explicitly granted by the owner.
     */
    roles?: Array<UserRoleSpecification> | undefined;
};

declare function customEntityFromJSON(jsonString: string): Result<CustomEntity, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CustomEntityMetadata$ {
    /** @deprecated use `CustomEntityMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomEntityMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomEntityMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomEntityMetadata$Outbound, z.ZodTypeDef, CustomEntityMetadata>;
    /** @deprecated use `CustomEntityMetadata$Outbound` instead. */
    type Outbound = CustomEntityMetadata$Outbound;
}

/** @internal */
declare const CustomEntityMetadata$inboundSchema: z.ZodType<CustomEntityMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type CustomEntityMetadata$Outbound = {
    customData?: {
        [k: string]: CustomDataValue$Outbound;
    } | undefined;
};

/** @internal */
declare const CustomEntityMetadata$outboundSchema: z.ZodType<CustomEntityMetadata$Outbound, z.ZodTypeDef, CustomEntityMetadata>;

declare type CustomEntityMetadata = {
    /**
     * Custom fields specific to individual datasources
     */
    customData?: {
        [k: string]: CustomDataValue;
    } | undefined;
};

declare function customEntityMetadataFromJSON(jsonString: string): Result<CustomEntityMetadata, SDKValidationError>;

declare function customEntityMetadataToJSON(customEntityMetadata: CustomEntityMetadata): string;

declare function customEntityToJSON(customEntity: CustomEntity): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Customer$ {
    /** @deprecated use `Customer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Customer, z.ZodTypeDef, unknown>;
    /** @deprecated use `Customer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Customer$Outbound, z.ZodTypeDef, Customer>;
    /** @deprecated use `Customer$Outbound` instead. */
    type Outbound = Customer$Outbound;
}

/** @internal */
declare const Customer$inboundSchema: z.ZodType<Customer, z.ZodTypeDef, unknown>;

/** @internal */
declare type Customer$Outbound = {
    id: string;
    domains?: Array<string> | undefined;
    company: Company$Outbound;
    documentCounts?: {
        [k: string]: number;
    } | undefined;
    poc?: Array<Person$Outbound> | undefined;
    metadata?: CustomerMetadata$Outbound | undefined;
    mergedCustomers?: Array<Customer$Outbound> | undefined;
    startDate?: string | undefined;
    contractAnnualRevenue?: number | undefined;
    notes?: string | undefined;
};

/** @internal */
declare const Customer$outboundSchema: z.ZodType<Customer$Outbound, z.ZodTypeDef, Customer>;

declare type Customer = {
    /**
     * Unique identifier.
     */
    id: string;
    /**
     * Link to company's associated website domains.
     */
    domains?: Array<string> | undefined;
    company: Company;
    /**
     * A map of {string, int} pairs representing counts of each document type associated with this customer.
     */
    documentCounts?: {
        [k: string]: number;
    } | undefined;
    /**
     * A list of POC for company.
     */
    poc?: Array<Person> | undefined;
    metadata?: CustomerMetadata | undefined;
    /**
     * A list of Customers.
     */
    mergedCustomers?: Array<Customer> | undefined;
    /**
     * The date when the interaction with customer started.
     */
    startDate?: RFCDate | undefined;
    /**
     * Average contract annual revenue with that customer.
     */
    contractAnnualRevenue?: number | undefined;
    /**
     * User facing (potentially generated) notes about company.
     */
    notes?: string | undefined;
};

declare function customerFromJSON(jsonString: string): Result<Customer, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CustomerMetadata$ {
    /** @deprecated use `CustomerMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerMetadata$Outbound, z.ZodTypeDef, CustomerMetadata>;
    /** @deprecated use `CustomerMetadata$Outbound` instead. */
    type Outbound = CustomerMetadata$Outbound;
}

/** @internal */
declare const CustomerMetadata$inboundSchema: z.ZodType<CustomerMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type CustomerMetadata$Outbound = {
    datasourceId?: string | undefined;
    customData?: {
        [k: string]: CustomDataValue$Outbound;
    } | undefined;
};

/** @internal */
declare const CustomerMetadata$outboundSchema: z.ZodType<CustomerMetadata$Outbound, z.ZodTypeDef, CustomerMetadata>;

declare type CustomerMetadata = {
    /**
     * The user visible id of the salesforce customer account.
     */
    datasourceId?: string | undefined;
    /**
     * Custom fields specific to individual datasources
     */
    customData?: {
        [k: string]: CustomDataValue;
    } | undefined;
};

declare function customerMetadataFromJSON(jsonString: string): Result<CustomerMetadata, SDKValidationError>;

declare function customerMetadataToJSON(customerMetadata: CustomerMetadata): string;

declare function customerToJSON(customer: Customer): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CustomFieldData$ {
    /** @deprecated use `CustomFieldData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldData, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldData$Outbound, z.ZodTypeDef, CustomFieldData>;
    /** @deprecated use `CustomFieldData$Outbound` instead. */
    type Outbound = CustomFieldData$Outbound;
}

/** @internal */
declare const CustomFieldData$inboundSchema: z.ZodType<CustomFieldData, z.ZodTypeDef, unknown>;

/** @internal */
declare type CustomFieldData$Outbound = {
    label: string;
    values: Array<CustomFieldValue$Outbound>;
    displayable: boolean;
};

/** @internal */
declare const CustomFieldData$outboundSchema: z.ZodType<CustomFieldData$Outbound, z.ZodTypeDef, CustomFieldData>;

declare type CustomFieldData = {
    /**
     * A user-facing label for this field.
     */
    label: string;
    values: Array<CustomFieldValue>;
    /**
     * Determines whether the client should display this custom field
     */
    displayable?: boolean | undefined;
};

declare function customFieldDataFromJSON(jsonString: string): Result<CustomFieldData, SDKValidationError>;

declare function customFieldDataToJSON(customFieldData: CustomFieldData): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CustomFieldValue$ {
    /** @deprecated use `CustomFieldValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldValue$Outbound, z.ZodTypeDef, CustomFieldValue>;
    /** @deprecated use `CustomFieldValue$Outbound` instead. */
    type Outbound = CustomFieldValue$Outbound;
}

/** @internal */
declare const CustomFieldValue$inboundSchema: z.ZodType<CustomFieldValue, z.ZodTypeDef, unknown>;

/** @internal */
declare type CustomFieldValue$Outbound = CustomFieldValueStr$Outbound | CustomFieldValueHyperlink$Outbound | CustomFieldValuePerson$Outbound;

/** @internal */
declare const CustomFieldValue$outboundSchema: z.ZodType<CustomFieldValue$Outbound, z.ZodTypeDef, CustomFieldValue>;

declare type CustomFieldValue = CustomFieldValueStr | CustomFieldValueHyperlink | CustomFieldValuePerson;

declare function customFieldValueFromJSON(jsonString: string): Result<CustomFieldValue, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CustomFieldValueHyperlink$ {
    /** @deprecated use `CustomFieldValueHyperlink$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldValueHyperlink, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldValueHyperlink$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldValueHyperlink$Outbound, z.ZodTypeDef, CustomFieldValueHyperlink>;
    /** @deprecated use `CustomFieldValueHyperlink$Outbound` instead. */
    type Outbound = CustomFieldValueHyperlink$Outbound;
}

/** @internal */
declare const CustomFieldValueHyperlink$inboundSchema: z.ZodType<CustomFieldValueHyperlink, z.ZodTypeDef, unknown>;

/** @internal */
declare type CustomFieldValueHyperlink$Outbound = {
    urlAnchor?: string | undefined;
    urlLink?: string | undefined;
};

/** @internal */
declare const CustomFieldValueHyperlink$outboundSchema: z.ZodType<CustomFieldValueHyperlink$Outbound, z.ZodTypeDef, CustomFieldValueHyperlink>;

declare type CustomFieldValueHyperlink = {
    /**
     * Anchor text for hyperlink.
     */
    urlAnchor?: string | undefined;
    /**
     * Link for this URL.
     */
    urlLink?: string | undefined;
};

declare function customFieldValueHyperlinkFromJSON(jsonString: string): Result<CustomFieldValueHyperlink, SDKValidationError>;

declare function customFieldValueHyperlinkToJSON(customFieldValueHyperlink: CustomFieldValueHyperlink): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CustomFieldValuePerson$ {
    /** @deprecated use `CustomFieldValuePerson$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldValuePerson, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldValuePerson$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldValuePerson$Outbound, z.ZodTypeDef, CustomFieldValuePerson>;
    /** @deprecated use `CustomFieldValuePerson$Outbound` instead. */
    type Outbound = CustomFieldValuePerson$Outbound;
}

/** @internal */
declare const CustomFieldValuePerson$inboundSchema: z.ZodType<CustomFieldValuePerson, z.ZodTypeDef, unknown>;

/** @internal */
declare type CustomFieldValuePerson$Outbound = {
    person?: Person$Outbound | undefined;
};

/** @internal */
declare const CustomFieldValuePerson$outboundSchema: z.ZodType<CustomFieldValuePerson$Outbound, z.ZodTypeDef, CustomFieldValuePerson>;

declare type CustomFieldValuePerson = {
    person?: Person | undefined;
};

declare function customFieldValuePersonFromJSON(jsonString: string): Result<CustomFieldValuePerson, SDKValidationError>;

declare function customFieldValuePersonToJSON(customFieldValuePerson: CustomFieldValuePerson): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CustomFieldValueStr$ {
    /** @deprecated use `CustomFieldValueStr$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldValueStr, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldValueStr$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldValueStr$Outbound, z.ZodTypeDef, CustomFieldValueStr>;
    /** @deprecated use `CustomFieldValueStr$Outbound` instead. */
    type Outbound = CustomFieldValueStr$Outbound;
}

/** @internal */
declare const CustomFieldValueStr$inboundSchema: z.ZodType<CustomFieldValueStr, z.ZodTypeDef, unknown>;

/** @internal */
declare type CustomFieldValueStr$Outbound = {
    strText?: string | undefined;
};

/** @internal */
declare const CustomFieldValueStr$outboundSchema: z.ZodType<CustomFieldValueStr$Outbound, z.ZodTypeDef, CustomFieldValueStr>;

declare type CustomFieldValueStr = {
    /**
     * Text field for string value.
     */
    strText?: string | undefined;
};

declare function customFieldValueStrFromJSON(jsonString: string): Result<CustomFieldValueStr, SDKValidationError>;

declare function customFieldValueStrToJSON(customFieldValueStr: CustomFieldValueStr): string;

declare function customFieldValueToJSON(customFieldValue: CustomFieldValue): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace CustomProperty$ {
    /** @deprecated use `CustomProperty$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomProperty, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomProperty$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomProperty$Outbound, z.ZodTypeDef, CustomProperty>;
    /** @deprecated use `CustomProperty$Outbound` instead. */
    type Outbound = CustomProperty$Outbound;
}

/** @internal */
declare const CustomProperty$inboundSchema: z.ZodType<CustomProperty, z.ZodTypeDef, unknown>;

/** @internal */
declare type CustomProperty$Outbound = {
    name?: string | undefined;
    value?: any | undefined;
};

/** @internal */
declare const CustomProperty$outboundSchema: z.ZodType<CustomProperty$Outbound, z.ZodTypeDef, CustomProperty>;

/**
 * Describes the custom properties of the object.
 */
declare type CustomProperty = {
    name?: string | undefined;
    /**
     * Must either be a string or an array of strings. An integer, boolean, etc. is not valid. When OpenAPI Generator supports `oneOf`, we can semantically enforce this.
     */
    value?: any | undefined;
};

declare function customPropertyFromJSON(jsonString: string): Result<CustomProperty, SDKValidationError>;

declare function customPropertyToJSON(customProperty: CustomProperty): string;

declare class Data extends ClientSDK {
    private _policies?;
    get policies(): Policies;
    private _reports?;
    get reports(): Reports;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Datasource$ {
    /** @deprecated use `Datasource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Slack: "SLACK";
        readonly Microsoftteams: "MICROSOFTTEAMS";
        readonly Facebookworkplace: "FACEBOOKWORKPLACE";
    }>;
    /** @deprecated use `Datasource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Slack: "SLACK";
        readonly Microsoftteams: "MICROSOFTTEAMS";
        readonly Facebookworkplace: "FACEBOOKWORKPLACE";
    }>;
}

/** @internal */
declare const Datasource$inboundSchema: z.ZodNativeEnum<typeof Datasource>;

/** @internal */
declare const Datasource$outboundSchema: z.ZodNativeEnum<typeof Datasource>;

/**
 * The type of the data source. Missing field defaults to SLACK.
 */
declare const Datasource: {
    readonly Slack: "SLACK";
    readonly Microsoftteams: "MICROSOFTTEAMS";
    readonly Facebookworkplace: "FACEBOOKWORKPLACE";
};

/**
 * The type of the data source. Missing field defaults to SLACK.
 */
declare type Datasource = ClosedEnum<typeof Datasource>;

declare class Datasource_2 extends ClientSDK {
    /**
     * Beta: Get datasource status
     *
     * @remarks
     * Gather information about the datasource's overall status. Currently in beta, might undergo breaking changes without prior notice.
     *
     * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/indexing/debugging/datasource-config) for more information.
     */
    status(datasource: string, options?: RequestOptions): Promise<components.DebugDatasourceStatusResponse>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DatasourceBulkMembershipDefinition$ {
    /** @deprecated use `DatasourceBulkMembershipDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DatasourceBulkMembershipDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `DatasourceBulkMembershipDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DatasourceBulkMembershipDefinition$Outbound, z.ZodTypeDef, DatasourceBulkMembershipDefinition>;
    /** @deprecated use `DatasourceBulkMembershipDefinition$Outbound` instead. */
    type Outbound = DatasourceBulkMembershipDefinition$Outbound;
}

/** @internal */
declare const DatasourceBulkMembershipDefinition$inboundSchema: z.ZodType<DatasourceBulkMembershipDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type DatasourceBulkMembershipDefinition$Outbound = {
    memberUserId?: string | undefined;
    memberGroupName?: string | undefined;
};

/** @internal */
declare const DatasourceBulkMembershipDefinition$outboundSchema: z.ZodType<DatasourceBulkMembershipDefinition$Outbound, z.ZodTypeDef, DatasourceBulkMembershipDefinition>;

/**
 * describes the membership row of a group in the bulk uploaded. Only one of memberUserId and memberGroupName can be specified.
 */
declare type DatasourceBulkMembershipDefinition = {
    /**
     * If the member is a user, then the email or datasource id for the user
     */
    memberUserId?: string | undefined;
    /**
     * If the member is a group, then the name of the member group
     */
    memberGroupName?: string | undefined;
};

declare function datasourceBulkMembershipDefinitionFromJSON(jsonString: string): Result<DatasourceBulkMembershipDefinition, SDKValidationError>;

declare function datasourceBulkMembershipDefinitionToJSON(datasourceBulkMembershipDefinition: DatasourceBulkMembershipDefinition): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DatasourceCategory$ {
    /** @deprecated use `DatasourceCategory$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Uncategorized: "UNCATEGORIZED";
        readonly Tickets: "TICKETS";
        readonly Crm: "CRM";
        readonly PublishedContent: "PUBLISHED_CONTENT";
        readonly CollaborativeContent: "COLLABORATIVE_CONTENT";
        readonly QuestionAnswer: "QUESTION_ANSWER";
        readonly Messaging: "MESSAGING";
        readonly CodeRepository: "CODE_REPOSITORY";
        readonly ChangeManagement: "CHANGE_MANAGEMENT";
        readonly People: "PEOPLE";
        readonly Email: "EMAIL";
        readonly Sso: "SSO";
        readonly Ats: "ATS";
        readonly KnowledgeHub: "KNOWLEDGE_HUB";
        readonly ExternalShortcut: "EXTERNAL_SHORTCUT";
        readonly Entity: "ENTITY";
        readonly Calendar: "CALENDAR";
        readonly Agents: "AGENTS";
    }>;
    /** @deprecated use `DatasourceCategory$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Uncategorized: "UNCATEGORIZED";
        readonly Tickets: "TICKETS";
        readonly Crm: "CRM";
        readonly PublishedContent: "PUBLISHED_CONTENT";
        readonly CollaborativeContent: "COLLABORATIVE_CONTENT";
        readonly QuestionAnswer: "QUESTION_ANSWER";
        readonly Messaging: "MESSAGING";
        readonly CodeRepository: "CODE_REPOSITORY";
        readonly ChangeManagement: "CHANGE_MANAGEMENT";
        readonly People: "PEOPLE";
        readonly Email: "EMAIL";
        readonly Sso: "SSO";
        readonly Ats: "ATS";
        readonly KnowledgeHub: "KNOWLEDGE_HUB";
        readonly ExternalShortcut: "EXTERNAL_SHORTCUT";
        readonly Entity: "ENTITY";
        readonly Calendar: "CALENDAR";
        readonly Agents: "AGENTS";
    }>;
}

/** @internal */
declare const DatasourceCategory$inboundSchema: z.ZodNativeEnum<typeof DatasourceCategory>;

/** @internal */
declare const DatasourceCategory$outboundSchema: z.ZodNativeEnum<typeof DatasourceCategory>;

/**
 * The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
 */
declare const DatasourceCategory: {
    readonly Uncategorized: "UNCATEGORIZED";
    readonly Tickets: "TICKETS";
    readonly Crm: "CRM";
    readonly PublishedContent: "PUBLISHED_CONTENT";
    readonly CollaborativeContent: "COLLABORATIVE_CONTENT";
    readonly QuestionAnswer: "QUESTION_ANSWER";
    readonly Messaging: "MESSAGING";
    readonly CodeRepository: "CODE_REPOSITORY";
    readonly ChangeManagement: "CHANGE_MANAGEMENT";
    readonly People: "PEOPLE";
    readonly Email: "EMAIL";
    readonly Sso: "SSO";
    readonly Ats: "ATS";
    readonly KnowledgeHub: "KNOWLEDGE_HUB";
    readonly ExternalShortcut: "EXTERNAL_SHORTCUT";
    readonly Entity: "ENTITY";
    readonly Calendar: "CALENDAR";
    readonly Agents: "AGENTS";
};

/**
 * The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
 */
declare type DatasourceCategory = ClosedEnum<typeof DatasourceCategory>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DatasourceGroupDefinition$ {
    /** @deprecated use `DatasourceGroupDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DatasourceGroupDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `DatasourceGroupDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DatasourceGroupDefinition$Outbound, z.ZodTypeDef, DatasourceGroupDefinition>;
    /** @deprecated use `DatasourceGroupDefinition$Outbound` instead. */
    type Outbound = DatasourceGroupDefinition$Outbound;
}

/** @internal */
declare const DatasourceGroupDefinition$inboundSchema: z.ZodType<DatasourceGroupDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type DatasourceGroupDefinition$Outbound = {
    name: string;
};

/** @internal */
declare const DatasourceGroupDefinition$outboundSchema: z.ZodType<DatasourceGroupDefinition$Outbound, z.ZodTypeDef, DatasourceGroupDefinition>;

/**
 * describes a group in the datasource
 */
declare type DatasourceGroupDefinition = {
    /**
     * name of the group. Should be unique among all groups for the datasource, and cannot have spaces.
     */
    name: string;
};

declare function datasourceGroupDefinitionFromJSON(jsonString: string): Result<DatasourceGroupDefinition, SDKValidationError>;

declare function datasourceGroupDefinitionToJSON(datasourceGroupDefinition: DatasourceGroupDefinition): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DatasourceMembershipDefinition$ {
    /** @deprecated use `DatasourceMembershipDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DatasourceMembershipDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `DatasourceMembershipDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DatasourceMembershipDefinition$Outbound, z.ZodTypeDef, DatasourceMembershipDefinition>;
    /** @deprecated use `DatasourceMembershipDefinition$Outbound` instead. */
    type Outbound = DatasourceMembershipDefinition$Outbound;
}

/** @internal */
declare const DatasourceMembershipDefinition$inboundSchema: z.ZodType<DatasourceMembershipDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type DatasourceMembershipDefinition$Outbound = {
    groupName: string;
    memberUserId?: string | undefined;
    memberGroupName?: string | undefined;
};

/** @internal */
declare const DatasourceMembershipDefinition$outboundSchema: z.ZodType<DatasourceMembershipDefinition$Outbound, z.ZodTypeDef, DatasourceMembershipDefinition>;

/**
 * describes the membership row of a group. Only one of memberUserId and memberGroupName can be specified.
 */
declare type DatasourceMembershipDefinition = {
    /**
     * The group for which the membership is specified
     */
    groupName: string;
    /**
     * If the member is a user, then the email or datasource id for the user
     */
    memberUserId?: string | undefined;
    /**
     * If the member is a group, then the name of the member group
     */
    memberGroupName?: string | undefined;
};

declare function datasourceMembershipDefinitionFromJSON(jsonString: string): Result<DatasourceMembershipDefinition, SDKValidationError>;

declare function datasourceMembershipDefinitionToJSON(datasourceMembershipDefinition: DatasourceMembershipDefinition): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DatasourceObjectTypeDocumentCountEntry$ {
    /** @deprecated use `DatasourceObjectTypeDocumentCountEntry$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DatasourceObjectTypeDocumentCountEntry, z.ZodTypeDef, unknown>;
    /** @deprecated use `DatasourceObjectTypeDocumentCountEntry$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DatasourceObjectTypeDocumentCountEntry$Outbound, z.ZodTypeDef, DatasourceObjectTypeDocumentCountEntry>;
    /** @deprecated use `DatasourceObjectTypeDocumentCountEntry$Outbound` instead. */
    type Outbound = DatasourceObjectTypeDocumentCountEntry$Outbound;
}

/** @internal */
declare const DatasourceObjectTypeDocumentCountEntry$inboundSchema: z.ZodType<DatasourceObjectTypeDocumentCountEntry, z.ZodTypeDef, unknown>;

/** @internal */
declare type DatasourceObjectTypeDocumentCountEntry$Outbound = {
    objectType?: string | undefined;
    count?: number | undefined;
};

/** @internal */
declare const DatasourceObjectTypeDocumentCountEntry$outboundSchema: z.ZodType<DatasourceObjectTypeDocumentCountEntry$Outbound, z.ZodTypeDef, DatasourceObjectTypeDocumentCountEntry>;

declare type DatasourceObjectTypeDocumentCountEntry = {
    /**
     * The object type of the document
     */
    objectType?: string | undefined;
    /**
     * The number of documents of the corresponding objectType
     */
    count?: number | undefined;
};

declare function datasourceObjectTypeDocumentCountEntryFromJSON(jsonString: string): Result<DatasourceObjectTypeDocumentCountEntry, SDKValidationError>;

declare function datasourceObjectTypeDocumentCountEntryToJSON(datasourceObjectTypeDocumentCountEntry: DatasourceObjectTypeDocumentCountEntry): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DatasourceProfile$ {
    /** @deprecated use `DatasourceProfile$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DatasourceProfile, z.ZodTypeDef, unknown>;
    /** @deprecated use `DatasourceProfile$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DatasourceProfile$Outbound, z.ZodTypeDef, DatasourceProfile>;
    /** @deprecated use `DatasourceProfile$Outbound` instead. */
    type Outbound = DatasourceProfile$Outbound;
}

/** @internal */
declare const DatasourceProfile$inboundSchema: z.ZodType<DatasourceProfile, z.ZodTypeDef, unknown>;

/** @internal */
declare type DatasourceProfile$Outbound = {
    datasource: string;
    handle: string;
    url?: string | undefined;
    nativeAppUrl?: string | undefined;
    isUserGenerated?: boolean | undefined;
};

/** @internal */
declare const DatasourceProfile$outboundSchema: z.ZodType<DatasourceProfile$Outbound, z.ZodTypeDef, DatasourceProfile>;

declare type DatasourceProfile = {
    /**
     * The datasource the profile is of.
     */
    datasource: string;
    /**
     * The display name of the entity in the given datasource.
     */
    handle: string;
    /**
     * URL to view the entity's profile.
     */
    url?: string | undefined;
    /**
     * A deep link, if available, into the datasource's native application for the entity's platform (i.e. slack://...).
     */
    nativeAppUrl?: string | undefined;
    /**
     * For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)
     */
    isUserGenerated?: boolean | undefined;
};

declare function datasourceProfileFromJSON(jsonString: string): Result<DatasourceProfile, SDKValidationError>;

declare function datasourceProfileToJSON(datasourceProfile: DatasourceProfile): string;

declare class Datasources extends ClientSDK {
    /**
     * Add or update datasource
     *
     * @remarks
     * Add or update a custom datasource and its schema.
     */
    add(request: components.CustomDatasourceConfig, options?: RequestOptions): Promise<void>;
    /**
     * Get datasource config
     *
     * @remarks
     * Fetches the datasource config for the specified custom datasource.
     */
    retrieveConfig(request: components.GetDatasourceConfigRequest, options?: RequestOptions): Promise<components.CustomDatasourceConfig>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DatasourcesType$ {
    /** @deprecated use `DatasourcesType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly All: "ALL";
        readonly Custom: "CUSTOM";
    }>;
    /** @deprecated use `DatasourcesType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly All: "ALL";
        readonly Custom: "CUSTOM";
    }>;
}

/** @internal */
declare const DatasourcesType$inboundSchema: z.ZodNativeEnum<typeof DatasourcesType>;

/** @internal */
declare const DatasourcesType$outboundSchema: z.ZodNativeEnum<typeof DatasourcesType>;

/**
 * The types of datasource for which to run the report/policy.
 */
declare const DatasourcesType: {
    readonly All: "ALL";
    readonly Custom: "CUSTOM";
};

/**
 * The types of datasource for which to run the report/policy.
 */
declare type DatasourcesType = ClosedEnum<typeof DatasourcesType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DatasourceUserDefinition$ {
    /** @deprecated use `DatasourceUserDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DatasourceUserDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `DatasourceUserDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DatasourceUserDefinition$Outbound, z.ZodTypeDef, DatasourceUserDefinition>;
    /** @deprecated use `DatasourceUserDefinition$Outbound` instead. */
    type Outbound = DatasourceUserDefinition$Outbound;
}

/** @internal */
declare const DatasourceUserDefinition$inboundSchema: z.ZodType<DatasourceUserDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type DatasourceUserDefinition$Outbound = {
    email: string;
    userId?: string | undefined;
    name: string;
    isActive?: boolean | undefined;
};

/** @internal */
declare const DatasourceUserDefinition$outboundSchema: z.ZodType<DatasourceUserDefinition$Outbound, z.ZodTypeDef, DatasourceUserDefinition>;

/**
 * describes a user in the datasource
 */
declare type DatasourceUserDefinition = {
    email: string;
    /**
     * To be supplied if the user id in the datasource is not the email
     */
    userId?: string | undefined;
    name: string;
    /**
     * set to false if the user is a former employee or a bot
     */
    isActive?: boolean | undefined;
};

declare function datasourceUserDefinitionFromJSON(jsonString: string): Result<DatasourceUserDefinition, SDKValidationError>;

declare function datasourceUserDefinitionToJSON(datasourceUserDefinition: DatasourceUserDefinition): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DatasourceVisibility$ {
    /** @deprecated use `DatasourceVisibility$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EnabledForAll: "ENABLED_FOR_ALL";
        readonly EnabledForTestGroup: "ENABLED_FOR_TEST_GROUP";
        readonly NotEnabled: "NOT_ENABLED";
    }>;
    /** @deprecated use `DatasourceVisibility$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EnabledForAll: "ENABLED_FOR_ALL";
        readonly EnabledForTestGroup: "ENABLED_FOR_TEST_GROUP";
        readonly NotEnabled: "NOT_ENABLED";
    }>;
}

/** @internal */
declare const DatasourceVisibility$inboundSchema: z.ZodNativeEnum<typeof DatasourceVisibility>;

/** @internal */
declare const DatasourceVisibility$outboundSchema: z.ZodNativeEnum<typeof DatasourceVisibility>;

/**
 * The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
 */
declare const DatasourceVisibility: {
    readonly EnabledForAll: "ENABLED_FOR_ALL";
    readonly EnabledForTestGroup: "ENABLED_FOR_TEST_GROUP";
    readonly NotEnabled: "NOT_ENABLED";
};

/**
 * The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
 */
declare type DatasourceVisibility = ClosedEnum<typeof DatasourceVisibility>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DebugDatasourceStatusIdentityResponseComponent$ {
    /** @deprecated use `DebugDatasourceStatusIdentityResponseComponent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DebugDatasourceStatusIdentityResponseComponent, z.ZodTypeDef, unknown>;
    /** @deprecated use `DebugDatasourceStatusIdentityResponseComponent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DebugDatasourceStatusIdentityResponseComponent$Outbound, z.ZodTypeDef, DebugDatasourceStatusIdentityResponseComponent>;
    /** @deprecated use `DebugDatasourceStatusIdentityResponseComponent$Outbound` instead. */
    type Outbound = DebugDatasourceStatusIdentityResponseComponent$Outbound;
}

/** @internal */
declare const DebugDatasourceStatusIdentityResponseComponent$inboundSchema: z.ZodType<DebugDatasourceStatusIdentityResponseComponent, z.ZodTypeDef, unknown>;

/** @internal */
declare type DebugDatasourceStatusIdentityResponseComponent$Outbound = {
    bulkUploadHistory?: Array<BulkUploadHistoryEvent$Outbound> | undefined;
    counts?: DebugDatasourceStatusIdentityResponseComponentCounts$Outbound | undefined;
};

/** @internal */
declare const DebugDatasourceStatusIdentityResponseComponent$outboundSchema: z.ZodType<DebugDatasourceStatusIdentityResponseComponent$Outbound, z.ZodTypeDef, DebugDatasourceStatusIdentityResponseComponent>;

declare type DebugDatasourceStatusIdentityResponseComponent = {
    /**
     * Information about active and recent successful uploads for the datasource
     */
    bulkUploadHistory?: Array<BulkUploadHistoryEvent> | undefined;
    counts?: DebugDatasourceStatusIdentityResponseComponentCounts | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DebugDatasourceStatusIdentityResponseComponentCounts$ {
    /** @deprecated use `DebugDatasourceStatusIdentityResponseComponentCounts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DebugDatasourceStatusIdentityResponseComponentCounts, z.ZodTypeDef, unknown>;
    /** @deprecated use `DebugDatasourceStatusIdentityResponseComponentCounts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DebugDatasourceStatusIdentityResponseComponentCounts$Outbound, z.ZodTypeDef, DebugDatasourceStatusIdentityResponseComponentCounts>;
    /** @deprecated use `DebugDatasourceStatusIdentityResponseComponentCounts$Outbound` instead. */
    type Outbound = DebugDatasourceStatusIdentityResponseComponentCounts$Outbound;
}

/** @internal */
declare const DebugDatasourceStatusIdentityResponseComponentCounts$inboundSchema: z.ZodType<DebugDatasourceStatusIdentityResponseComponentCounts, z.ZodTypeDef, unknown>;

/** @internal */
declare type DebugDatasourceStatusIdentityResponseComponentCounts$Outbound = {
    uploaded?: number | undefined;
};

/** @internal */
declare const DebugDatasourceStatusIdentityResponseComponentCounts$outboundSchema: z.ZodType<DebugDatasourceStatusIdentityResponseComponentCounts$Outbound, z.ZodTypeDef, DebugDatasourceStatusIdentityResponseComponentCounts>;

declare type DebugDatasourceStatusIdentityResponseComponentCounts = {
    /**
     * The number of users/groups/memberships uploaded
     */
    uploaded?: number | undefined;
};

declare function debugDatasourceStatusIdentityResponseComponentCountsFromJSON(jsonString: string): Result<DebugDatasourceStatusIdentityResponseComponentCounts, SDKValidationError>;

declare function debugDatasourceStatusIdentityResponseComponentCountsToJSON(debugDatasourceStatusIdentityResponseComponentCounts: DebugDatasourceStatusIdentityResponseComponentCounts): string;

declare function debugDatasourceStatusIdentityResponseComponentFromJSON(jsonString: string): Result<DebugDatasourceStatusIdentityResponseComponent, SDKValidationError>;

declare function debugDatasourceStatusIdentityResponseComponentToJSON(debugDatasourceStatusIdentityResponseComponent: DebugDatasourceStatusIdentityResponseComponent): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DebugDatasourceStatusResponse$ {
    /** @deprecated use `DebugDatasourceStatusResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DebugDatasourceStatusResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `DebugDatasourceStatusResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DebugDatasourceStatusResponse$Outbound, z.ZodTypeDef, DebugDatasourceStatusResponse>;
    /** @deprecated use `DebugDatasourceStatusResponse$Outbound` instead. */
    type Outbound = DebugDatasourceStatusResponse$Outbound;
}

/** @internal */
declare const DebugDatasourceStatusResponse$inboundSchema: z.ZodType<DebugDatasourceStatusResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type DebugDatasourceStatusResponse$Outbound = {
    documents?: Documents$Outbound | undefined;
    identity?: Identity$Outbound | undefined;
    datasourceVisibility?: string | undefined;
};

/** @internal */
declare const DebugDatasourceStatusResponse$outboundSchema: z.ZodType<DebugDatasourceStatusResponse$Outbound, z.ZodTypeDef, DebugDatasourceStatusResponse>;

/**
 * Describes the response body of the /debug/{datasource}/status API call
 */
declare type DebugDatasourceStatusResponse = {
    documents?: Documents | undefined;
    identity?: Identity | undefined;
    /**
     * The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
     */
    datasourceVisibility?: DatasourceVisibility | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DebugDatasourceStatusResponseCounts$ {
    /** @deprecated use `DebugDatasourceStatusResponseCounts$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DebugDatasourceStatusResponseCounts, z.ZodTypeDef, unknown>;
    /** @deprecated use `DebugDatasourceStatusResponseCounts$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DebugDatasourceStatusResponseCounts$Outbound, z.ZodTypeDef, DebugDatasourceStatusResponseCounts>;
    /** @deprecated use `DebugDatasourceStatusResponseCounts$Outbound` instead. */
    type Outbound = DebugDatasourceStatusResponseCounts$Outbound;
}

/** @internal */
declare const DebugDatasourceStatusResponseCounts$inboundSchema: z.ZodType<DebugDatasourceStatusResponseCounts, z.ZodTypeDef, unknown>;

/** @internal */
declare type DebugDatasourceStatusResponseCounts$Outbound = {
    uploaded?: Array<DatasourceObjectTypeDocumentCountEntry$Outbound> | undefined;
    indexed?: Array<DatasourceObjectTypeDocumentCountEntry$Outbound> | undefined;
};

/** @internal */
declare const DebugDatasourceStatusResponseCounts$outboundSchema: z.ZodType<DebugDatasourceStatusResponseCounts$Outbound, z.ZodTypeDef, DebugDatasourceStatusResponseCounts>;

declare type DebugDatasourceStatusResponseCounts = {
    /**
     * A list of object types and corresponding upload counts
     */
    uploaded?: Array<DatasourceObjectTypeDocumentCountEntry> | undefined;
    /**
     * The number of documents indexed, grouped by objectType
     */
    indexed?: Array<DatasourceObjectTypeDocumentCountEntry> | undefined;
};

declare function debugDatasourceStatusResponseCountsFromJSON(jsonString: string): Result<DebugDatasourceStatusResponseCounts, SDKValidationError>;

declare function debugDatasourceStatusResponseCountsToJSON(debugDatasourceStatusResponseCounts: DebugDatasourceStatusResponseCounts): string;

declare function debugDatasourceStatusResponseFromJSON(jsonString: string): Result<DebugDatasourceStatusResponse, SDKValidationError>;

declare function debugDatasourceStatusResponseToJSON(debugDatasourceStatusResponse: DebugDatasourceStatusResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DebugDocumentRequest$ {
    /** @deprecated use `DebugDocumentRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DebugDocumentRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DebugDocumentRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DebugDocumentRequest$Outbound, z.ZodTypeDef, DebugDocumentRequest>;
    /** @deprecated use `DebugDocumentRequest$Outbound` instead. */
    type Outbound = DebugDocumentRequest$Outbound;
}

/** @internal */
declare const DebugDocumentRequest$inboundSchema: z.ZodType<DebugDocumentRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DebugDocumentRequest$Outbound = {
    objectType: string;
    docId: string;
};

/** @internal */
declare const DebugDocumentRequest$outboundSchema: z.ZodType<DebugDocumentRequest$Outbound, z.ZodTypeDef, DebugDocumentRequest>;

/**
 * Describes the request body of the /debug/{datasource}/document API call.
 */
declare type DebugDocumentRequest = {
    /**
     * Object type of the document to get the status for.
     */
    objectType: string;
    /**
     * Glean Document ID within the datasource to get the status for.
     */
    docId: string;
};

declare function debugDocumentRequestFromJSON(jsonString: string): Result<DebugDocumentRequest, SDKValidationError>;

declare function debugDocumentRequestToJSON(debugDocumentRequest: DebugDocumentRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DebugDocumentResponse$ {
    /** @deprecated use `DebugDocumentResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DebugDocumentResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `DebugDocumentResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DebugDocumentResponse$Outbound, z.ZodTypeDef, DebugDocumentResponse>;
    /** @deprecated use `DebugDocumentResponse$Outbound` instead. */
    type Outbound = DebugDocumentResponse$Outbound;
}

/** @internal */
declare const DebugDocumentResponse$inboundSchema: z.ZodType<DebugDocumentResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type DebugDocumentResponse$Outbound = {
    status?: DocumentStatusResponse$Outbound | undefined;
    uploadedPermissions?: DocumentPermissionsDefinition$Outbound | undefined;
};

/** @internal */
declare const DebugDocumentResponse$outboundSchema: z.ZodType<DebugDocumentResponse$Outbound, z.ZodTypeDef, DebugDocumentResponse>;

/**
 * Describes the response body of the /debug/{datasource}/document API call
 */
declare type DebugDocumentResponse = {
    /**
     * Describes the document status response body
     */
    status?: DocumentStatusResponse | undefined;
    /**
     * describes the access control details of the document
     */
    uploadedPermissions?: DocumentPermissionsDefinition | undefined;
};

declare function debugDocumentResponseFromJSON(jsonString: string): Result<DebugDocumentResponse, SDKValidationError>;

declare function debugDocumentResponseToJSON(debugDocumentResponse: DebugDocumentResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DebugDocumentsRequest$ {
    /** @deprecated use `DebugDocumentsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DebugDocumentsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DebugDocumentsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DebugDocumentsRequest$Outbound, z.ZodTypeDef, DebugDocumentsRequest>;
    /** @deprecated use `DebugDocumentsRequest$Outbound` instead. */
    type Outbound = DebugDocumentsRequest$Outbound;
}

/** @internal */
declare const DebugDocumentsRequest$inboundSchema: z.ZodType<DebugDocumentsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DebugDocumentsRequest$Outbound = {
    debugDocuments: Array<DebugDocumentRequest$Outbound>;
};

/** @internal */
declare const DebugDocumentsRequest$outboundSchema: z.ZodType<DebugDocumentsRequest$Outbound, z.ZodTypeDef, DebugDocumentsRequest>;

/**
 * Describes the request body of the /debug/{datasource}/documents API call.
 */
declare type DebugDocumentsRequest = {
    /**
     * Documents to fetch debug information for
     */
    debugDocuments: Array<DebugDocumentRequest>;
};

declare function debugDocumentsRequestFromJSON(jsonString: string): Result<DebugDocumentsRequest, SDKValidationError>;

declare function debugDocumentsRequestToJSON(debugDocumentsRequest: DebugDocumentsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DebugDocumentsResponse$ {
    /** @deprecated use `DebugDocumentsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DebugDocumentsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `DebugDocumentsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DebugDocumentsResponse$Outbound, z.ZodTypeDef, DebugDocumentsResponse>;
    /** @deprecated use `DebugDocumentsResponse$Outbound` instead. */
    type Outbound = DebugDocumentsResponse$Outbound;
}

/** @internal */
declare const DebugDocumentsResponse$inboundSchema: z.ZodType<DebugDocumentsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type DebugDocumentsResponse$Outbound = {
    documentStatuses?: Array<DebugDocumentsResponseItem$Outbound> | undefined;
};

/** @internal */
declare const DebugDocumentsResponse$outboundSchema: z.ZodType<DebugDocumentsResponse$Outbound, z.ZodTypeDef, DebugDocumentsResponse>;

/**
 * Describes the response body of a single document in the /debug/{datasource}/documents API call
 */
declare type DebugDocumentsResponse = {
    /**
     * List of document ids/urls and their debug information
     */
    documentStatuses?: Array<DebugDocumentsResponseItem> | undefined;
};

declare function debugDocumentsResponseFromJSON(jsonString: string): Result<DebugDocumentsResponse, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DebugDocumentsResponseItem$ {
    /** @deprecated use `DebugDocumentsResponseItem$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DebugDocumentsResponseItem, z.ZodTypeDef, unknown>;
    /** @deprecated use `DebugDocumentsResponseItem$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DebugDocumentsResponseItem$Outbound, z.ZodTypeDef, DebugDocumentsResponseItem>;
    /** @deprecated use `DebugDocumentsResponseItem$Outbound` instead. */
    type Outbound = DebugDocumentsResponseItem$Outbound;
}

/** @internal */
declare const DebugDocumentsResponseItem$inboundSchema: z.ZodType<DebugDocumentsResponseItem, z.ZodTypeDef, unknown>;

/** @internal */
declare type DebugDocumentsResponseItem$Outbound = {
    docId?: string | undefined;
    objectType?: string | undefined;
    debugInfo?: DebugDocumentResponse$Outbound | undefined;
};

/** @internal */
declare const DebugDocumentsResponseItem$outboundSchema: z.ZodType<DebugDocumentsResponseItem$Outbound, z.ZodTypeDef, DebugDocumentsResponseItem>;

/**
 * Describes the response body of a single document in the /debug/{datasource}/documents API call
 */
declare type DebugDocumentsResponseItem = {
    /**
     * Id of the document
     */
    docId?: string | undefined;
    /**
     * objectType of the document
     */
    objectType?: string | undefined;
    /**
     * Describes the response body of the /debug/{datasource}/document API call
     */
    debugInfo?: DebugDocumentResponse | undefined;
};

declare function debugDocumentsResponseItemFromJSON(jsonString: string): Result<DebugDocumentsResponseItem, SDKValidationError>;

declare function debugDocumentsResponseItemToJSON(debugDocumentsResponseItem: DebugDocumentsResponseItem): string;

declare function debugDocumentsResponseToJSON(debugDocumentsResponse: DebugDocumentsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DebugUserRequest$ {
    /** @deprecated use `DebugUserRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DebugUserRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DebugUserRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DebugUserRequest$Outbound, z.ZodTypeDef, DebugUserRequest>;
    /** @deprecated use `DebugUserRequest$Outbound` instead. */
    type Outbound = DebugUserRequest$Outbound;
}

/** @internal */
declare const DebugUserRequest$inboundSchema: z.ZodType<DebugUserRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DebugUserRequest$Outbound = {
    email: string;
};

/** @internal */
declare const DebugUserRequest$outboundSchema: z.ZodType<DebugUserRequest$Outbound, z.ZodTypeDef, DebugUserRequest>;

/**
 * Describes the request body of the /debug/{datasource}/user API call
 */
declare type DebugUserRequest = {
    /**
     * Email ID of the user to get the status for
     */
    email: string;
};

declare function debugUserRequestFromJSON(jsonString: string): Result<DebugUserRequest, SDKValidationError>;

declare function debugUserRequestToJSON(debugUserRequest: DebugUserRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DebugUserResponse$ {
    /** @deprecated use `DebugUserResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DebugUserResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `DebugUserResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DebugUserResponse$Outbound, z.ZodTypeDef, DebugUserResponse>;
    /** @deprecated use `DebugUserResponse$Outbound` instead. */
    type Outbound = DebugUserResponse$Outbound;
}

/** @internal */
declare const DebugUserResponse$inboundSchema: z.ZodType<DebugUserResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type DebugUserResponse$Outbound = {
    status?: UserStatusResponse$Outbound | undefined;
    uploadedGroups?: Array<DatasourceGroupDefinition$Outbound> | undefined;
};

/** @internal */
declare const DebugUserResponse$outboundSchema: z.ZodType<DebugUserResponse$Outbound, z.ZodTypeDef, DebugUserResponse>;

/**
 * Describes the response body of the /debug/{datasource}/user API call
 */
declare type DebugUserResponse = {
    /**
     * Describes the user status response body
     */
    status?: UserStatusResponse | undefined;
    /**
     * List of groups the user is a member of, as uploaded via permissions API.
     */
    uploadedGroups?: Array<DatasourceGroupDefinition> | undefined;
};

declare function debugUserResponseFromJSON(jsonString: string): Result<DebugUserResponse, SDKValidationError>;

declare function debugUserResponseToJSON(debugUserResponse: DebugUserResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteallchatsRequest$ {
    /** @deprecated use `DeleteallchatsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteallchatsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteallchatsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteallchatsRequest$Outbound, z.ZodTypeDef, DeleteallchatsRequest>;
    /** @deprecated use `DeleteallchatsRequest$Outbound` instead. */
    type Outbound = DeleteallchatsRequest$Outbound;
}

/** @internal */
declare const DeleteallchatsRequest$inboundSchema: z.ZodType<DeleteallchatsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteallchatsRequest$Outbound = {
    timezoneOffset?: number | undefined;
};

/** @internal */
declare const DeleteallchatsRequest$outboundSchema: z.ZodType<DeleteallchatsRequest$Outbound, z.ZodTypeDef, DeleteallchatsRequest>;

declare type DeleteallchatsRequest = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
};

declare function deleteallchatsRequestFromJSON(jsonString: string): Result<DeleteallchatsRequest, SDKValidationError>;

declare function deleteallchatsRequestToJSON(deleteallchatsRequest: DeleteallchatsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteAnnouncementRequest$ {
    /** @deprecated use `DeleteAnnouncementRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteAnnouncementRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteAnnouncementRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteAnnouncementRequest$Outbound, z.ZodTypeDef, DeleteAnnouncementRequest>;
    /** @deprecated use `DeleteAnnouncementRequest$Outbound` instead. */
    type Outbound = DeleteAnnouncementRequest$Outbound;
}

/** @internal */
declare const DeleteAnnouncementRequest$inboundSchema: z.ZodType<DeleteAnnouncementRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteAnnouncementRequest$Outbound = {
    id: number;
};

/** @internal */
declare const DeleteAnnouncementRequest$outboundSchema: z.ZodType<DeleteAnnouncementRequest$Outbound, z.ZodTypeDef, DeleteAnnouncementRequest>;

declare type DeleteAnnouncementRequest = {
    /**
     * The opaque id of the announcement to be deleted.
     */
    id: number;
};

declare function deleteAnnouncementRequestFromJSON(jsonString: string): Result<DeleteAnnouncementRequest, SDKValidationError>;

declare function deleteAnnouncementRequestToJSON(deleteAnnouncementRequest: DeleteAnnouncementRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteAnswerRequest$ {
    /** @deprecated use `DeleteAnswerRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteAnswerRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteAnswerRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteAnswerRequest$Outbound, z.ZodTypeDef, DeleteAnswerRequest>;
    /** @deprecated use `DeleteAnswerRequest$Outbound` instead. */
    type Outbound = DeleteAnswerRequest$Outbound;
}

/** @internal */
declare const DeleteAnswerRequest$inboundSchema: z.ZodType<DeleteAnswerRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteAnswerRequest$Outbound = {
    id: number;
    docId?: string | undefined;
};

/** @internal */
declare const DeleteAnswerRequest$outboundSchema: z.ZodType<DeleteAnswerRequest$Outbound, z.ZodTypeDef, DeleteAnswerRequest>;

declare type DeleteAnswerRequest = {
    /**
     * The opaque ID of the Answer.
     */
    id: number;
    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
     */
    docId?: string | undefined;
};

declare function deleteAnswerRequestFromJSON(jsonString: string): Result<DeleteAnswerRequest, SDKValidationError>;

declare function deleteAnswerRequestToJSON(deleteAnswerRequest: DeleteAnswerRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteChatFilesRequest$ {
    /** @deprecated use `DeleteChatFilesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteChatFilesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteChatFilesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteChatFilesRequest$Outbound, z.ZodTypeDef, DeleteChatFilesRequest>;
    /** @deprecated use `DeleteChatFilesRequest$Outbound` instead. */
    type Outbound = DeleteChatFilesRequest$Outbound;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeletechatfilesRequest$ {
    /** @deprecated use `DeletechatfilesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeletechatfilesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeletechatfilesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeletechatfilesRequest$Outbound, z.ZodTypeDef, DeletechatfilesRequest>;
    /** @deprecated use `DeletechatfilesRequest$Outbound` instead. */
    type Outbound = DeletechatfilesRequest$Outbound;
}

/** @internal */
declare const DeleteChatFilesRequest$inboundSchema: z.ZodType<DeleteChatFilesRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare const DeletechatfilesRequest$inboundSchema: z.ZodType<DeletechatfilesRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteChatFilesRequest$Outbound = {
    fileIds: Array<string>;
};

/** @internal */
declare type DeletechatfilesRequest$Outbound = {
    timezoneOffset?: number | undefined;
    DeleteChatFilesRequest: components.DeleteChatFilesRequest$Outbound;
};

/** @internal */
declare const DeleteChatFilesRequest$outboundSchema: z.ZodType<DeleteChatFilesRequest$Outbound, z.ZodTypeDef, DeleteChatFilesRequest>;

/** @internal */
declare const DeletechatfilesRequest$outboundSchema: z.ZodType<DeletechatfilesRequest$Outbound, z.ZodTypeDef, DeletechatfilesRequest>;

declare type DeleteChatFilesRequest = {
    /**
     * IDs of files to delete.
     */
    fileIds: Array<string>;
};

declare type DeletechatfilesRequest = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    deleteChatFilesRequest: components.DeleteChatFilesRequest;
};

declare function deleteChatFilesRequestFromJSON(jsonString: string): Result<DeleteChatFilesRequest, SDKValidationError>;

declare function deletechatfilesRequestFromJSON(jsonString: string): Result<DeletechatfilesRequest, SDKValidationError>;

declare function deleteChatFilesRequestToJSON(deleteChatFilesRequest: DeleteChatFilesRequest): string;

declare function deletechatfilesRequestToJSON(deletechatfilesRequest: DeletechatfilesRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteChatsRequest$ {
    /** @deprecated use `DeleteChatsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteChatsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteChatsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteChatsRequest$Outbound, z.ZodTypeDef, DeleteChatsRequest>;
    /** @deprecated use `DeleteChatsRequest$Outbound` instead. */
    type Outbound = DeleteChatsRequest$Outbound;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeletechatsRequest$ {
    /** @deprecated use `DeletechatsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeletechatsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeletechatsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeletechatsRequest$Outbound, z.ZodTypeDef, DeletechatsRequest>;
    /** @deprecated use `DeletechatsRequest$Outbound` instead. */
    type Outbound = DeletechatsRequest$Outbound;
}

/** @internal */
declare const DeleteChatsRequest$inboundSchema: z.ZodType<DeleteChatsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare const DeletechatsRequest$inboundSchema: z.ZodType<DeletechatsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteChatsRequest$Outbound = {
    ids: Array<string>;
};

/** @internal */
declare type DeletechatsRequest$Outbound = {
    timezoneOffset?: number | undefined;
    DeleteChatsRequest: components.DeleteChatsRequest$Outbound;
};

/** @internal */
declare const DeleteChatsRequest$outboundSchema: z.ZodType<DeleteChatsRequest$Outbound, z.ZodTypeDef, DeleteChatsRequest>;

/** @internal */
declare const DeletechatsRequest$outboundSchema: z.ZodType<DeletechatsRequest$Outbound, z.ZodTypeDef, DeletechatsRequest>;

declare type DeleteChatsRequest = {
    /**
     * A non-empty list of ids of the Chats to be deleted.
     */
    ids: Array<string>;
};

declare type DeletechatsRequest = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    deleteChatsRequest: components.DeleteChatsRequest;
};

declare function deleteChatsRequestFromJSON(jsonString: string): Result<DeleteChatsRequest, SDKValidationError>;

declare function deletechatsRequestFromJSON(jsonString: string): Result<DeletechatsRequest, SDKValidationError>;

declare function deleteChatsRequestToJSON(deleteChatsRequest: DeleteChatsRequest): string;

declare function deletechatsRequestToJSON(deletechatsRequest: DeletechatsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteCollectionItemRequest$ {
    /** @deprecated use `DeleteCollectionItemRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteCollectionItemRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteCollectionItemRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteCollectionItemRequest$Outbound, z.ZodTypeDef, DeleteCollectionItemRequest>;
    /** @deprecated use `DeleteCollectionItemRequest$Outbound` instead. */
    type Outbound = DeleteCollectionItemRequest$Outbound;
}

/** @internal */
declare const DeleteCollectionItemRequest$inboundSchema: z.ZodType<DeleteCollectionItemRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteCollectionItemRequest$Outbound = {
    collectionId: number;
    itemId: string;
    documentId?: string | undefined;
};

/** @internal */
declare const DeleteCollectionItemRequest$outboundSchema: z.ZodType<DeleteCollectionItemRequest$Outbound, z.ZodTypeDef, DeleteCollectionItemRequest>;

declare type DeleteCollectionItemRequest = {
    /**
     * The ID of the Collection to remove an item in.
     */
    collectionId: number;
    /**
     * The item ID of the CollectionItem to remove from this Collection.
     */
    itemId: string;
    /**
     * The (optional) Glean Document ID of the CollectionItem to remove from this Collection if this is an indexed document.
     */
    documentId?: string | undefined;
};

declare function deleteCollectionItemRequestFromJSON(jsonString: string): Result<DeleteCollectionItemRequest, SDKValidationError>;

declare function deleteCollectionItemRequestToJSON(deleteCollectionItemRequest: DeleteCollectionItemRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteCollectionItemResponse$ {
    /** @deprecated use `DeleteCollectionItemResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteCollectionItemResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteCollectionItemResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteCollectionItemResponse$Outbound, z.ZodTypeDef, DeleteCollectionItemResponse>;
    /** @deprecated use `DeleteCollectionItemResponse$Outbound` instead. */
    type Outbound = DeleteCollectionItemResponse$Outbound;
}

/** @internal */
declare const DeleteCollectionItemResponse$inboundSchema: z.ZodType<DeleteCollectionItemResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteCollectionItemResponse$Outbound = {
    collection?: Collection$Outbound | undefined;
};

/** @internal */
declare const DeleteCollectionItemResponse$outboundSchema: z.ZodType<DeleteCollectionItemResponse$Outbound, z.ZodTypeDef, DeleteCollectionItemResponse>;

declare type DeleteCollectionItemResponse = {
    collection?: Collection | undefined;
};

declare function deleteCollectionItemResponseFromJSON(jsonString: string): Result<DeleteCollectionItemResponse, SDKValidationError>;

declare function deleteCollectionItemResponseToJSON(deleteCollectionItemResponse: DeleteCollectionItemResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteCollectionRequest$ {
    /** @deprecated use `DeleteCollectionRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteCollectionRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteCollectionRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteCollectionRequest$Outbound, z.ZodTypeDef, DeleteCollectionRequest>;
    /** @deprecated use `DeleteCollectionRequest$Outbound` instead. */
    type Outbound = DeleteCollectionRequest$Outbound;
}

/** @internal */
declare const DeleteCollectionRequest$inboundSchema: z.ZodType<DeleteCollectionRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteCollectionRequest$Outbound = {
    ids: Array<number>;
    allowedDatasource?: string | undefined;
};

/** @internal */
declare const DeleteCollectionRequest$outboundSchema: z.ZodType<DeleteCollectionRequest$Outbound, z.ZodTypeDef, DeleteCollectionRequest>;

declare type DeleteCollectionRequest = {
    /**
     * The IDs of the Collections to delete.
     */
    ids: Array<number>;
    /**
     * The datasource allowed in the Collection to be deleted.
     */
    allowedDatasource?: string | undefined;
};

declare function deleteCollectionRequestFromJSON(jsonString: string): Result<DeleteCollectionRequest, SDKValidationError>;

declare function deleteCollectionRequestToJSON(deleteCollectionRequest: DeleteCollectionRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteDocumentRequest$ {
    /** @deprecated use `DeleteDocumentRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteDocumentRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteDocumentRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteDocumentRequest$Outbound, z.ZodTypeDef, DeleteDocumentRequest>;
    /** @deprecated use `DeleteDocumentRequest$Outbound` instead. */
    type Outbound = DeleteDocumentRequest$Outbound;
}

/** @internal */
declare const DeleteDocumentRequest$inboundSchema: z.ZodType<DeleteDocumentRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteDocumentRequest$Outbound = {
    version?: number | undefined;
    datasource: string;
    objectType: string;
    id: string;
};

/** @internal */
declare const DeleteDocumentRequest$outboundSchema: z.ZodType<DeleteDocumentRequest$Outbound, z.ZodTypeDef, DeleteDocumentRequest>;

/**
 * Describes the request body of the /deletedocument API call
 */
declare type DeleteDocumentRequest = {
    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    version?: number | undefined;
    /**
     * datasource of the document
     */
    datasource: string;
    /**
     * object type of the document
     */
    objectType: string;
    /**
     * The id of the document
     */
    id: string;
};

declare function deleteDocumentRequestFromJSON(jsonString: string): Result<DeleteDocumentRequest, SDKValidationError>;

declare function deleteDocumentRequestToJSON(deleteDocumentRequest: DeleteDocumentRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteEmployeeRequest$ {
    /** @deprecated use `DeleteEmployeeRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteEmployeeRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteEmployeeRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteEmployeeRequest$Outbound, z.ZodTypeDef, DeleteEmployeeRequest>;
    /** @deprecated use `DeleteEmployeeRequest$Outbound` instead. */
    type Outbound = DeleteEmployeeRequest$Outbound;
}

/** @internal */
declare const DeleteEmployeeRequest$inboundSchema: z.ZodType<DeleteEmployeeRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteEmployeeRequest$Outbound = {
    version?: number | undefined;
    employeeEmail: string;
};

/** @internal */
declare const DeleteEmployeeRequest$outboundSchema: z.ZodType<DeleteEmployeeRequest$Outbound, z.ZodTypeDef, DeleteEmployeeRequest>;

/**
 * Describes the request body of the /deleteemployee API call
 */
declare type DeleteEmployeeRequest = {
    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    version?: number | undefined;
    /**
     * The deleted employee's email
     */
    employeeEmail: string;
};

declare function deleteEmployeeRequestFromJSON(jsonString: string): Result<DeleteEmployeeRequest, SDKValidationError>;

declare function deleteEmployeeRequestToJSON(deleteEmployeeRequest: DeleteEmployeeRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteGroupRequest$ {
    /** @deprecated use `DeleteGroupRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteGroupRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteGroupRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteGroupRequest$Outbound, z.ZodTypeDef, DeleteGroupRequest>;
    /** @deprecated use `DeleteGroupRequest$Outbound` instead. */
    type Outbound = DeleteGroupRequest$Outbound;
}

/** @internal */
declare const DeleteGroupRequest$inboundSchema: z.ZodType<DeleteGroupRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteGroupRequest$Outbound = {
    version?: number | undefined;
    datasource: string;
    groupName: string;
};

/** @internal */
declare const DeleteGroupRequest$outboundSchema: z.ZodType<DeleteGroupRequest$Outbound, z.ZodTypeDef, DeleteGroupRequest>;

/**
 * Describes the request body of the /deletegroup API call
 */
declare type DeleteGroupRequest = {
    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    version?: number | undefined;
    /**
     * The datasource for which the group is removed
     */
    datasource: string;
    /**
     * the name of the group to be deleted
     */
    groupName: string;
};

declare function deleteGroupRequestFromJSON(jsonString: string): Result<DeleteGroupRequest, SDKValidationError>;

declare function deleteGroupRequestToJSON(deleteGroupRequest: DeleteGroupRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteMembershipRequest$ {
    /** @deprecated use `DeleteMembershipRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteMembershipRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteMembershipRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteMembershipRequest$Outbound, z.ZodTypeDef, DeleteMembershipRequest>;
    /** @deprecated use `DeleteMembershipRequest$Outbound` instead. */
    type Outbound = DeleteMembershipRequest$Outbound;
}

/** @internal */
declare const DeleteMembershipRequest$inboundSchema: z.ZodType<DeleteMembershipRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteMembershipRequest$Outbound = {
    version?: number | undefined;
    datasource: string;
    membership: DatasourceMembershipDefinition$Outbound;
};

/** @internal */
declare const DeleteMembershipRequest$outboundSchema: z.ZodType<DeleteMembershipRequest$Outbound, z.ZodTypeDef, DeleteMembershipRequest>;

/**
 * Describes the request body of the /deletemembership API call
 */
declare type DeleteMembershipRequest = {
    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    version?: number | undefined;
    /**
     * The datasource for which the membership is removed
     */
    datasource: string;
    /**
     * describes the membership row of a group. Only one of memberUserId and memberGroupName can be specified.
     */
    membership: DatasourceMembershipDefinition;
};

declare function deleteMembershipRequestFromJSON(jsonString: string): Result<DeleteMembershipRequest, SDKValidationError>;

declare function deleteMembershipRequestToJSON(deleteMembershipRequest: DeleteMembershipRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteShortcutRequest$ {
    /** @deprecated use `DeleteShortcutRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteShortcutRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteShortcutRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteShortcutRequest$Outbound, z.ZodTypeDef, DeleteShortcutRequest>;
    /** @deprecated use `DeleteShortcutRequest$Outbound` instead. */
    type Outbound = DeleteShortcutRequest$Outbound;
}

/** @internal */
declare const DeleteShortcutRequest$inboundSchema: z.ZodType<DeleteShortcutRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteShortcutRequest$Outbound = {
    id: number;
};

/** @internal */
declare const DeleteShortcutRequest$outboundSchema: z.ZodType<DeleteShortcutRequest$Outbound, z.ZodTypeDef, DeleteShortcutRequest>;

declare type DeleteShortcutRequest = {
    /**
     * The opaque id of the user generated content.
     */
    id: number;
};

declare function deleteShortcutRequestFromJSON(jsonString: string): Result<DeleteShortcutRequest, SDKValidationError>;

declare function deleteShortcutRequestToJSON(deleteShortcutRequest: DeleteShortcutRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteTeamRequest$ {
    /** @deprecated use `DeleteTeamRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteTeamRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteTeamRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteTeamRequest$Outbound, z.ZodTypeDef, DeleteTeamRequest>;
    /** @deprecated use `DeleteTeamRequest$Outbound` instead. */
    type Outbound = DeleteTeamRequest$Outbound;
}

/** @internal */
declare const DeleteTeamRequest$inboundSchema: z.ZodType<DeleteTeamRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteTeamRequest$Outbound = {
    id: string;
};

/** @internal */
declare const DeleteTeamRequest$outboundSchema: z.ZodType<DeleteTeamRequest$Outbound, z.ZodTypeDef, DeleteTeamRequest>;

/**
 * Describes the request body of the /deleteteam API call
 */
declare type DeleteTeamRequest = {
    /**
     * The deleted team's id
     */
    id: string;
};

declare function deleteTeamRequestFromJSON(jsonString: string): Result<DeleteTeamRequest, SDKValidationError>;

declare function deleteTeamRequestToJSON(deleteTeamRequest: DeleteTeamRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DeleteUserRequest$ {
    /** @deprecated use `DeleteUserRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteUserRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteUserRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteUserRequest$Outbound, z.ZodTypeDef, DeleteUserRequest>;
    /** @deprecated use `DeleteUserRequest$Outbound` instead. */
    type Outbound = DeleteUserRequest$Outbound;
}

/** @internal */
declare const DeleteUserRequest$inboundSchema: z.ZodType<DeleteUserRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DeleteUserRequest$Outbound = {
    version?: number | undefined;
    datasource: string;
    email: string;
};

/** @internal */
declare const DeleteUserRequest$outboundSchema: z.ZodType<DeleteUserRequest$Outbound, z.ZodTypeDef, DeleteUserRequest>;

/**
 * Describes the request body of the /deleteuser API call
 */
declare type DeleteUserRequest = {
    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    version?: number | undefined;
    /**
     * The datasource for which the user is removed
     */
    datasource: string;
    /**
     * The email of the user to be deleted
     */
    email: string;
};

declare function deleteUserRequestFromJSON(jsonString: string): Result<DeleteUserRequest, SDKValidationError>;

declare function deleteUserRequestToJSON(deleteUserRequest: DeleteUserRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Digest$ {
    /** @deprecated use `Digest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Digest, z.ZodTypeDef, unknown>;
    /** @deprecated use `Digest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Digest$Outbound, z.ZodTypeDef, Digest>;
    /** @deprecated use `Digest$Outbound` instead. */
    type Outbound = Digest$Outbound;
}

/** @internal */
declare const Digest$inboundSchema: z.ZodType<Digest, z.ZodTypeDef, unknown>;

/** @internal */
declare type Digest$Outbound = {
    podcastFileId?: string | undefined;
    podcastDuration?: number | undefined;
    digestDate?: string | undefined;
    sections?: Array<DigestSection$Outbound> | undefined;
};

/** @internal */
declare const Digest$outboundSchema: z.ZodType<Digest$Outbound, z.ZodTypeDef, Digest>;

declare type Digest = {
    /**
     * Identifier for the podcast file generated from this digest content.
     */
    podcastFileId?: string | undefined;
    /**
     * Duration of the podcast file in seconds.
     */
    podcastDuration?: number | undefined;
    /**
     * The date this digest covers, in YYYY-MM-DD format. Represents the specific day for which the digest content and updates were compiled. This can be empty if the digest is not yet available.
     */
    digestDate?: string | undefined;
    /**
     * Array of digest sections from which the podcast was created.
     */
    sections?: Array<DigestSection> | undefined;
};

declare function digestFromJSON(jsonString: string): Result<Digest, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DigestSection$ {
    /** @deprecated use `DigestSection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DigestSection, z.ZodTypeDef, unknown>;
    /** @deprecated use `DigestSection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DigestSection$Outbound, z.ZodTypeDef, DigestSection>;
    /** @deprecated use `DigestSection$Outbound` instead. */
    type Outbound = DigestSection$Outbound;
}

/** @internal */
declare const DigestSection$inboundSchema: z.ZodType<DigestSection, z.ZodTypeDef, unknown>;

/** @internal */
declare type DigestSection$Outbound = {
    id: string;
    type: string;
    displayName?: string | undefined;
    channelName?: string | undefined;
    channelType?: string | undefined;
    instanceId?: string | undefined;
    url?: string | undefined;
    updates: Array<DigestUpdate$Outbound>;
};

/** @internal */
declare const DigestSection$outboundSchema: z.ZodType<DigestSection$Outbound, z.ZodTypeDef, DigestSection>;

declare type DigestSection = {
    /**
     * Unique identifier for the digest section.
     */
    id: string;
    /**
     * Type of the section. This defines how the section should be interpreted and rendered in the digest.
     */
    type: SectionType;
    /**
     * Human-readable name for the digest section.
     */
    displayName?: string | undefined;
    /**
     * Name of the channel (applicable for CHANNEL type sections). Used to display in the frontend.
     */
    channelName?: string | undefined;
    /**
     * Channel visibility/type for CHANNEL sections. For Slack this is typically one of
     *
     * @remarks
     * PublicChannel, PrivateChannel. Omit if not applicable or unknown.
     */
    channelType?: string | undefined;
    /**
     * Instance identifier for the channel or workspace. Used for constructing channel URLs to display in the frontend.
     */
    instanceId?: string | undefined;
    /**
     * Optional URL for the digest section. Should be populated only if the section is a CHANNEL type section.
     */
    url?: string | undefined;
    /**
     * List of updates within this digest section.
     */
    updates: Array<DigestUpdate>;
};

declare function digestSectionFromJSON(jsonString: string): Result<DigestSection, SDKValidationError>;

declare function digestSectionToJSON(digestSection: DigestSection): string;

declare function digestToJSON(digest: Digest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DigestUpdate$ {
    /** @deprecated use `DigestUpdate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DigestUpdate, z.ZodTypeDef, unknown>;
    /** @deprecated use `DigestUpdate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DigestUpdate$Outbound, z.ZodTypeDef, DigestUpdate>;
    /** @deprecated use `DigestUpdate$Outbound` instead. */
    type Outbound = DigestUpdate$Outbound;
}

/** @internal */
declare const DigestUpdate$inboundSchema: z.ZodType<DigestUpdate, z.ZodTypeDef, unknown>;

/** @internal */
declare type DigestUpdate$Outbound = {
    url?: string | undefined;
    title?: string | undefined;
    datasource?: string | undefined;
    summary?: string | undefined;
    type?: string | undefined;
};

/** @internal */
declare const DigestUpdate$outboundSchema: z.ZodType<DigestUpdate$Outbound, z.ZodTypeDef, DigestUpdate>;

declare type DigestUpdate = {
    /**
     * URL link to the content or document.
     */
    url?: string | undefined;
    /**
     * Title or headline of the update.
     */
    title?: string | undefined;
    /**
     * Name or identifier of the data source (e.g., slack, confluence, etc.).
     */
    datasource?: string | undefined;
    /**
     * Brief summary or description of the update content.
     */
    summary?: string | undefined;
    /**
     * Optional type classification for the update.
     */
    type?: UpdateType | undefined;
};

declare function digestUpdateFromJSON(jsonString: string): Result<DigestUpdate, SDKValidationError>;

declare function digestUpdateToJSON(digestUpdate: DigestUpdate): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Direction$ {
    /** @deprecated use `Direction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Older: "OLDER";
        readonly Newer: "NEWER";
    }>;
    /** @deprecated use `Direction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Older: "OLDER";
        readonly Newer: "NEWER";
    }>;
}

/** @internal */
declare const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction>;

/** @internal */
declare const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction>;

/**
 * The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
 */
declare const Direction: {
    readonly Older: "OLDER";
    readonly Newer: "NEWER";
};

/**
 * The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
 */
declare type Direction = ClosedEnum<typeof Direction>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Disambiguation$ {
    /** @deprecated use `Disambiguation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Disambiguation, z.ZodTypeDef, unknown>;
    /** @deprecated use `Disambiguation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Disambiguation$Outbound, z.ZodTypeDef, Disambiguation>;
    /** @deprecated use `Disambiguation$Outbound` instead. */
    type Outbound = Disambiguation$Outbound;
}

/** @internal */
declare const Disambiguation$inboundSchema: z.ZodType<Disambiguation, z.ZodTypeDef, unknown>;

/** @internal */
declare type Disambiguation$Outbound = {
    name?: string | undefined;
    id?: string | undefined;
    type?: string | undefined;
};

/** @internal */
declare const Disambiguation$outboundSchema: z.ZodType<Disambiguation$Outbound, z.ZodTypeDef, Disambiguation>;

/**
 * A disambiguation between multiple entities with the same name
 */
declare type Disambiguation = {
    /**
     * Name of the ambiguous entity
     */
    name?: string | undefined;
    /**
     * The unique id of the entity in the knowledge graph
     */
    id?: string | undefined;
    /**
     * The type of entity.
     */
    type?: EntityType | undefined;
};

declare function disambiguationFromJSON(jsonString: string): Result<Disambiguation, SDKValidationError>;

declare function disambiguationToJSON(disambiguation: Disambiguation): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DisplayableListItemUIConfig$ {
    /** @deprecated use `DisplayableListItemUIConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DisplayableListItemUIConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `DisplayableListItemUIConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DisplayableListItemUIConfig$Outbound, z.ZodTypeDef, DisplayableListItemUIConfig>;
    /** @deprecated use `DisplayableListItemUIConfig$Outbound` instead. */
    type Outbound = DisplayableListItemUIConfig$Outbound;
}

/** @internal */
declare const DisplayableListItemUIConfig$inboundSchema: z.ZodType<DisplayableListItemUIConfig, z.ZodTypeDef, unknown>;

/** @internal */
declare type DisplayableListItemUIConfig$Outbound = {
    showNewIndicator?: boolean | undefined;
};

/** @internal */
declare const DisplayableListItemUIConfig$outboundSchema: z.ZodType<DisplayableListItemUIConfig$Outbound, z.ZodTypeDef, DisplayableListItemUIConfig>;

/**
 * UI configurations for each item of the list
 */
declare type DisplayableListItemUIConfig = {
    /**
     * show a "New" pill next to the item
     */
    showNewIndicator?: boolean | undefined;
};

declare function displayableListItemUIConfigFromJSON(jsonString: string): Result<DisplayableListItemUIConfig, SDKValidationError>;

declare function displayableListItemUIConfigToJSON(displayableListItemUIConfig: DisplayableListItemUIConfig): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DlpConfig$ {
    /** @deprecated use `DlpConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DlpConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `DlpConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DlpConfig$Outbound, z.ZodTypeDef, DlpConfig>;
    /** @deprecated use `DlpConfig$Outbound` instead. */
    type Outbound = DlpConfig$Outbound;
}

/** @internal */
declare const DlpConfig$inboundSchema: z.ZodType<DlpConfig, z.ZodTypeDef, unknown>;

/** @internal */
declare type DlpConfig$Outbound = {
    version?: number | undefined;
    sensitiveInfoTypes?: Array<SensitiveInfoType$Outbound> | undefined;
    inputOptions?: InputOptions$Outbound | undefined;
    externalSharingOptions?: ExternalSharingOptions$Outbound | undefined;
    broadSharingOptions?: SharingOptions$Outbound | undefined;
    sensitiveContentOptions?: SensitiveContentOptions$Outbound | undefined;
    reportName?: string | undefined;
    frequency?: string | undefined;
    createdBy?: DlpPerson$Outbound | undefined;
    createdAt?: string | undefined;
    redactQuote?: boolean | undefined;
    autoHideDocs?: boolean | undefined;
    allowlistOptions?: AllowlistOptions$Outbound | undefined;
};

/** @internal */
declare const DlpConfig$outboundSchema: z.ZodType<DlpConfig$Outbound, z.ZodTypeDef, DlpConfig>;

/**
 * Detailed configuration of what documents and sensitive content will be scanned.
 */
declare type DlpConfig = {
    /**
     * Synonymous with report/policy id.
     */
    version?: number | undefined;
    /**
     * DEPRECATED - use `sensitiveContentOptions` instead.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    sensitiveInfoTypes?: Array<SensitiveInfoType> | undefined;
    /**
     * Controls which data-sources and what time-range to include in scans.
     */
    inputOptions?: InputOptions | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    externalSharingOptions?: ExternalSharingOptions | undefined;
    /**
     * Controls how "shared" a document must be to get picked for scans.
     */
    broadSharingOptions?: SharingOptions | undefined;
    /**
     * Options for defining sensitive content within scanned documents.
     */
    sensitiveContentOptions?: SensitiveContentOptions | undefined;
    reportName?: string | undefined;
    /**
     * Interval between scans.
     */
    frequency?: string | undefined;
    /**
     * Details about the person who created this report/policy.
     */
    createdBy?: DlpPerson | undefined;
    /**
     * Timestamp at which this configuration was created.
     */
    createdAt?: string | undefined;
    /**
     * redact quote in findings of the report
     */
    redactQuote?: boolean | undefined;
    /**
     * auto hide documents with findings in the report
     */
    autoHideDocs?: boolean | undefined;
    /**
     * Terms that are allow-listed during the scans. If any finding picked up by a rule exactly matches a term in the allow-list, it will not be counted as a violation.
     */
    allowlistOptions?: AllowlistOptions | undefined;
};

declare function dlpConfigFromJSON(jsonString: string): Result<DlpConfig, SDKValidationError>;

declare function dlpConfigToJSON(dlpConfig: DlpConfig): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DlpFrequency$ {
    /** @deprecated use `DlpFrequency$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Once: "ONCE";
        readonly Daily: "DAILY";
        readonly Weekly: "WEEKLY";
        readonly Continuous: "CONTINUOUS";
        readonly None: "NONE";
    }>;
    /** @deprecated use `DlpFrequency$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Once: "ONCE";
        readonly Daily: "DAILY";
        readonly Weekly: "WEEKLY";
        readonly Continuous: "CONTINUOUS";
        readonly None: "NONE";
    }>;
}

/** @internal */
declare const DlpFrequency$inboundSchema: z.ZodNativeEnum<typeof DlpFrequency>;

/** @internal */
declare const DlpFrequency$outboundSchema: z.ZodNativeEnum<typeof DlpFrequency>;

/**
 * Interval between scans. DAILY is deprecated.
 */
declare const DlpFrequency: {
    readonly Once: "ONCE";
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Continuous: "CONTINUOUS";
    readonly None: "NONE";
};

/**
 * Interval between scans. DAILY is deprecated.
 */
declare type DlpFrequency = ClosedEnum<typeof DlpFrequency>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DlpPerson$ {
    /** @deprecated use `DlpPerson$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DlpPerson, z.ZodTypeDef, unknown>;
    /** @deprecated use `DlpPerson$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DlpPerson$Outbound, z.ZodTypeDef, DlpPerson>;
    /** @deprecated use `DlpPerson$Outbound` instead. */
    type Outbound = DlpPerson$Outbound;
}

/** @internal */
declare const DlpPerson$inboundSchema: z.ZodType<DlpPerson, z.ZodTypeDef, unknown>;

/** @internal */
declare type DlpPerson$Outbound = {
    name: string;
    obfuscatedId: string;
    metadata?: DlpPersonMetadata$Outbound | undefined;
};

/** @internal */
declare const DlpPerson$outboundSchema: z.ZodType<DlpPerson$Outbound, z.ZodTypeDef, DlpPerson>;

/**
 * Details about the person who created this report/policy.
 */
declare type DlpPerson = {
    /**
     * The display name.
     */
    name: string;
    /**
     * An opaque identifier that can be used to request metadata for a Person.
     */
    obfuscatedId: string;
    metadata?: DlpPersonMetadata | undefined;
};

declare function dlpPersonFromJSON(jsonString: string): Result<DlpPerson, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DlpPersonMetadata$ {
    /** @deprecated use `DlpPersonMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DlpPersonMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `DlpPersonMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DlpPersonMetadata$Outbound, z.ZodTypeDef, DlpPersonMetadata>;
    /** @deprecated use `DlpPersonMetadata$Outbound` instead. */
    type Outbound = DlpPersonMetadata$Outbound;
}

/** @internal */
declare const DlpPersonMetadata$inboundSchema: z.ZodType<DlpPersonMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type DlpPersonMetadata$Outbound = {
    firstName?: string | undefined;
    email?: string | undefined;
};

/** @internal */
declare const DlpPersonMetadata$outboundSchema: z.ZodType<DlpPersonMetadata$Outbound, z.ZodTypeDef, DlpPersonMetadata>;

declare type DlpPersonMetadata = {
    /**
     * The first name of the person
     */
    firstName?: string | undefined;
    /**
     * The user's primary email address
     */
    email?: string | undefined;
};

declare function dlpPersonMetadataFromJSON(jsonString: string): Result<DlpPersonMetadata, SDKValidationError>;

declare function dlpPersonMetadataToJSON(dlpPersonMetadata: DlpPersonMetadata): string;

declare function dlpPersonToJSON(dlpPerson: DlpPerson): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DlpReport$ {
    /** @deprecated use `DlpReport$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DlpReport, z.ZodTypeDef, unknown>;
    /** @deprecated use `DlpReport$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DlpReport$Outbound, z.ZodTypeDef, DlpReport>;
    /** @deprecated use `DlpReport$Outbound` instead. */
    type Outbound = DlpReport$Outbound;
}

/** @internal */
declare const DlpReport$inboundSchema: z.ZodType<DlpReport, z.ZodTypeDef, unknown>;

/** @internal */
declare type DlpReport$Outbound = {
    id?: string | undefined;
    name?: string | undefined;
    config?: DlpConfig$Outbound | undefined;
    frequency?: string | undefined;
    status?: string | undefined;
    createdBy?: DlpPerson$Outbound | undefined;
    createdAt?: string | undefined;
    lastUpdatedAt?: string | undefined;
    autoHideDocs?: boolean | undefined;
    lastScanStatus?: string | undefined;
    lastScanStartTime?: string | undefined;
    updatedBy?: DlpPerson$Outbound | undefined;
};

/** @internal */
declare const DlpReport$outboundSchema: z.ZodType<DlpReport$Outbound, z.ZodTypeDef, DlpReport>;

/**
 * Full policy information that will be used for scans.
 */
declare type DlpReport = {
    id?: string | undefined;
    name?: string | undefined;
    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    config?: DlpConfig | undefined;
    /**
     * Interval between scans. DAILY is deprecated.
     */
    frequency?: DlpFrequency | undefined;
    /**
     * The status of the policy/report. Only ACTIVE status will be picked for scans.
     */
    status?: DlpReportStatus | undefined;
    /**
     * Details about the person who created this report/policy.
     */
    createdBy?: DlpPerson | undefined;
    /**
     * Timestamp at which the policy was created.
     */
    createdAt?: string | undefined;
    /**
     * Timestamp at which the policy was last updated.
     */
    lastUpdatedAt?: string | undefined;
    /**
     * Auto hide documents with findings in the policy.
     */
    autoHideDocs?: boolean | undefined;
    lastScanStatus?: LastScanStatus | undefined;
    /**
     * The timestamp at which the report's last run/scan began.
     */
    lastScanStartTime?: string | undefined;
    /**
     * Details about the person who created this report/policy.
     */
    updatedBy?: DlpPerson | undefined;
};

declare function dlpReportFromJSON(jsonString: string): Result<DlpReport, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DlpReportStatus$ {
    /** @deprecated use `DlpReportStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Active: "ACTIVE";
        readonly Inactive: "INACTIVE";
        readonly Cancelled: "CANCELLED";
        readonly None: "NONE";
    }>;
    /** @deprecated use `DlpReportStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Active: "ACTIVE";
        readonly Inactive: "INACTIVE";
        readonly Cancelled: "CANCELLED";
        readonly None: "NONE";
    }>;
}

/** @internal */
declare const DlpReportStatus$inboundSchema: z.ZodNativeEnum<typeof DlpReportStatus>;

/** @internal */
declare const DlpReportStatus$outboundSchema: z.ZodNativeEnum<typeof DlpReportStatus>;

/**
 * The status of the policy/report. Only ACTIVE status will be picked for scans.
 */
declare const DlpReportStatus: {
    readonly Active: "ACTIVE";
    readonly Inactive: "INACTIVE";
    readonly Cancelled: "CANCELLED";
    readonly None: "NONE";
};

/**
 * The status of the policy/report. Only ACTIVE status will be picked for scans.
 */
declare type DlpReportStatus = ClosedEnum<typeof DlpReportStatus>;

declare function dlpReportToJSON(dlpReport: DlpReport): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DlpSimpleResult$ {
    /** @deprecated use `DlpSimpleResult$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Success: "SUCCESS";
        readonly Failure: "FAILURE";
    }>;
    /** @deprecated use `DlpSimpleResult$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Success: "SUCCESS";
        readonly Failure: "FAILURE";
    }>;
}

/** @internal */
declare const DlpSimpleResult$inboundSchema: z.ZodNativeEnum<typeof DlpSimpleResult>;

/** @internal */
declare const DlpSimpleResult$outboundSchema: z.ZodNativeEnum<typeof DlpSimpleResult>;

declare const DlpSimpleResult: {
    readonly Success: "SUCCESS";
    readonly Failure: "FAILURE";
};

declare type DlpSimpleResult = ClosedEnum<typeof DlpSimpleResult>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocCategory$ {
    /** @deprecated use `DocCategory$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Uncategorized: "UNCATEGORIZED";
        readonly Tickets: "TICKETS";
        readonly Crm: "CRM";
        readonly PublishedContent: "PUBLISHED_CONTENT";
        readonly CollaborativeContent: "COLLABORATIVE_CONTENT";
        readonly QuestionAnswer: "QUESTION_ANSWER";
        readonly Messaging: "MESSAGING";
        readonly CodeRepository: "CODE_REPOSITORY";
        readonly ChangeManagement: "CHANGE_MANAGEMENT";
        readonly People: "PEOPLE";
        readonly Email: "EMAIL";
        readonly Sso: "SSO";
        readonly Ats: "ATS";
        readonly KnowledgeHub: "KNOWLEDGE_HUB";
        readonly ExternalShortcut: "EXTERNAL_SHORTCUT";
        readonly Entity: "ENTITY";
        readonly Calendar: "CALENDAR";
        readonly Agents: "AGENTS";
    }>;
    /** @deprecated use `DocCategory$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Uncategorized: "UNCATEGORIZED";
        readonly Tickets: "TICKETS";
        readonly Crm: "CRM";
        readonly PublishedContent: "PUBLISHED_CONTENT";
        readonly CollaborativeContent: "COLLABORATIVE_CONTENT";
        readonly QuestionAnswer: "QUESTION_ANSWER";
        readonly Messaging: "MESSAGING";
        readonly CodeRepository: "CODE_REPOSITORY";
        readonly ChangeManagement: "CHANGE_MANAGEMENT";
        readonly People: "PEOPLE";
        readonly Email: "EMAIL";
        readonly Sso: "SSO";
        readonly Ats: "ATS";
        readonly KnowledgeHub: "KNOWLEDGE_HUB";
        readonly ExternalShortcut: "EXTERNAL_SHORTCUT";
        readonly Entity: "ENTITY";
        readonly Calendar: "CALENDAR";
        readonly Agents: "AGENTS";
    }>;
}

/** @internal */
declare const DocCategory$inboundSchema: z.ZodNativeEnum<typeof DocCategory>;

/** @internal */
declare const DocCategory$outboundSchema: z.ZodNativeEnum<typeof DocCategory>;

/**
 * The document category of this object type.
 */
declare const DocCategory: {
    readonly Uncategorized: "UNCATEGORIZED";
    readonly Tickets: "TICKETS";
    readonly Crm: "CRM";
    readonly PublishedContent: "PUBLISHED_CONTENT";
    readonly CollaborativeContent: "COLLABORATIVE_CONTENT";
    readonly QuestionAnswer: "QUESTION_ANSWER";
    readonly Messaging: "MESSAGING";
    readonly CodeRepository: "CODE_REPOSITORY";
    readonly ChangeManagement: "CHANGE_MANAGEMENT";
    readonly People: "PEOPLE";
    readonly Email: "EMAIL";
    readonly Sso: "SSO";
    readonly Ats: "ATS";
    readonly KnowledgeHub: "KNOWLEDGE_HUB";
    readonly ExternalShortcut: "EXTERNAL_SHORTCUT";
    readonly Entity: "ENTITY";
    readonly Calendar: "CALENDAR";
    readonly Agents: "AGENTS";
};

/**
 * The document category of this object type.
 */
declare type DocCategory = ClosedEnum<typeof DocCategory>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Document$ {
    /** @deprecated use `Document$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Document_2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Document$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Document$Outbound, z.ZodTypeDef, Document_2>;
    /** @deprecated use `Document$Outbound` instead. */
    type Outbound = Document$Outbound;
}

/** @internal */
declare const Document$inboundSchema: z.ZodType<Document_2, z.ZodTypeDef, unknown>;

/** @internal */
declare type Document$Outbound = {
    id?: string | undefined;
    datasource?: string | undefined;
    connectorType?: string | undefined;
    docType?: string | undefined;
    content?: DocumentContent$Outbound | undefined;
    containerDocument?: Document$Outbound | undefined;
    parentDocument?: Document$Outbound | undefined;
    title?: string | undefined;
    url?: string | undefined;
    metadata?: DocumentMetadata$Outbound | undefined;
    sections?: Array<DocumentSection$Outbound> | undefined;
};

/** @internal */
declare const Document$outboundSchema: z.ZodType<Document$Outbound, z.ZodTypeDef, Document_2>;

declare type Document_2 = {
    /**
     * The Glean Document ID.
     */
    id?: string | undefined;
    /**
     * The app or other repository type from which the document was extracted
     */
    datasource?: string | undefined;
    /**
     * The source from which document content was pulled, e.g. an API crawl or browser history
     */
    connectorType?: ConnectorType | undefined;
    /**
     * The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request).
     */
    docType?: string | undefined;
    content?: DocumentContent | undefined;
    containerDocument?: Document_2 | undefined;
    parentDocument?: Document_2 | undefined;
    /**
     * The title of the document.
     */
    title?: string | undefined;
    /**
     * A permalink for the document.
     */
    url?: string | undefined;
    metadata?: DocumentMetadata | undefined;
    /**
     * A list of content sub-sections in the document, e.g. text blocks with different headings in a Drive doc or Confluence page.
     */
    sections?: Array<DocumentSection> | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentContent$ {
    /** @deprecated use `DocumentContent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentContent, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentContent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentContent$Outbound, z.ZodTypeDef, DocumentContent>;
    /** @deprecated use `DocumentContent$Outbound` instead. */
    type Outbound = DocumentContent$Outbound;
}

/** @internal */
declare const DocumentContent$inboundSchema: z.ZodType<DocumentContent, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentContent$Outbound = {
    fullTextList?: Array<string> | undefined;
};

/** @internal */
declare const DocumentContent$outboundSchema: z.ZodType<DocumentContent$Outbound, z.ZodTypeDef, DocumentContent>;

declare type DocumentContent = {
    /**
     * The plaintext content of the document.
     */
    fullTextList?: Array<string> | undefined;
};

declare function documentContentFromJSON(jsonString: string): Result<DocumentContent, SDKValidationError>;

declare function documentContentToJSON(documentContent: DocumentContent): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentDefinition$ {
    /** @deprecated use `DocumentDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentDefinition$Outbound, z.ZodTypeDef, DocumentDefinition>;
    /** @deprecated use `DocumentDefinition$Outbound` instead. */
    type Outbound = DocumentDefinition$Outbound;
}

/** @internal */
declare const DocumentDefinition$inboundSchema: z.ZodType<DocumentDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentDefinition$Outbound = {
    title?: string | undefined;
    filename?: string | undefined;
    container?: string | undefined;
    containerDatasourceId?: string | undefined;
    containerObjectType?: string | undefined;
    datasource: string;
    objectType?: string | undefined;
    viewURL?: string | undefined;
    id?: string | undefined;
    summary?: ContentDefinition$Outbound | undefined;
    body?: ContentDefinition$Outbound | undefined;
    author?: UserReferenceDefinition$Outbound | undefined;
    owner?: UserReferenceDefinition$Outbound | undefined;
    permissions?: DocumentPermissionsDefinition$Outbound | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    updatedBy?: UserReferenceDefinition$Outbound | undefined;
    tags?: Array<string> | undefined;
    interactions?: DocumentInteractionsDefinition$Outbound | undefined;
    status?: string | undefined;
    additionalUrls?: Array<string> | undefined;
    comments?: Array<CommentDefinition$Outbound> | undefined;
    customProperties?: Array<CustomProperty$Outbound> | undefined;
};

/** @internal */
declare const DocumentDefinition$outboundSchema: z.ZodType<DocumentDefinition$Outbound, z.ZodTypeDef, DocumentDefinition>;

/**
 * Indexable document structure
 */
declare type DocumentDefinition = {
    /**
     * Document title, in plain text, if present. If not present, the title would be attempted to be extracted from the content.
     */
    title?: string | undefined;
    /**
     * Source filename, in plain text, for the document. May be used as a fallback title for the document, if the title is not provided and cannot be extracted from the content. Populate this if there is no explicit title for the document and the content is sourced from a file.
     */
    filename?: string | undefined;
    /**
     * The container name for the content (Folder for example for file content).
     */
    container?: string | undefined;
    /**
     * This represents the datasource sepcific id of the container.
     */
    containerDatasourceId?: string | undefined;
    /**
     * This represents the object type of the container. It cannot have spaces or _
     */
    containerObjectType?: string | undefined;
    datasource: string;
    /**
     * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
     */
    objectType?: string | undefined;
    /**
     * The permalink for viewing the document. **Note: viewURL is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false).**'
     *
     * @remarks
     */
    viewURL?: string | undefined;
    /**
     * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
     */
    id?: string | undefined;
    /**
     * Describes text content or base64 encoded binary content
     */
    summary?: ContentDefinition | undefined;
    /**
     * Describes text content or base64 encoded binary content
     */
    body?: ContentDefinition | undefined;
    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    author?: UserReferenceDefinition | undefined;
    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    owner?: UserReferenceDefinition | undefined;
    /**
     * describes the access control details of the document
     */
    permissions?: DocumentPermissionsDefinition | undefined;
    /**
     * The creation time, in epoch seconds.
     */
    createdAt?: number | undefined;
    /**
     * The last update time, in epoch seconds.
     */
    updatedAt?: number | undefined;
    /**
     * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
     */
    updatedBy?: UserReferenceDefinition | undefined;
    /**
     * Labels associated with the document.
     */
    tags?: Array<string> | undefined;
    /**
     * describes the interactions on the document
     */
    interactions?: DocumentInteractionsDefinition | undefined;
    status?: string | undefined;
    /**
     * Additional variations of the URL that this document points to.
     */
    additionalUrls?: Array<string> | undefined;
    /**
     * Comments associated with the document.
     */
    comments?: Array<CommentDefinition> | undefined;
    /**
     * Additional metadata properties of the document. These can surface as [facets and operators](https://developers.glean.com/indexing/datasource/custom-properties/operators_and_facets).
     */
    customProperties?: Array<CustomProperty> | undefined;
};

declare function documentDefinitionFromJSON(jsonString: string): Result<DocumentDefinition, SDKValidationError>;

declare function documentDefinitionToJSON(documentDefinition: DocumentDefinition): string;

declare function documentFromJSON(jsonString: string): Result<Document_2, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentInsight$ {
    /** @deprecated use `DocumentInsight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentInsight, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentInsight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentInsight$Outbound, z.ZodTypeDef, DocumentInsight>;
    /** @deprecated use `DocumentInsight$Outbound` instead. */
    type Outbound = DocumentInsight$Outbound;
}

/** @internal */
declare const DocumentInsight$inboundSchema: z.ZodType<DocumentInsight, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentInsight$Outbound = {
    document: Document$Outbound;
    viewCount?: CountInfo$Outbound | undefined;
    visitorCount?: CountInfo$Outbound | undefined;
};

/** @internal */
declare const DocumentInsight$outboundSchema: z.ZodType<DocumentInsight$Outbound, z.ZodTypeDef, DocumentInsight>;

declare type DocumentInsight = {
    document: Document_2;
    viewCount?: CountInfo | undefined;
    visitorCount?: CountInfo | undefined;
};

declare function documentInsightFromJSON(jsonString: string): Result<DocumentInsight, SDKValidationError>;

declare function documentInsightToJSON(documentInsight: DocumentInsight): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentInteractions$ {
    /** @deprecated use `DocumentInteractions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentInteractions, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentInteractions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentInteractions$Outbound, z.ZodTypeDef, DocumentInteractions>;
    /** @deprecated use `DocumentInteractions$Outbound` instead. */
    type Outbound = DocumentInteractions$Outbound;
}

/** @internal */
declare const DocumentInteractions$inboundSchema: z.ZodType<DocumentInteractions, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentInteractions$Outbound = {
    numComments?: number | undefined;
    numReactions?: number | undefined;
    reactions?: Array<string> | undefined;
    reacts?: Array<Reaction$Outbound> | undefined;
    shares?: Array<Share$Outbound> | undefined;
    visitorCount?: CountInfo$Outbound | undefined;
};

/** @internal */
declare const DocumentInteractions$outboundSchema: z.ZodType<DocumentInteractions$Outbound, z.ZodTypeDef, DocumentInteractions>;

declare type DocumentInteractions = {
    /**
     * The count of comments (thread replies in the case of slack).
     */
    numComments?: number | undefined;
    /**
     * The count of reactions on the document.
     */
    numReactions?: number | undefined;
    /**
     * To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    reactions?: Array<string> | undefined;
    reacts?: Array<Reaction> | undefined;
    /**
     * Describes instances of someone posting a link to this document in one of our indexed datasources.
     */
    shares?: Array<Share> | undefined;
    visitorCount?: CountInfo | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentInteractionsDefinition$ {
    /** @deprecated use `DocumentInteractionsDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentInteractionsDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentInteractionsDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentInteractionsDefinition$Outbound, z.ZodTypeDef, DocumentInteractionsDefinition>;
    /** @deprecated use `DocumentInteractionsDefinition$Outbound` instead. */
    type Outbound = DocumentInteractionsDefinition$Outbound;
}

/** @internal */
declare const DocumentInteractionsDefinition$inboundSchema: z.ZodType<DocumentInteractionsDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentInteractionsDefinition$Outbound = {
    numViews?: number | undefined;
    numLikes?: number | undefined;
    numComments?: number | undefined;
};

/** @internal */
declare const DocumentInteractionsDefinition$outboundSchema: z.ZodType<DocumentInteractionsDefinition$Outbound, z.ZodTypeDef, DocumentInteractionsDefinition>;

/**
 * describes the interactions on the document
 */
declare type DocumentInteractionsDefinition = {
    numViews?: number | undefined;
    numLikes?: number | undefined;
    numComments?: number | undefined;
};

declare function documentInteractionsDefinitionFromJSON(jsonString: string): Result<DocumentInteractionsDefinition, SDKValidationError>;

declare function documentInteractionsDefinitionToJSON(documentInteractionsDefinition: DocumentInteractionsDefinition): string;

declare function documentInteractionsFromJSON(jsonString: string): Result<DocumentInteractions, SDKValidationError>;

declare function documentInteractionsToJSON(documentInteractions: DocumentInteractions): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentMetadata$ {
    /** @deprecated use `DocumentMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentMetadata$Outbound, z.ZodTypeDef, DocumentMetadata>;
    /** @deprecated use `DocumentMetadata$Outbound` instead. */
    type Outbound = DocumentMetadata$Outbound;
}

/** @internal */
declare const DocumentMetadata$inboundSchema: z.ZodType<DocumentMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentMetadata$Outbound = {
    datasource?: string | undefined;
    datasourceInstance?: string | undefined;
    objectType?: string | undefined;
    container?: string | undefined;
    containerId?: string | undefined;
    superContainerId?: string | undefined;
    parentId?: string | undefined;
    mimeType?: string | undefined;
    documentId?: string | undefined;
    loggingId?: string | undefined;
    documentIdHash?: string | undefined;
    createTime?: string | undefined;
    updateTime?: string | undefined;
    author?: Person$Outbound | undefined;
    owner?: Person$Outbound | undefined;
    mentionedPeople?: Array<Person$Outbound> | undefined;
    visibility?: string | undefined;
    components?: Array<string> | undefined;
    status?: string | undefined;
    statusCategory?: string | undefined;
    pins?: Array<PinDocument$Outbound> | undefined;
    priority?: string | undefined;
    assignedTo?: Person$Outbound | undefined;
    updatedBy?: Person$Outbound | undefined;
    labels?: Array<string> | undefined;
    collections?: Array<Collection$Outbound> | undefined;
    datasourceId?: string | undefined;
    interactions?: DocumentInteractions$Outbound | undefined;
    verification?: Verification$Outbound | undefined;
    viewerInfo?: ViewerInfo$Outbound | undefined;
    permissions?: ObjectPermissions$Outbound | undefined;
    visitCount?: CountInfo$Outbound | undefined;
    shortcuts?: Array<Shortcut$Outbound> | undefined;
    path?: string | undefined;
    customData?: {
        [k: string]: CustomDataValue$Outbound;
    } | undefined;
    documentCategory?: string | undefined;
    contactPerson?: Person$Outbound | undefined;
    thumbnail?: Thumbnail$Outbound | undefined;
    indexStatus?: IndexStatus$Outbound | undefined;
    ancestors?: Array<Document$Outbound> | undefined;
};

/** @internal */
declare const DocumentMetadata$outboundSchema: z.ZodType<DocumentMetadata$Outbound, z.ZodTypeDef, DocumentMetadata>;

declare type DocumentMetadata = {
    datasource?: string | undefined;
    /**
     * The datasource instance from which the document was extracted.
     */
    datasourceInstance?: string | undefined;
    /**
     * The type of the result. Interpretation is specific to each datasource. (e.g. for Jira issues, this is the issue type such as Bug or Feature Request).
     */
    objectType?: string | undefined;
    /**
     * The name of the container (higher level parent, not direct parent) of the result. Interpretation is specific to each datasource (e.g. Channels for Slack, Project for Jira). cf. parentId
     */
    container?: string | undefined;
    /**
     * The Glean Document ID of the container. Uniquely identifies the container.
     */
    containerId?: string | undefined;
    /**
     * The Glean Document ID of the super container. Super container represents a broader abstraction that contains many containers. For example, whereas container might refer to a folder, super container would refer to a drive.
     */
    superContainerId?: string | undefined;
    /**
     * The id of the direct parent of the result. Interpretation is specific to each datasource (e.g. parent issue for Jira). cf. container
     */
    parentId?: string | undefined;
    mimeType?: string | undefined;
    /**
     * The index-wide unique identifier.
     */
    documentId?: string | undefined;
    /**
     * A unique identifier used to represent the document in any logging or feedback requests in place of documentId.
     */
    loggingId?: string | undefined;
    /**
     * Hash of the Glean Document ID.
     */
    documentIdHash?: string | undefined;
    createTime?: Date | undefined;
    updateTime?: Date | undefined;
    author?: Person | undefined;
    owner?: Person | undefined;
    /**
     * A list of people mentioned in the document.
     */
    mentionedPeople?: Array<Person> | undefined;
    /**
     * The level of visibility of the document as understood by our system.
     */
    visibility?: DocumentVisibility | undefined;
    /**
     * A list of components this result is associated with. Interpretation is specific to each datasource. (e.g. for Jira issues, these are [components](https://confluence.atlassian.com/jirasoftwarecloud/organizing-work-with-components-764478279.html).)
     */
    components?: Array<string> | undefined;
    /**
     * The status or disposition of the result. Interpretation is specific to each datasource. (e.g. for Jira issues, this is the issue status such as Done, In Progress or Will Not Fix).
     */
    status?: string | undefined;
    /**
     * The status category of the result. Meant to be more general than status. Interpretation is specific to each datasource.
     */
    statusCategory?: string | undefined;
    /**
     * A list of stars associated with this result.  "Pin" is an older name.
     */
    pins?: Array<PinDocument> | undefined;
    /**
     * The document priority. Interpretation is datasource specific.
     */
    priority?: string | undefined;
    assignedTo?: Person | undefined;
    updatedBy?: Person | undefined;
    /**
     * A list of tags for the document. Interpretation is datasource specific.
     */
    labels?: Array<string> | undefined;
    /**
     * A list of collections that the document belongs to.
     */
    collections?: Array<Collection> | undefined;
    /**
     * The user-visible datasource specific id (e.g. Salesforce case number for example, GitHub PR number).
     */
    datasourceId?: string | undefined;
    interactions?: DocumentInteractions | undefined;
    verification?: Verification | undefined;
    viewerInfo?: ViewerInfo | undefined;
    permissions?: ObjectPermissions | undefined;
    visitCount?: CountInfo | undefined;
    /**
     * A list of shortcuts of which destination URL is for the document.
     */
    shortcuts?: Array<Shortcut> | undefined;
    /**
     * For file datasources like onedrive/github etc this has the path to the file
     */
    path?: string | undefined;
    /**
     * Custom fields specific to individual datasources
     */
    customData?: {
        [k: string]: CustomDataValue;
    } | undefined;
    /**
     * The document's document_category(.proto).
     */
    documentCategory?: string | undefined;
    contactPerson?: Person | undefined;
    thumbnail?: Thumbnail | undefined;
    indexStatus?: IndexStatus | undefined;
    /**
     * A list of documents that are ancestors of this document in the hierarchy of the document's datasource, for example parent folders or containers. Ancestors can be of different types and some may not be indexed. Higher level ancestors appear earlier in the list.
     */
    ancestors?: Array<Document_2> | undefined;
};

declare function documentMetadataFromJSON(jsonString: string): Result<DocumentMetadata, SDKValidationError>;

declare function documentMetadataToJSON(documentMetadata: DocumentMetadata): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentOrError$ {
    /** @deprecated use `DocumentOrError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentOrError, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentOrError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentOrError$Outbound, z.ZodTypeDef, DocumentOrError>;
    /** @deprecated use `DocumentOrError$Outbound` instead. */
    type Outbound = DocumentOrError$Outbound;
}

/** @internal */
declare const DocumentOrError$inboundSchema: z.ZodType<DocumentOrError, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentOrError$Outbound = {
    error?: string | undefined;
};

/** @internal */
declare const DocumentOrError$outboundSchema: z.ZodType<DocumentOrError$Outbound, z.ZodTypeDef, DocumentOrError>;

declare type DocumentOrError = {
    /**
     * The text for error, reason.
     */
    error?: string | undefined;
};

declare function documentOrErrorFromJSON(jsonString: string): Result<DocumentOrError, SDKValidationError>;

declare function documentOrErrorToJSON(documentOrError: DocumentOrError): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentOrErrorUnion$ {
    /** @deprecated use `DocumentOrErrorUnion$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentOrErrorUnion, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentOrErrorUnion$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentOrErrorUnion$Outbound, z.ZodTypeDef, DocumentOrErrorUnion>;
    /** @deprecated use `DocumentOrErrorUnion$Outbound` instead. */
    type Outbound = DocumentOrErrorUnion$Outbound;
}

/** @internal */
declare const DocumentOrErrorUnion$inboundSchema: z.ZodType<DocumentOrErrorUnion, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentOrErrorUnion$Outbound = Document$Outbound | DocumentOrError$Outbound;

/** @internal */
declare const DocumentOrErrorUnion$outboundSchema: z.ZodType<DocumentOrErrorUnion$Outbound, z.ZodTypeDef, DocumentOrErrorUnion>;

declare type DocumentOrErrorUnion = Document_2 | DocumentOrError;

declare function documentOrErrorUnionFromJSON(jsonString: string): Result<DocumentOrErrorUnion, SDKValidationError>;

declare function documentOrErrorUnionToJSON(documentOrErrorUnion: DocumentOrErrorUnion): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentPermissionsDefinition$ {
    /** @deprecated use `DocumentPermissionsDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentPermissionsDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentPermissionsDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentPermissionsDefinition$Outbound, z.ZodTypeDef, DocumentPermissionsDefinition>;
    /** @deprecated use `DocumentPermissionsDefinition$Outbound` instead. */
    type Outbound = DocumentPermissionsDefinition$Outbound;
}

/** @internal */
declare const DocumentPermissionsDefinition$inboundSchema: z.ZodType<DocumentPermissionsDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentPermissionsDefinition$Outbound = {
    allowedUsers?: Array<UserReferenceDefinition$Outbound> | undefined;
    allowedGroups?: Array<string> | undefined;
    allowedGroupIntersections?: Array<PermissionsGroupIntersectionDefinition$Outbound> | undefined;
    allowAnonymousAccess?: boolean | undefined;
    allowAllDatasourceUsersAccess?: boolean | undefined;
};

/** @internal */
declare const DocumentPermissionsDefinition$outboundSchema: z.ZodType<DocumentPermissionsDefinition$Outbound, z.ZodTypeDef, DocumentPermissionsDefinition>;

/**
 * describes the access control details of the document
 */
declare type DocumentPermissionsDefinition = {
    /**
     * List of users who can view the document
     */
    allowedUsers?: Array<UserReferenceDefinition> | undefined;
    /**
     * List of groups that can view the document
     */
    allowedGroups?: Array<string> | undefined;
    /**
     * List of allowed group intersections. This describes a permissions constraint of the form ((GroupA AND GroupB AND GroupC) OR (GroupX AND GroupY) OR ...
     */
    allowedGroupIntersections?: Array<PermissionsGroupIntersectionDefinition> | undefined;
    /**
     * If true, then any Glean user can view the document
     */
    allowAnonymousAccess?: boolean | undefined;
    /**
     * If true, then any user who has an account in the datasource can view the document.
     */
    allowAllDatasourceUsersAccess?: boolean | undefined;
};

declare function documentPermissionsDefinitionFromJSON(jsonString: string): Result<DocumentPermissionsDefinition, SDKValidationError>;

declare function documentPermissionsDefinitionToJSON(documentPermissionsDefinition: DocumentPermissionsDefinition): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Documents$ {
    /** @deprecated use `Documents$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Documents, z.ZodTypeDef, unknown>;
    /** @deprecated use `Documents$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Documents$Outbound, z.ZodTypeDef, Documents>;
    /** @deprecated use `Documents$Outbound` instead. */
    type Outbound = Documents$Outbound;
}

/** @internal */
declare const Documents$inboundSchema: z.ZodType<Documents, z.ZodTypeDef, unknown>;

/** @internal */
declare type Documents$Outbound = {
    bulkUploadHistory?: Array<BulkUploadHistoryEvent$Outbound> | undefined;
    counts?: DebugDatasourceStatusResponseCounts$Outbound | undefined;
    processingHistory?: Array<ProcessingHistoryEvent$Outbound> | undefined;
};

/** @internal */
declare const Documents$outboundSchema: z.ZodType<Documents$Outbound, z.ZodTypeDef, Documents>;

declare type Documents = {
    /**
     * Information about active and recent successful uploads for the datasource
     */
    bulkUploadHistory?: Array<BulkUploadHistoryEvent> | undefined;
    counts?: DebugDatasourceStatusResponseCounts | undefined;
    /**
     * Information about processing history for the datasource
     */
    processingHistory?: Array<ProcessingHistoryEvent> | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentSection$ {
    /** @deprecated use `DocumentSection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentSection, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentSection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentSection$Outbound, z.ZodTypeDef, DocumentSection>;
    /** @deprecated use `DocumentSection$Outbound` instead. */
    type Outbound = DocumentSection$Outbound;
}

/** @internal */
declare const DocumentSection$inboundSchema: z.ZodType<DocumentSection, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentSection$Outbound = {
    title?: string | undefined;
    url?: string | undefined;
};

/** @internal */
declare const DocumentSection$outboundSchema: z.ZodType<DocumentSection$Outbound, z.ZodTypeDef, DocumentSection>;

declare type DocumentSection = {
    /**
     * The title of the document section (e.g. the section header).
     */
    title?: string | undefined;
    /**
     * The permalink of the document section.
     */
    url?: string | undefined;
};

declare function documentSectionFromJSON(jsonString: string): Result<DocumentSection, SDKValidationError>;

declare function documentSectionToJSON(documentSection: DocumentSection): string;

declare function documentsFromJSON(jsonString: string): Result<Documents, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentSpec1$ {
    /** @deprecated use `DocumentSpec1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentSpec1, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentSpec1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentSpec1$Outbound, z.ZodTypeDef, DocumentSpec1>;
    /** @deprecated use `DocumentSpec1$Outbound` instead. */
    type Outbound = DocumentSpec1$Outbound;
}

/** @internal */
declare const DocumentSpec1$inboundSchema: z.ZodType<DocumentSpec1, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentSpec1$Outbound = {
    url: string;
};

/** @internal */
declare const DocumentSpec1$outboundSchema: z.ZodType<DocumentSpec1$Outbound, z.ZodTypeDef, DocumentSpec1>;

declare type DocumentSpec1 = {
    /**
     * The URL of the document.
     */
    url: string;
};

declare function documentSpec1FromJSON(jsonString: string): Result<DocumentSpec1, SDKValidationError>;

declare function documentSpec1ToJSON(documentSpec1: DocumentSpec1): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentSpec2$ {
    /** @deprecated use `DocumentSpec2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentSpec2, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentSpec2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentSpec2$Outbound, z.ZodTypeDef, DocumentSpec2>;
    /** @deprecated use `DocumentSpec2$Outbound` instead. */
    type Outbound = DocumentSpec2$Outbound;
}

/** @internal */
declare const DocumentSpec2$inboundSchema: z.ZodType<DocumentSpec2, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentSpec2$Outbound = {
    id: string;
};

/** @internal */
declare const DocumentSpec2$outboundSchema: z.ZodType<DocumentSpec2$Outbound, z.ZodTypeDef, DocumentSpec2>;

declare type DocumentSpec2 = {
    /**
     * The ID of the document.
     */
    id: string;
};

declare function documentSpec2FromJSON(jsonString: string): Result<DocumentSpec2, SDKValidationError>;

declare function documentSpec2ToJSON(documentSpec2: DocumentSpec2): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentSpec3$ {
    /** @deprecated use `DocumentSpec3$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentSpec3, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentSpec3$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentSpec3$Outbound, z.ZodTypeDef, DocumentSpec3>;
    /** @deprecated use `DocumentSpec3$Outbound` instead. */
    type Outbound = DocumentSpec3$Outbound;
}

/** @internal */
declare const DocumentSpec3$inboundSchema: z.ZodType<DocumentSpec3, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentSpec3$Outbound = {
    ugcType: string;
    contentId: number;
    docType?: string | undefined;
};

/** @internal */
declare const DocumentSpec3$outboundSchema: z.ZodType<DocumentSpec3$Outbound, z.ZodTypeDef, DocumentSpec3>;

declare type DocumentSpec3 = {
    /**
     * The type of the user generated content (UGC datasource).
     */
    ugcType: DocumentSpecUgcType1;
    /**
     * The numeric id for user generated content. Used for ANNOUNCEMENTS, ANSWERS, COLLECTIONS, SHORTCUTS.
     */
    contentId: number;
    /**
     * The specific type of the user generated content type.
     */
    docType?: string | undefined;
};

declare function documentSpec3FromJSON(jsonString: string): Result<DocumentSpec3, SDKValidationError>;

declare function documentSpec3ToJSON(documentSpec3: DocumentSpec3): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentSpec4$ {
    /** @deprecated use `DocumentSpec4$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentSpec4, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentSpec4$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentSpec4$Outbound, z.ZodTypeDef, DocumentSpec4>;
    /** @deprecated use `DocumentSpec4$Outbound` instead. */
    type Outbound = DocumentSpec4$Outbound;
}

/** @internal */
declare const DocumentSpec4$inboundSchema: z.ZodType<DocumentSpec4, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentSpec4$Outbound = {
    ugcType: string;
    ugcId: string;
    docType?: string | undefined;
};

/** @internal */
declare const DocumentSpec4$outboundSchema: z.ZodType<DocumentSpec4$Outbound, z.ZodTypeDef, DocumentSpec4>;

declare type DocumentSpec4 = {
    /**
     * The type of the user generated content (UGC datasource).
     */
    ugcType: DocumentSpecUgcType2;
    /**
     * The string id for user generated content. Used for CHATS.
     */
    ugcId: string;
    /**
     * The specific type of the user generated content type.
     */
    docType?: string | undefined;
};

declare function documentSpec4FromJSON(jsonString: string): Result<DocumentSpec4, SDKValidationError>;

declare function documentSpec4ToJSON(documentSpec4: DocumentSpec4): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentSpecUgcType1$ {
    /** @deprecated use `DocumentSpecUgcType1$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Announcements: "ANNOUNCEMENTS";
        readonly Answers: "ANSWERS";
        readonly Collections: "COLLECTIONS";
        readonly Shortcuts: "SHORTCUTS";
        readonly Chats: "CHATS";
    }>;
    /** @deprecated use `DocumentSpecUgcType1$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Announcements: "ANNOUNCEMENTS";
        readonly Answers: "ANSWERS";
        readonly Collections: "COLLECTIONS";
        readonly Shortcuts: "SHORTCUTS";
        readonly Chats: "CHATS";
    }>;
}

/** @internal */
declare const DocumentSpecUgcType1$inboundSchema: z.ZodNativeEnum<typeof DocumentSpecUgcType1>;

/** @internal */
declare const DocumentSpecUgcType1$outboundSchema: z.ZodNativeEnum<typeof DocumentSpecUgcType1>;

/**
 * The type of the user generated content (UGC datasource).
 */
declare const DocumentSpecUgcType1: {
    readonly Announcements: "ANNOUNCEMENTS";
    readonly Answers: "ANSWERS";
    readonly Collections: "COLLECTIONS";
    readonly Shortcuts: "SHORTCUTS";
    readonly Chats: "CHATS";
};

/**
 * The type of the user generated content (UGC datasource).
 */
declare type DocumentSpecUgcType1 = ClosedEnum<typeof DocumentSpecUgcType1>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentSpecUgcType2$ {
    /** @deprecated use `DocumentSpecUgcType2$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Announcements: "ANNOUNCEMENTS";
        readonly Answers: "ANSWERS";
        readonly Collections: "COLLECTIONS";
        readonly Shortcuts: "SHORTCUTS";
        readonly Chats: "CHATS";
    }>;
    /** @deprecated use `DocumentSpecUgcType2$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Announcements: "ANNOUNCEMENTS";
        readonly Answers: "ANSWERS";
        readonly Collections: "COLLECTIONS";
        readonly Shortcuts: "SHORTCUTS";
        readonly Chats: "CHATS";
    }>;
}

/** @internal */
declare const DocumentSpecUgcType2$inboundSchema: z.ZodNativeEnum<typeof DocumentSpecUgcType2>;

/** @internal */
declare const DocumentSpecUgcType2$outboundSchema: z.ZodNativeEnum<typeof DocumentSpecUgcType2>;

/**
 * The type of the user generated content (UGC datasource).
 */
declare const DocumentSpecUgcType2: {
    readonly Announcements: "ANNOUNCEMENTS";
    readonly Answers: "ANSWERS";
    readonly Collections: "COLLECTIONS";
    readonly Shortcuts: "SHORTCUTS";
    readonly Chats: "CHATS";
};

/**
 * The type of the user generated content (UGC datasource).
 */
declare type DocumentSpecUgcType2 = ClosedEnum<typeof DocumentSpecUgcType2>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentSpecUnion$ {
    /** @deprecated use `DocumentSpecUnion$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentSpecUnion, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentSpecUnion$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentSpecUnion$Outbound, z.ZodTypeDef, DocumentSpecUnion>;
    /** @deprecated use `DocumentSpecUnion$Outbound` instead. */
    type Outbound = DocumentSpecUnion$Outbound;
}

/** @internal */
declare const DocumentSpecUnion$inboundSchema: z.ZodType<DocumentSpecUnion, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentSpecUnion$Outbound = DocumentSpec3$Outbound | DocumentSpec4$Outbound | DocumentSpec1$Outbound | DocumentSpec2$Outbound;

/** @internal */
declare const DocumentSpecUnion$outboundSchema: z.ZodType<DocumentSpecUnion$Outbound, z.ZodTypeDef, DocumentSpecUnion>;

declare type DocumentSpecUnion = DocumentSpec3 | DocumentSpec4 | DocumentSpec1 | DocumentSpec2;

declare function documentSpecUnionFromJSON(jsonString: string): Result<DocumentSpecUnion, SDKValidationError>;

declare function documentSpecUnionToJSON(documentSpecUnion: DocumentSpecUnion): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentStatusResponse$ {
    /** @deprecated use `DocumentStatusResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentStatusResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentStatusResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentStatusResponse$Outbound, z.ZodTypeDef, DocumentStatusResponse>;
    /** @deprecated use `DocumentStatusResponse$Outbound` instead. */
    type Outbound = DocumentStatusResponse$Outbound;
}

/** @internal */
declare const DocumentStatusResponse$inboundSchema: z.ZodType<DocumentStatusResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentStatusResponse$Outbound = {
    uploadStatus?: string | undefined;
    lastUploadedAt?: string | undefined;
    indexingStatus?: string | undefined;
    lastIndexedAt?: string | undefined;
    permissionIdentityStatus?: string | undefined;
};

/** @internal */
declare const DocumentStatusResponse$outboundSchema: z.ZodType<DocumentStatusResponse$Outbound, z.ZodTypeDef, DocumentStatusResponse>;

/**
 * Describes the document status response body
 */
declare type DocumentStatusResponse = {
    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    uploadStatus?: string | undefined;
    /**
     * Time of last successful upload for the document, in ISO 8601 format
     */
    lastUploadedAt?: string | undefined;
    /**
     * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
     */
    indexingStatus?: string | undefined;
    /**
     * Time of last successful indexing for the document, in ISO 8601 format
     */
    lastIndexedAt?: string | undefined;
    /**
     * Permission identity status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN (Always unknown if `identityDatasourceName` is set). Document visibility may be affected status is `NOT_UPLOADED`.
     */
    permissionIdentityStatus?: string | undefined;
};

declare function documentStatusResponseFromJSON(jsonString: string): Result<DocumentStatusResponse, SDKValidationError>;

declare function documentStatusResponseToJSON(documentStatusResponse: DocumentStatusResponse): string;

declare function documentsToJSON(documents: Documents): string;

declare function documentToJSON(document: Document_2): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentVisibility$ {
    /** @deprecated use `DocumentVisibility$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Private: "PRIVATE";
        readonly SpecificPeopleAndGroups: "SPECIFIC_PEOPLE_AND_GROUPS";
        readonly DomainLink: "DOMAIN_LINK";
        readonly DomainVisible: "DOMAIN_VISIBLE";
        readonly PublicLink: "PUBLIC_LINK";
        readonly PublicVisible: "PUBLIC_VISIBLE";
    }>;
    /** @deprecated use `DocumentVisibility$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Private: "PRIVATE";
        readonly SpecificPeopleAndGroups: "SPECIFIC_PEOPLE_AND_GROUPS";
        readonly DomainLink: "DOMAIN_LINK";
        readonly DomainVisible: "DOMAIN_VISIBLE";
        readonly PublicLink: "PUBLIC_LINK";
        readonly PublicVisible: "PUBLIC_VISIBLE";
    }>;
}

/** @internal */
declare const DocumentVisibility$inboundSchema: z.ZodNativeEnum<typeof DocumentVisibility>;

/** @internal */
declare const DocumentVisibility$outboundSchema: z.ZodNativeEnum<typeof DocumentVisibility>;

/**
 * The level of visibility of the document as understood by our system.
 */
declare const DocumentVisibility: {
    readonly Private: "PRIVATE";
    readonly SpecificPeopleAndGroups: "SPECIFIC_PEOPLE_AND_GROUPS";
    readonly DomainLink: "DOMAIN_LINK";
    readonly DomainVisible: "DOMAIN_VISIBLE";
    readonly PublicLink: "PUBLIC_LINK";
    readonly PublicVisible: "PUBLIC_VISIBLE";
};

/**
 * The level of visibility of the document as understood by our system.
 */
declare type DocumentVisibility = ClosedEnum<typeof DocumentVisibility>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentVisibilityOverride$ {
    /** @deprecated use `DocumentVisibilityOverride$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentVisibilityOverride, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentVisibilityOverride$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentVisibilityOverride$Outbound, z.ZodTypeDef, DocumentVisibilityOverride>;
    /** @deprecated use `DocumentVisibilityOverride$Outbound` instead. */
    type Outbound = DocumentVisibilityOverride$Outbound;
}

/** @internal */
declare const DocumentVisibilityOverride$inboundSchema: z.ZodType<DocumentVisibilityOverride, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentVisibilityOverride$Outbound = {
    docId?: string | undefined;
    override?: string | undefined;
};

/** @internal */
declare const DocumentVisibilityOverride$outboundSchema: z.ZodType<DocumentVisibilityOverride$Outbound, z.ZodTypeDef, DocumentVisibilityOverride>;

declare type DocumentVisibilityOverride = {
    docId?: string | undefined;
    /**
     * The visibility-override state of the document.
     */
    override?: DocumentVisibilityOverrideOverride | undefined;
};

declare function documentVisibilityOverrideFromJSON(jsonString: string): Result<DocumentVisibilityOverride, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentVisibilityOverrideOverride$ {
    /** @deprecated use `DocumentVisibilityOverrideOverride$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly None: "NONE";
        readonly HideFromAll: "HIDE_FROM_ALL";
        readonly HideFromGroups: "HIDE_FROM_GROUPS";
        readonly HideFromAllExceptOwner: "HIDE_FROM_ALL_EXCEPT_OWNER";
    }>;
    /** @deprecated use `DocumentVisibilityOverrideOverride$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly None: "NONE";
        readonly HideFromAll: "HIDE_FROM_ALL";
        readonly HideFromGroups: "HIDE_FROM_GROUPS";
        readonly HideFromAllExceptOwner: "HIDE_FROM_ALL_EXCEPT_OWNER";
    }>;
}

/** @internal */
declare const DocumentVisibilityOverrideOverride$inboundSchema: z.ZodNativeEnum<typeof DocumentVisibilityOverrideOverride>;

/** @internal */
declare const DocumentVisibilityOverrideOverride$outboundSchema: z.ZodNativeEnum<typeof DocumentVisibilityOverrideOverride>;

/**
 * The visibility-override state of the document.
 */
declare const DocumentVisibilityOverrideOverride: {
    readonly None: "NONE";
    readonly HideFromAll: "HIDE_FROM_ALL";
    readonly HideFromGroups: "HIDE_FROM_GROUPS";
    readonly HideFromAllExceptOwner: "HIDE_FROM_ALL_EXCEPT_OWNER";
};

/**
 * The visibility-override state of the document.
 */
declare type DocumentVisibilityOverrideOverride = ClosedEnum<typeof DocumentVisibilityOverrideOverride>;

declare function documentVisibilityOverrideToJSON(documentVisibilityOverride: DocumentVisibilityOverride): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentVisibilityUpdateResult$ {
    /** @deprecated use `DocumentVisibilityUpdateResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DocumentVisibilityUpdateResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `DocumentVisibilityUpdateResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DocumentVisibilityUpdateResult$Outbound, z.ZodTypeDef, DocumentVisibilityUpdateResult>;
    /** @deprecated use `DocumentVisibilityUpdateResult$Outbound` instead. */
    type Outbound = DocumentVisibilityUpdateResult$Outbound;
}

/** @internal */
declare const DocumentVisibilityUpdateResult$inboundSchema: z.ZodType<DocumentVisibilityUpdateResult, z.ZodTypeDef, unknown>;

/** @internal */
declare type DocumentVisibilityUpdateResult$Outbound = {
    docId?: string | undefined;
    override?: string | undefined;
    success?: boolean | undefined;
};

/** @internal */
declare const DocumentVisibilityUpdateResult$outboundSchema: z.ZodType<DocumentVisibilityUpdateResult$Outbound, z.ZodTypeDef, DocumentVisibilityUpdateResult>;

declare type DocumentVisibilityUpdateResult = {
    docId?: string | undefined;
    /**
     * The visibility-override state of the document.
     */
    override?: DocumentVisibilityUpdateResultOverride | undefined;
    /**
     * Whether this document was successfully set to its desired visibility state.
     */
    success?: boolean | undefined;
};

declare function documentVisibilityUpdateResultFromJSON(jsonString: string): Result<DocumentVisibilityUpdateResult, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DocumentVisibilityUpdateResultOverride$ {
    /** @deprecated use `DocumentVisibilityUpdateResultOverride$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly None: "NONE";
        readonly HideFromAll: "HIDE_FROM_ALL";
        readonly HideFromGroups: "HIDE_FROM_GROUPS";
        readonly HideFromAllExceptOwner: "HIDE_FROM_ALL_EXCEPT_OWNER";
    }>;
    /** @deprecated use `DocumentVisibilityUpdateResultOverride$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly None: "NONE";
        readonly HideFromAll: "HIDE_FROM_ALL";
        readonly HideFromGroups: "HIDE_FROM_GROUPS";
        readonly HideFromAllExceptOwner: "HIDE_FROM_ALL_EXCEPT_OWNER";
    }>;
}

/** @internal */
declare const DocumentVisibilityUpdateResultOverride$inboundSchema: z.ZodNativeEnum<typeof DocumentVisibilityUpdateResultOverride>;

/** @internal */
declare const DocumentVisibilityUpdateResultOverride$outboundSchema: z.ZodNativeEnum<typeof DocumentVisibilityUpdateResultOverride>;

/**
 * The visibility-override state of the document.
 */
declare const DocumentVisibilityUpdateResultOverride: {
    readonly None: "NONE";
    readonly HideFromAll: "HIDE_FROM_ALL";
    readonly HideFromGroups: "HIDE_FROM_GROUPS";
    readonly HideFromAllExceptOwner: "HIDE_FROM_ALL_EXCEPT_OWNER";
};

/**
 * The visibility-override state of the document.
 */
declare type DocumentVisibilityUpdateResultOverride = ClosedEnum<typeof DocumentVisibilityUpdateResultOverride>;

declare function documentVisibilityUpdateResultToJSON(documentVisibilityUpdateResult: DocumentVisibilityUpdateResult): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DownloadpolicycsvRequest$ {
    /** @deprecated use `DownloadpolicycsvRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DownloadpolicycsvRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DownloadpolicycsvRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DownloadpolicycsvRequest$Outbound, z.ZodTypeDef, DownloadpolicycsvRequest>;
    /** @deprecated use `DownloadpolicycsvRequest$Outbound` instead. */
    type Outbound = DownloadpolicycsvRequest$Outbound;
}

/** @internal */
declare const DownloadpolicycsvRequest$inboundSchema: z.ZodType<DownloadpolicycsvRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DownloadpolicycsvRequest$Outbound = {
    id: string;
};

/** @internal */
declare const DownloadpolicycsvRequest$outboundSchema: z.ZodType<DownloadpolicycsvRequest$Outbound, z.ZodTypeDef, DownloadpolicycsvRequest>;

declare type DownloadpolicycsvRequest = {
    /**
     * The id of the policy to download violations for.
     */
    id: string;
};

declare function downloadpolicycsvRequestFromJSON(jsonString: string): Result<DownloadpolicycsvRequest, SDKValidationError>;

declare function downloadpolicycsvRequestToJSON(downloadpolicycsvRequest: DownloadpolicycsvRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace DownloadreportcsvRequest$ {
    /** @deprecated use `DownloadreportcsvRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DownloadreportcsvRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DownloadreportcsvRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DownloadreportcsvRequest$Outbound, z.ZodTypeDef, DownloadreportcsvRequest>;
    /** @deprecated use `DownloadreportcsvRequest$Outbound` instead. */
    type Outbound = DownloadreportcsvRequest$Outbound;
}

/** @internal */
declare const DownloadreportcsvRequest$inboundSchema: z.ZodType<DownloadreportcsvRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type DownloadreportcsvRequest$Outbound = {
    id: string;
};

/** @internal */
declare const DownloadreportcsvRequest$outboundSchema: z.ZodType<DownloadreportcsvRequest$Outbound, z.ZodTypeDef, DownloadreportcsvRequest>;

declare type DownloadreportcsvRequest = {
    /**
     * The id of the report to download violations for.
     */
    id: string;
};

declare function downloadreportcsvRequestFromJSON(jsonString: string): Result<DownloadreportcsvRequest, SDKValidationError>;

declare function downloadreportcsvRequestToJSON(downloadreportcsvRequest: DownloadreportcsvRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EditAnswerRequest$ {
    /** @deprecated use `EditAnswerRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EditAnswerRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `EditAnswerRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EditAnswerRequest$Outbound, z.ZodTypeDef, EditAnswerRequest>;
    /** @deprecated use `EditAnswerRequest$Outbound` instead. */
    type Outbound = EditAnswerRequest$Outbound;
}

/** @internal */
declare const EditAnswerRequest$inboundSchema: z.ZodType<EditAnswerRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type EditAnswerRequest$Outbound = {
    id: number;
    docId?: string | undefined;
    question?: string | undefined;
    questionVariations?: Array<string> | undefined;
    bodyText?: string | undefined;
    boardId?: number | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    roles?: Array<UserRoleSpecification$Outbound> | undefined;
    sourceDocumentSpec?: DocumentSpecUnion$Outbound | undefined;
    sourceType?: string | undefined;
    addedCollections?: Array<number> | undefined;
    removedCollections?: Array<number> | undefined;
    combinedAnswerText?: StructuredTextMutableProperties$Outbound | undefined;
};

/** @internal */
declare const EditAnswerRequest$outboundSchema: z.ZodType<EditAnswerRequest$Outbound, z.ZodTypeDef, EditAnswerRequest>;

declare type EditAnswerRequest = {
    /**
     * The opaque ID of the Answer.
     */
    id: number;
    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
     */
    docId?: string | undefined;
    question?: string | undefined;
    /**
     * Additional ways of phrasing this question.
     */
    questionVariations?: Array<string> | undefined;
    /**
     * The plain text answer to the question.
     */
    bodyText?: string | undefined;
    /**
     * The parent board ID of this Answer, or 0 if it's a floating Answer. Adding Answers to Answer Boards is no longer permitted.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    boardId?: number | undefined;
    /**
     * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * A list of user roles for the answer added by the owner.
     */
    addedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of user roles for the answer removed by the owner.
     */
    removedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of roles for this answer explicitly granted by an owner, editor, or admin.
     */
    roles?: Array<UserRoleSpecification> | undefined;
    sourceDocumentSpec?: DocumentSpecUnion | undefined;
    sourceType?: EditAnswerRequestSourceType | undefined;
    /**
     * IDs of Collections to which a document is added.
     */
    addedCollections?: Array<number> | undefined;
    /**
     * IDs of Collections from which a document is removed.
     */
    removedCollections?: Array<number> | undefined;
    combinedAnswerText?: StructuredTextMutableProperties | undefined;
};

declare function editAnswerRequestFromJSON(jsonString: string): Result<EditAnswerRequest, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EditAnswerRequestSourceType$ {
    /** @deprecated use `EditAnswerRequestSourceType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Document: "DOCUMENT";
        readonly Assistant: "ASSISTANT";
    }>;
    /** @deprecated use `EditAnswerRequestSourceType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Document: "DOCUMENT";
        readonly Assistant: "ASSISTANT";
    }>;
}

/** @internal */
declare const EditAnswerRequestSourceType$inboundSchema: z.ZodNativeEnum<typeof EditAnswerRequestSourceType>;

/** @internal */
declare const EditAnswerRequestSourceType$outboundSchema: z.ZodNativeEnum<typeof EditAnswerRequestSourceType>;

declare const EditAnswerRequestSourceType: {
    readonly Document: "DOCUMENT";
    readonly Assistant: "ASSISTANT";
};

declare type EditAnswerRequestSourceType = ClosedEnum<typeof EditAnswerRequestSourceType>;

declare function editAnswerRequestToJSON(editAnswerRequest: EditAnswerRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EditCollectionItemRequest$ {
    /** @deprecated use `EditCollectionItemRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EditCollectionItemRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `EditCollectionItemRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EditCollectionItemRequest$Outbound, z.ZodTypeDef, EditCollectionItemRequest>;
    /** @deprecated use `EditCollectionItemRequest$Outbound` instead. */
    type Outbound = EditCollectionItemRequest$Outbound;
}

/** @internal */
declare const EditCollectionItemRequest$inboundSchema: z.ZodType<EditCollectionItemRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type EditCollectionItemRequest$Outbound = {
    name?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;
    collectionId: number;
    itemId: string;
};

/** @internal */
declare const EditCollectionItemRequest$outboundSchema: z.ZodType<EditCollectionItemRequest$Outbound, z.ZodTypeDef, EditCollectionItemRequest>;

declare type EditCollectionItemRequest = {
    /**
     * The optional name of the Collection item.
     */
    name?: string | undefined;
    /**
     * A helpful description of why this CollectionItem is in the Collection that it's in.
     */
    description?: string | undefined;
    /**
     * The emoji icon for this CollectionItem. Only used for Text type items.
     */
    icon?: string | undefined;
    /**
     * The ID of the Collection to edit CollectionItems in.
     */
    collectionId: number;
    /**
     * The ID of the CollectionItem to edit.
     */
    itemId: string;
};

declare function editCollectionItemRequestFromJSON(jsonString: string): Result<EditCollectionItemRequest, SDKValidationError>;

declare function editCollectionItemRequestToJSON(editCollectionItemRequest: EditCollectionItemRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EditCollectionItemResponse$ {
    /** @deprecated use `EditCollectionItemResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EditCollectionItemResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `EditCollectionItemResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EditCollectionItemResponse$Outbound, z.ZodTypeDef, EditCollectionItemResponse>;
    /** @deprecated use `EditCollectionItemResponse$Outbound` instead. */
    type Outbound = EditCollectionItemResponse$Outbound;
}

/** @internal */
declare const EditCollectionItemResponse$inboundSchema: z.ZodType<EditCollectionItemResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type EditCollectionItemResponse$Outbound = {
    collection?: Collection$Outbound | undefined;
};

/** @internal */
declare const EditCollectionItemResponse$outboundSchema: z.ZodType<EditCollectionItemResponse$Outbound, z.ZodTypeDef, EditCollectionItemResponse>;

declare type EditCollectionItemResponse = {
    collection?: Collection | undefined;
};

declare function editCollectionItemResponseFromJSON(jsonString: string): Result<EditCollectionItemResponse, SDKValidationError>;

declare function editCollectionItemResponseToJSON(editCollectionItemResponse: EditCollectionItemResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EditCollectionRequest$ {
    /** @deprecated use `EditCollectionRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EditCollectionRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `EditCollectionRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EditCollectionRequest$Outbound, z.ZodTypeDef, EditCollectionRequest>;
    /** @deprecated use `EditCollectionRequest$Outbound` instead. */
    type Outbound = EditCollectionRequest$Outbound;
}

/** @internal */
declare const EditCollectionRequest$inboundSchema: z.ZodType<EditCollectionRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type EditCollectionRequest$Outbound = {
    name: string;
    description?: string | undefined;
    addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    icon?: string | undefined;
    adminLocked?: boolean | undefined;
    parentId?: number | undefined;
    thumbnail?: Thumbnail$Outbound | undefined;
    allowedDatasource?: string | undefined;
    id: number;
};

/** @internal */
declare const EditCollectionRequest$outboundSchema: z.ZodType<EditCollectionRequest$Outbound, z.ZodTypeDef, EditCollectionRequest>;

declare type EditCollectionRequest = {
    /**
     * The unique name of the Collection.
     */
    name: string;
    /**
     * A brief summary of the Collection's contents.
     */
    description?: string | undefined;
    /**
     * A list of added user roles for the Collection.
     */
    addedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of removed user roles for the Collection.
     */
    removedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * The emoji icon of this Collection.
     */
    icon?: string | undefined;
    /**
     * Indicates whether edits are allowed for everyone or only admins.
     */
    adminLocked?: boolean | undefined;
    /**
     * The parent of this Collection, or 0 if it's a top-level Collection.
     */
    parentId?: number | undefined;
    thumbnail?: Thumbnail | undefined;
    /**
     * The datasource type this Collection can hold.
     */
    allowedDatasource?: string | undefined;
    /**
     * The ID of the Collection to modify.
     */
    id: number;
};

declare function editCollectionRequestFromJSON(jsonString: string): Result<EditCollectionRequest, SDKValidationError>;

declare function editCollectionRequestToJSON(editCollectionRequest: EditCollectionRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EditCollectionResponse$ {
    /** @deprecated use `EditCollectionResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EditCollectionResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `EditCollectionResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EditCollectionResponse$Outbound, z.ZodTypeDef, EditCollectionResponse>;
    /** @deprecated use `EditCollectionResponse$Outbound` instead. */
    type Outbound = EditCollectionResponse$Outbound;
}

/** @internal */
declare const EditCollectionResponse$inboundSchema: z.ZodType<EditCollectionResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type EditCollectionResponse$Outbound = {
    name: string;
    description: string;
    addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    icon?: string | undefined;
    adminLocked?: boolean | undefined;
    parentId?: number | undefined;
    thumbnail?: Thumbnail$Outbound | undefined;
    allowedDatasource?: string | undefined;
    permissions?: ObjectPermissions$Outbound | undefined;
    id: number;
    createTime?: string | undefined;
    updateTime?: string | undefined;
    creator?: Person$Outbound | undefined;
    updatedBy?: Person$Outbound | undefined;
    itemCount?: number | undefined;
    childCount?: number | undefined;
    items?: Array<CollectionItem$Outbound> | undefined;
    pinMetadata?: CollectionPinnedMetadata$Outbound | undefined;
    shortcuts?: Array<string> | undefined;
    children?: Array<Collection$Outbound> | undefined;
    roles?: Array<UserRoleSpecification$Outbound> | undefined;
    errorCode: string;
    collection?: Collection$Outbound | undefined;
    error?: CollectionError$Outbound | undefined;
};

/** @internal */
declare const EditCollectionResponse$outboundSchema: z.ZodType<EditCollectionResponse$Outbound, z.ZodTypeDef, EditCollectionResponse>;

declare type EditCollectionResponse = {
    /**
     * The unique name of the Collection.
     */
    name: string;
    /**
     * A brief summary of the Collection's contents.
     */
    description: string;
    /**
     * A list of added user roles for the Collection.
     */
    addedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of removed user roles for the Collection.
     */
    removedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * The emoji icon of this Collection.
     */
    icon?: string | undefined;
    /**
     * Indicates whether edits are allowed for everyone or only admins.
     */
    adminLocked?: boolean | undefined;
    /**
     * The parent of this Collection, or 0 if it's a top-level Collection.
     */
    parentId?: number | undefined;
    thumbnail?: Thumbnail | undefined;
    /**
     * The datasource type this Collection can hold.
     */
    allowedDatasource?: string | undefined;
    permissions?: ObjectPermissions | undefined;
    /**
     * The unique ID of the Collection.
     */
    id: number;
    createTime?: Date | undefined;
    updateTime?: Date | undefined;
    creator?: Person | undefined;
    updatedBy?: Person | undefined;
    /**
     * The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
     */
    itemCount?: number | undefined;
    /**
     * The number of children Collections. Separated from the actual children so we can grab the count without children.
     */
    childCount?: number | undefined;
    /**
     * The items in this Collection.
     */
    items?: Array<CollectionItem> | undefined;
    pinMetadata?: CollectionPinnedMetadata | undefined;
    /**
     * The names of the shortcuts (Go Links) that point to this Collection.
     */
    shortcuts?: Array<string> | undefined;
    /**
     * The children Collections of this Collection.
     */
    children?: Array<Collection> | undefined;
    /**
     * A list of user roles for the Collection.
     */
    roles?: Array<UserRoleSpecification> | undefined;
    errorCode: EditCollectionResponseErrorCode;
    collection?: Collection | undefined;
    error?: CollectionError | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EditCollectionResponseErrorCode$ {
    /** @deprecated use `EditCollectionResponseErrorCode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly NameExists: "NAME_EXISTS";
        readonly NotFound: "NOT_FOUND";
        readonly CollectionPinned: "COLLECTION_PINNED";
        readonly ConcurrentHierarchyEdit: "CONCURRENT_HIERARCHY_EDIT";
        readonly HeightViolation: "HEIGHT_VIOLATION";
        readonly WidthViolation: "WIDTH_VIOLATION";
        readonly NoPermissions: "NO_PERMISSIONS";
    }>;
    /** @deprecated use `EditCollectionResponseErrorCode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly NameExists: "NAME_EXISTS";
        readonly NotFound: "NOT_FOUND";
        readonly CollectionPinned: "COLLECTION_PINNED";
        readonly ConcurrentHierarchyEdit: "CONCURRENT_HIERARCHY_EDIT";
        readonly HeightViolation: "HEIGHT_VIOLATION";
        readonly WidthViolation: "WIDTH_VIOLATION";
        readonly NoPermissions: "NO_PERMISSIONS";
    }>;
}

/** @internal */
declare const EditCollectionResponseErrorCode$inboundSchema: z.ZodNativeEnum<typeof EditCollectionResponseErrorCode>;

/** @internal */
declare const EditCollectionResponseErrorCode$outboundSchema: z.ZodNativeEnum<typeof EditCollectionResponseErrorCode>;

declare const EditCollectionResponseErrorCode: {
    readonly NameExists: "NAME_EXISTS";
    readonly NotFound: "NOT_FOUND";
    readonly CollectionPinned: "COLLECTION_PINNED";
    readonly ConcurrentHierarchyEdit: "CONCURRENT_HIERARCHY_EDIT";
    readonly HeightViolation: "HEIGHT_VIOLATION";
    readonly WidthViolation: "WIDTH_VIOLATION";
    readonly NoPermissions: "NO_PERMISSIONS";
};

declare type EditCollectionResponseErrorCode = ClosedEnum<typeof EditCollectionResponseErrorCode>;

declare function editCollectionResponseFromJSON(jsonString: string): Result<EditCollectionResponse, SDKValidationError>;

declare function editCollectionResponseToJSON(editCollectionResponse: EditCollectionResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EditPinRequest$ {
    /** @deprecated use `EditPinRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EditPinRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `EditPinRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EditPinRequest$Outbound, z.ZodTypeDef, EditPinRequest>;
    /** @deprecated use `EditPinRequest$Outbound` instead. */
    type Outbound = EditPinRequest$Outbound;
}

/** @internal */
declare const EditPinRequest$inboundSchema: z.ZodType<EditPinRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type EditPinRequest$Outbound = {
    queries?: Array<string> | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    id?: string | undefined;
};

/** @internal */
declare const EditPinRequest$outboundSchema: z.ZodType<EditPinRequest$Outbound, z.ZodTypeDef, EditPinRequest>;

declare type EditPinRequest = {
    /**
     * The query strings for which the pinned result will show.
     */
    queries?: Array<string> | undefined;
    /**
     * Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * The opaque id of the pin to be edited.
     */
    id?: string | undefined;
};

declare function editPinRequestFromJSON(jsonString: string): Result<EditPinRequest, SDKValidationError>;

declare function editPinRequestToJSON(editPinRequest: EditPinRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EmployeeInfoDefinition$ {
    /** @deprecated use `EmployeeInfoDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EmployeeInfoDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `EmployeeInfoDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EmployeeInfoDefinition$Outbound, z.ZodTypeDef, EmployeeInfoDefinition>;
    /** @deprecated use `EmployeeInfoDefinition$Outbound` instead. */
    type Outbound = EmployeeInfoDefinition$Outbound;
}

/** @internal */
declare const EmployeeInfoDefinition$inboundSchema: z.ZodType<EmployeeInfoDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type EmployeeInfoDefinition$Outbound = {
    email: string;
    firstName?: string | undefined;
    lastName?: string | undefined;
    preferredName?: string | undefined;
    id?: string | undefined;
    phoneNumber?: string | undefined;
    location?: string | undefined;
    structuredLocation?: StructuredLocation$Outbound | undefined;
    title?: string | undefined;
    photoUrl?: string | undefined;
    businessUnit?: string | undefined;
    department: string;
    datasourceProfiles?: Array<DatasourceProfile$Outbound> | undefined;
    teams?: Array<EmployeeTeamInfo$Outbound> | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    bio?: string | undefined;
    pronoun?: string | undefined;
    alsoKnownAs?: Array<string> | undefined;
    profileUrl?: string | undefined;
    socialNetworks?: Array<SocialNetworkDefinition$Outbound> | undefined;
    managerEmail?: string | undefined;
    managerId?: string | undefined;
    type: string;
    relationships?: Array<EntityRelationship$Outbound> | undefined;
    status: string;
    additionalFields?: Array<AdditionalFieldDefinition$Outbound> | undefined;
};

/** @internal */
declare const EmployeeInfoDefinition$outboundSchema: z.ZodType<EmployeeInfoDefinition$Outbound, z.ZodTypeDef, EmployeeInfoDefinition>;

/**
 * Describes employee info
 */
declare type EmployeeInfoDefinition = {
    /**
     * The employee's email
     */
    email: string;
    /**
     * The first name of the employee. **Note**: The value cannot be empty
     *
     * @remarks
     */
    firstName?: string | undefined;
    /**
     * The last name of the employee. **Note**: The value cannot be empty
     *
     * @remarks
     */
    lastName?: string | undefined;
    /**
     * The preferred name or nickname of the employee
     */
    preferredName?: string | undefined;
    /**
     * **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`.
     *
     * @remarks
     */
    id?: string | undefined;
    /**
     * The employee's phone number.
     */
    phoneNumber?: string | undefined;
    /**
     * The employee's location (city/office name etc).
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    location?: string | undefined;
    /**
     * Detailed location with information about country, state, city etc.
     */
    structuredLocation?: StructuredLocation | undefined;
    /**
     * The employee's role title.
     */
    title?: string | undefined;
    /**
     * The employee's profile pic
     */
    photoUrl?: string | undefined;
    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    businessUnit?: string | undefined;
    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    department: string;
    /**
     * The datasource profiles of the employee, e.g. `Slack`,`Github`.
     */
    datasourceProfiles?: Array<DatasourceProfile> | undefined;
    /**
     * Info about the employee's team(s)
     */
    teams?: Array<EmployeeTeamInfo> | undefined;
    /**
     * The date when the employee started
     */
    startDate?: RFCDate | undefined;
    /**
     * If a former employee, the last date of employment.
     */
    endDate?: RFCDate | undefined;
    /**
     * Short biography or mission statement of the employee.
     */
    bio?: string | undefined;
    /**
     * She/her, He/his or other pronoun.
     */
    pronoun?: string | undefined;
    /**
     * Other names associated with the employee.
     */
    alsoKnownAs?: Array<string> | undefined;
    /**
     * Link to internal company person profile.
     */
    profileUrl?: string | undefined;
    /**
     * List of social network profiles.
     */
    socialNetworks?: Array<SocialNetworkDefinition> | undefined;
    /**
     * The email of the employee's manager
     */
    managerEmail?: string | undefined;
    /**
     * **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`.
     *
     * @remarks
     */
    managerId?: string | undefined;
    /**
     * The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`
     */
    type?: string | undefined;
    /**
     * List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile.
     */
    relationships?: Array<EntityRelationship> | undefined;
    /**
     * The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`
     */
    status?: string | undefined;
    /**
     * List of additional fields with more information about the employee.
     */
    additionalFields?: Array<AdditionalFieldDefinition> | undefined;
};

declare function employeeInfoDefinitionFromJSON(jsonString: string): Result<EmployeeInfoDefinition, SDKValidationError>;

declare function employeeInfoDefinitionToJSON(employeeInfoDefinition: EmployeeInfoDefinition): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EmployeeTeamInfo$ {
    /** @deprecated use `EmployeeTeamInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EmployeeTeamInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `EmployeeTeamInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EmployeeTeamInfo$Outbound, z.ZodTypeDef, EmployeeTeamInfo>;
    /** @deprecated use `EmployeeTeamInfo$Outbound` instead. */
    type Outbound = EmployeeTeamInfo$Outbound;
}

/** @internal */
declare const EmployeeTeamInfo$inboundSchema: z.ZodType<EmployeeTeamInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type EmployeeTeamInfo$Outbound = {
    id?: string | undefined;
    name?: string | undefined;
    url?: string | undefined;
};

/** @internal */
declare const EmployeeTeamInfo$outboundSchema: z.ZodType<EmployeeTeamInfo$Outbound, z.ZodTypeDef, EmployeeTeamInfo>;

/**
 * Information about which team an employee belongs to
 */
declare type EmployeeTeamInfo = {
    /**
     * unique identifier for this team
     */
    id?: string | undefined;
    /**
     * Team name
     */
    name?: string | undefined;
    /**
     * Link to internal company team page
     */
    url?: string | undefined;
};

declare function employeeTeamInfoFromJSON(jsonString: string): Result<EmployeeTeamInfo, SDKValidationError>;

declare function employeeTeamInfoToJSON(employeeTeamInfo: EmployeeTeamInfo): string;

declare class Entities extends ClientSDK {
    /**
     * List entities
     *
     * @remarks
     * List some set of details for all entities that fit the given criteria and return in the requested order. Does not support negation in filters, assumes relation type EQUALS. There is a limit of 10000 entities that can be retrieved via this endpoint, except when using FULL_DIRECTORY request type for people entities.
     */
    list(request: components.ListEntitiesRequest, options?: RequestOptions): Promise<components.ListEntitiesResponse>;
    /**
     * Read people
     *
     * @remarks
     * Read people details for the given IDs.
     */
    readPeople(request: components.PeopleRequest, options?: RequestOptions): Promise<components.PeopleResponse>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EntitiesSortOrder$ {
    /** @deprecated use `EntitiesSortOrder$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly EntityName: "ENTITY_NAME";
        readonly FirstName: "FIRST_NAME";
        readonly LastName: "LAST_NAME";
        readonly OrgSizeCount: "ORG_SIZE_COUNT";
        readonly StartDate: "START_DATE";
        readonly TeamSize: "TEAM_SIZE";
        readonly Relevance: "RELEVANCE";
    }>;
    /** @deprecated use `EntitiesSortOrder$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly EntityName: "ENTITY_NAME";
        readonly FirstName: "FIRST_NAME";
        readonly LastName: "LAST_NAME";
        readonly OrgSizeCount: "ORG_SIZE_COUNT";
        readonly StartDate: "START_DATE";
        readonly TeamSize: "TEAM_SIZE";
        readonly Relevance: "RELEVANCE";
    }>;
}

/** @internal */
declare const EntitiesSortOrder$inboundSchema: z.ZodNativeEnum<typeof EntitiesSortOrder>;

/** @internal */
declare const EntitiesSortOrder$outboundSchema: z.ZodNativeEnum<typeof EntitiesSortOrder>;

/**
 * Different ways of sorting entities
 */
declare const EntitiesSortOrder: {
    readonly EntityName: "ENTITY_NAME";
    readonly FirstName: "FIRST_NAME";
    readonly LastName: "LAST_NAME";
    readonly OrgSizeCount: "ORG_SIZE_COUNT";
    readonly StartDate: "START_DATE";
    readonly TeamSize: "TEAM_SIZE";
    readonly Relevance: "RELEVANCE";
};

/**
 * Different ways of sorting entities
 */
declare type EntitiesSortOrder = ClosedEnum<typeof EntitiesSortOrder>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EntityRelationship$ {
    /** @deprecated use `EntityRelationship$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EntityRelationship, z.ZodTypeDef, unknown>;
    /** @deprecated use `EntityRelationship$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EntityRelationship$Outbound, z.ZodTypeDef, EntityRelationship>;
    /** @deprecated use `EntityRelationship$Outbound` instead. */
    type Outbound = EntityRelationship$Outbound;
}

/** @internal */
declare const EntityRelationship$inboundSchema: z.ZodType<EntityRelationship, z.ZodTypeDef, unknown>;

/** @internal */
declare type EntityRelationship$Outbound = {
    name: string;
    email: string;
};

/** @internal */
declare const EntityRelationship$outboundSchema: z.ZodType<EntityRelationship$Outbound, z.ZodTypeDef, EntityRelationship>;

/**
 * Describes a relationship edge between a source and destination entity
 */
declare type EntityRelationship = {
    /**
     * The title or type of relationship. Currently an enum of `CHIEF_OF_STAFF`, `EXECUTIVE_ASSISTANT`
     */
    name: string;
    /**
     * Email of the person with whom the relationship exists. Per the example above, either `B` or `C`'s email depending on the relationship.
     */
    email: string;
};

declare function entityRelationshipFromJSON(jsonString: string): Result<EntityRelationship, SDKValidationError>;

declare function entityRelationshipToJSON(entityRelationship: EntityRelationship): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EntityType$ {
    /** @deprecated use `EntityType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Person: "PERSON";
        readonly Project: "PROJECT";
        readonly Customer: "CUSTOMER";
    }>;
    /** @deprecated use `EntityType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Person: "PERSON";
        readonly Project: "PROJECT";
        readonly Customer: "CUSTOMER";
    }>;
}

/** @internal */
declare const EntityType$inboundSchema: z.ZodNativeEnum<typeof EntityType>;

/** @internal */
declare const EntityType$outboundSchema: z.ZodNativeEnum<typeof EntityType>;

/**
 * The type of entity.
 */
declare const EntityType: {
    readonly Person: "PERSON";
    readonly Project: "PROJECT";
    readonly Customer: "CUSTOMER";
};

/**
 * The type of entity.
 */
declare type EntityType = ClosedEnum<typeof EntityType>;

declare function errorFromJSON(jsonString: string): Result<ErrorT, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ErrorMessage$ {
    /** @deprecated use `ErrorMessage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ErrorMessage, z.ZodTypeDef, unknown>;
    /** @deprecated use `ErrorMessage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ErrorMessage$Outbound, z.ZodTypeDef, ErrorMessage>;
    /** @deprecated use `ErrorMessage$Outbound` instead. */
    type Outbound = ErrorMessage$Outbound;
}

/** @internal */
declare const ErrorMessage$inboundSchema: z.ZodType<ErrorMessage, z.ZodTypeDef, unknown>;

/** @internal */
declare type ErrorMessage$Outbound = {
    source?: string | undefined;
    errorMessage?: string | undefined;
};

/** @internal */
declare const ErrorMessage$outboundSchema: z.ZodType<ErrorMessage$Outbound, z.ZodTypeDef, ErrorMessage>;

declare type ErrorMessage = {
    /**
     * The datasource this message relates to.
     */
    source?: string | undefined;
    errorMessage?: string | undefined;
};

declare function errorMessageFromJSON(jsonString: string): Result<ErrorMessage, SDKValidationError>;

declare function errorMessageToJSON(errorMessage: ErrorMessage): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ErrorT$ {
    /** @deprecated use `ErrorT$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown>;
    /** @deprecated use `ErrorT$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ErrorT$Outbound, z.ZodTypeDef, ErrorT>;
    /** @deprecated use `ErrorT$Outbound` instead. */
    type Outbound = ErrorT$Outbound;
}

/** @internal */
declare const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown>;

/** @internal */
declare type ErrorT$Outbound = {
    message?: string | undefined;
};

/** @internal */
declare const ErrorT$outboundSchema: z.ZodType<ErrorT$Outbound, z.ZodTypeDef, ErrorT>;

declare type ErrorT = {
    message?: string | undefined;
};

declare function errorToJSON(errorT: ErrorT): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Event$ {
    /** @deprecated use `Event$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Click: "CLICK";
        readonly ContainerClick: "CONTAINER_CLICK";
        readonly CopyLink: "COPY_LINK";
        readonly Create: "CREATE";
        readonly Dismiss: "DISMISS";
        readonly Downvote: "DOWNVOTE";
        readonly Email: "EMAIL";
        readonly Execute: "EXECUTE";
        readonly Filter: "FILTER";
        readonly FirstToken: "FIRST_TOKEN";
        readonly FocusIn: "FOCUS_IN";
        readonly LastToken: "LAST_TOKEN";
        readonly ManualFeedback: "MANUAL_FEEDBACK";
        readonly ManualFeedbackSideBySide: "MANUAL_FEEDBACK_SIDE_BY_SIDE";
        readonly MarkAsRead: "MARK_AS_READ";
        readonly Message: "MESSAGE";
        readonly MiddleClick: "MIDDLE_CLICK";
        readonly PageBlur: "PAGE_BLUR";
        readonly PageFocus: "PAGE_FOCUS";
        readonly PageLeave: "PAGE_LEAVE";
        readonly Preview: "PREVIEW";
        readonly RelatedClick: "RELATED_CLICK";
        readonly RightClick: "RIGHT_CLICK";
        readonly SectionClick: "SECTION_CLICK";
        readonly Seen: "SEEN";
        readonly Share: "SHARE";
        readonly ShowMore: "SHOW_MORE";
        readonly Upvote: "UPVOTE";
        readonly View: "VIEW";
        readonly Visible: "VISIBLE";
    }>;
    /** @deprecated use `Event$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Click: "CLICK";
        readonly ContainerClick: "CONTAINER_CLICK";
        readonly CopyLink: "COPY_LINK";
        readonly Create: "CREATE";
        readonly Dismiss: "DISMISS";
        readonly Downvote: "DOWNVOTE";
        readonly Email: "EMAIL";
        readonly Execute: "EXECUTE";
        readonly Filter: "FILTER";
        readonly FirstToken: "FIRST_TOKEN";
        readonly FocusIn: "FOCUS_IN";
        readonly LastToken: "LAST_TOKEN";
        readonly ManualFeedback: "MANUAL_FEEDBACK";
        readonly ManualFeedbackSideBySide: "MANUAL_FEEDBACK_SIDE_BY_SIDE";
        readonly MarkAsRead: "MARK_AS_READ";
        readonly Message: "MESSAGE";
        readonly MiddleClick: "MIDDLE_CLICK";
        readonly PageBlur: "PAGE_BLUR";
        readonly PageFocus: "PAGE_FOCUS";
        readonly PageLeave: "PAGE_LEAVE";
        readonly Preview: "PREVIEW";
        readonly RelatedClick: "RELATED_CLICK";
        readonly RightClick: "RIGHT_CLICK";
        readonly SectionClick: "SECTION_CLICK";
        readonly Seen: "SEEN";
        readonly Share: "SHARE";
        readonly ShowMore: "SHOW_MORE";
        readonly Upvote: "UPVOTE";
        readonly View: "VIEW";
        readonly Visible: "VISIBLE";
    }>;
}

/** @internal */
declare const Event$inboundSchema: z.ZodNativeEnum<typeof Event_2>;

/** @internal */
declare const Event$outboundSchema: z.ZodNativeEnum<typeof Event_2>;

/**
 * The action the user took within a Glean client with respect to the object referred to by the given `trackingToken`.
 */
declare const Event_2: {
    readonly Click: "CLICK";
    readonly ContainerClick: "CONTAINER_CLICK";
    readonly CopyLink: "COPY_LINK";
    readonly Create: "CREATE";
    readonly Dismiss: "DISMISS";
    readonly Downvote: "DOWNVOTE";
    readonly Email: "EMAIL";
    readonly Execute: "EXECUTE";
    readonly Filter: "FILTER";
    readonly FirstToken: "FIRST_TOKEN";
    readonly FocusIn: "FOCUS_IN";
    readonly LastToken: "LAST_TOKEN";
    readonly ManualFeedback: "MANUAL_FEEDBACK";
    readonly ManualFeedbackSideBySide: "MANUAL_FEEDBACK_SIDE_BY_SIDE";
    readonly MarkAsRead: "MARK_AS_READ";
    readonly Message: "MESSAGE";
    readonly MiddleClick: "MIDDLE_CLICK";
    readonly PageBlur: "PAGE_BLUR";
    readonly PageFocus: "PAGE_FOCUS";
    readonly PageLeave: "PAGE_LEAVE";
    readonly Preview: "PREVIEW";
    readonly RelatedClick: "RELATED_CLICK";
    readonly RightClick: "RIGHT_CLICK";
    readonly SectionClick: "SECTION_CLICK";
    readonly Seen: "SEEN";
    readonly Share: "SHARE";
    readonly ShowMore: "SHOW_MORE";
    readonly Upvote: "UPVOTE";
    readonly View: "VIEW";
    readonly Visible: "VISIBLE";
};

/**
 * The action the user took within a Glean client with respect to the object referred to by the given `trackingToken`.
 */
declare type Event_2 = ClosedEnum<typeof Event_2>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EventClassification$ {
    /** @deprecated use `EventClassification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<EventClassification, z.ZodTypeDef, unknown>;
    /** @deprecated use `EventClassification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<EventClassification$Outbound, z.ZodTypeDef, EventClassification>;
    /** @deprecated use `EventClassification$Outbound` instead. */
    type Outbound = EventClassification$Outbound;
}

/** @internal */
declare const EventClassification$inboundSchema: z.ZodType<EventClassification, z.ZodTypeDef, unknown>;

/** @internal */
declare type EventClassification$Outbound = {
    name?: string | undefined;
    strategies?: Array<string> | undefined;
};

/** @internal */
declare const EventClassification$outboundSchema: z.ZodType<EventClassification$Outbound, z.ZodTypeDef, EventClassification>;

/**
 * A generated classification of a given event.
 */
declare type EventClassification = {
    /**
     * The name for a generated classification of an event.
     */
    name?: EventClassificationName | undefined;
    strategies?: Array<EventStrategyName> | undefined;
};

declare function eventClassificationFromJSON(jsonString: string): Result<EventClassification, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EventClassificationName$ {
    /** @deprecated use `EventClassificationName$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ExternalEvent: "External Event";
    }>;
    /** @deprecated use `EventClassificationName$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ExternalEvent: "External Event";
    }>;
}

/** @internal */
declare const EventClassificationName$inboundSchema: z.ZodNativeEnum<typeof EventClassificationName>;

/** @internal */
declare const EventClassificationName$outboundSchema: z.ZodNativeEnum<typeof EventClassificationName>;

/**
 * The name for a generated classification of an event.
 */
declare const EventClassificationName: {
    readonly ExternalEvent: "External Event";
};

/**
 * The name for a generated classification of an event.
 */
declare type EventClassificationName = ClosedEnum<typeof EventClassificationName>;

declare function eventClassificationToJSON(eventClassification: EventClassification): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace EventStrategyName$ {
    /** @deprecated use `EventStrategyName$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly CustomerCard: "customerCard";
        readonly News: "news";
        readonly Call: "call";
        readonly Email: "email";
        readonly MeetingNotes: "meetingNotes";
        readonly LinkedIn: "linkedIn";
        readonly RelevantDocuments: "relevantDocuments";
        readonly ChatFollowUps: "chatFollowUps";
        readonly Conversations: "conversations";
    }>;
    /** @deprecated use `EventStrategyName$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly CustomerCard: "customerCard";
        readonly News: "news";
        readonly Call: "call";
        readonly Email: "email";
        readonly MeetingNotes: "meetingNotes";
        readonly LinkedIn: "linkedIn";
        readonly RelevantDocuments: "relevantDocuments";
        readonly ChatFollowUps: "chatFollowUps";
        readonly Conversations: "conversations";
    }>;
}

/** @internal */
declare const EventStrategyName$inboundSchema: z.ZodNativeEnum<typeof EventStrategyName>;

/** @internal */
declare const EventStrategyName$outboundSchema: z.ZodNativeEnum<typeof EventStrategyName>;

/**
 * The name of method used to surface relevant data for a given calendar event.
 */
declare const EventStrategyName: {
    readonly CustomerCard: "customerCard";
    readonly News: "news";
    readonly Call: "call";
    readonly Email: "email";
    readonly MeetingNotes: "meetingNotes";
    readonly LinkedIn: "linkedIn";
    readonly RelevantDocuments: "relevantDocuments";
    readonly ChatFollowUps: "chatFollowUps";
    readonly Conversations: "conversations";
};

/**
 * The name of method used to surface relevant data for a given calendar event.
 */
declare type EventStrategyName = ClosedEnum<typeof EventStrategyName>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ExternalSharingOptions$ {
    /** @deprecated use `ExternalSharingOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ExternalSharingOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `ExternalSharingOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ExternalSharingOptions$Outbound, z.ZodTypeDef, ExternalSharingOptions>;
    /** @deprecated use `ExternalSharingOptions$Outbound` instead. */
    type Outbound = ExternalSharingOptions$Outbound;
}

/** @internal */
declare const ExternalSharingOptions$inboundSchema: z.ZodType<ExternalSharingOptions, z.ZodTypeDef, unknown>;

/** @internal */
declare type ExternalSharingOptions$Outbound = {
    enabled?: boolean | undefined;
    threshold?: number | undefined;
    thresholdEnabled?: boolean | undefined;
    anyoneWithLinkEnabled?: boolean | undefined;
    anyoneInternalEnabled?: boolean | undefined;
    anonymousAccessEnabled?: boolean | undefined;
    userAccessEnabled?: boolean | undefined;
    userIds?: Array<string> | undefined;
    domainAccessEnabled?: boolean | undefined;
};

/** @internal */
declare const ExternalSharingOptions$outboundSchema: z.ZodType<ExternalSharingOptions$Outbound, z.ZodTypeDef, ExternalSharingOptions>;

/**
 * Controls how "shared" a document must be to get picked for scans.
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
declare type ExternalSharingOptions = {
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    enabled?: boolean | undefined;
    /**
     * The minimum number of users the document is shared with.
     */
    threshold?: number | undefined;
    /**
     * Documents will be filtered based on how many people have access to it.
     */
    thresholdEnabled?: boolean | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    anyoneWithLinkEnabled?: boolean | undefined;
    /**
     * Only users within the organization can access the document.
     */
    anyoneInternalEnabled?: boolean | undefined;
    /**
     * Anyone on the internet can access the document.
     */
    anonymousAccessEnabled?: boolean | undefined;
    /**
     * Enable user access check
     */
    userAccessEnabled?: boolean | undefined;
    /**
     * Any one of the specified users can access the document.
     */
    userIds?: Array<string> | undefined;
    domainAccessEnabled?: boolean | undefined;
};

declare function externalSharingOptionsFromJSON(jsonString: string): Result<ExternalSharingOptions, SDKValidationError>;

declare function externalSharingOptionsToJSON(externalSharingOptions: ExternalSharingOptions): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ExternalShortcut$ {
    /** @deprecated use `ExternalShortcut$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ExternalShortcut, z.ZodTypeDef, unknown>;
    /** @deprecated use `ExternalShortcut$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ExternalShortcut$Outbound, z.ZodTypeDef, ExternalShortcut>;
    /** @deprecated use `ExternalShortcut$Outbound` instead. */
    type Outbound = ExternalShortcut$Outbound;
}

/** @internal */
declare const ExternalShortcut$inboundSchema: z.ZodType<ExternalShortcut, z.ZodTypeDef, unknown>;

/** @internal */
declare type ExternalShortcut$Outbound = {
    inputAlias: string;
    description?: string | undefined;
    destinationUrl: string;
    createdBy: string;
    createTime?: number | undefined;
    updatedBy?: string | undefined;
    updateTime?: number | undefined;
    title?: string | undefined;
    intermediateUrl: string;
    decayedVisitScore?: number | undefined;
    editUrl?: string | undefined;
};

/** @internal */
declare const ExternalShortcut$outboundSchema: z.ZodType<ExternalShortcut$Outbound, z.ZodTypeDef, ExternalShortcut>;

declare type ExternalShortcut = {
    /**
     * link text following the viewPrefix as entered by the user. For example, if the view prefix is `go/` and the shortened URL is `go/abc`, then `abc` is the inputAlias.
     */
    inputAlias: string;
    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    description?: string | undefined;
    /**
     * destination URL for the shortcut.
     */
    destinationUrl: string;
    /**
     * Email of the user who created this shortcut.
     */
    createdBy: string;
    /**
     * The time the shortcut was created in epoch seconds.
     */
    createTime?: number | undefined;
    /**
     * Email of the user who last updated this shortcut.
     */
    updatedBy?: string | undefined;
    /**
     * The time the shortcut was updated in epoch seconds.
     */
    updateTime?: number | undefined;
    /**
     * Title of the golink
     */
    title?: string | undefined;
    /**
     * The URL from which the user is then redirected to the destination URL.
     */
    intermediateUrl: string;
    /**
     * decayed visits score for ranking
     */
    decayedVisitScore?: number | undefined;
    /**
     * The URL using which the user can access the edit page of the shortcut.
     */
    editUrl?: string | undefined;
};

declare function externalShortcutFromJSON(jsonString: string): Result<ExternalShortcut, SDKValidationError>;

declare function externalShortcutToJSON(externalShortcut: ExternalShortcut): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ExtractedQnA$ {
    /** @deprecated use `ExtractedQnA$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ExtractedQnA, z.ZodTypeDef, unknown>;
    /** @deprecated use `ExtractedQnA$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ExtractedQnA$Outbound, z.ZodTypeDef, ExtractedQnA>;
    /** @deprecated use `ExtractedQnA$Outbound` instead. */
    type Outbound = ExtractedQnA$Outbound;
}

/** @internal */
declare const ExtractedQnA$inboundSchema: z.ZodType<ExtractedQnA, z.ZodTypeDef, unknown>;

/** @internal */
declare type ExtractedQnA$Outbound = {
    heading?: string | undefined;
    question?: string | undefined;
    questionResult?: SearchResult$Outbound | undefined;
};

/** @internal */
declare const ExtractedQnA$outboundSchema: z.ZodType<ExtractedQnA$Outbound, z.ZodTypeDef, ExtractedQnA>;

declare type ExtractedQnA = {
    /**
     * Heading text that was matched to produce this result.
     */
    heading?: string | undefined;
    /**
     * Question text that was matched to produce this result.
     */
    question?: string | undefined;
    questionResult?: SearchResult | undefined;
};

declare function extractedQnAFromJSON(jsonString: string): Result<ExtractedQnA, SDKValidationError>;

declare function extractedQnAToJSON(extractedQnA: ExtractedQnA): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FacetBucket$ {
    /** @deprecated use `FacetBucket$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FacetBucket, z.ZodTypeDef, unknown>;
    /** @deprecated use `FacetBucket$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FacetBucket$Outbound, z.ZodTypeDef, FacetBucket>;
    /** @deprecated use `FacetBucket$Outbound` instead. */
    type Outbound = FacetBucket$Outbound;
}

/** @internal */
declare const FacetBucket$inboundSchema: z.ZodType<FacetBucket, z.ZodTypeDef, unknown>;

/** @internal */
declare type FacetBucket$Outbound = {
    count?: number | undefined;
    datasource?: string | undefined;
    percentage?: number | undefined;
    value?: FacetValue$Outbound | undefined;
};

/** @internal */
declare const FacetBucket$outboundSchema: z.ZodType<FacetBucket$Outbound, z.ZodTypeDef, FacetBucket>;

declare type FacetBucket = {
    /**
     * Estimated number of results in this facet.
     */
    count?: number | undefined;
    /**
     * The datasource the value belongs to. This will be used by the all tab to show types across all datasources.
     */
    datasource?: string | undefined;
    /**
     * Estimated percentage of results in this facet.
     */
    percentage?: number | undefined;
    value?: FacetValue | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FacetBucketFilter$ {
    /** @deprecated use `FacetBucketFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FacetBucketFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `FacetBucketFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FacetBucketFilter$Outbound, z.ZodTypeDef, FacetBucketFilter>;
    /** @deprecated use `FacetBucketFilter$Outbound` instead. */
    type Outbound = FacetBucketFilter$Outbound;
}

/** @internal */
declare const FacetBucketFilter$inboundSchema: z.ZodType<FacetBucketFilter, z.ZodTypeDef, unknown>;

/** @internal */
declare type FacetBucketFilter$Outbound = {
    facet?: string | undefined;
    prefix?: string | undefined;
};

/** @internal */
declare const FacetBucketFilter$outboundSchema: z.ZodType<FacetBucketFilter$Outbound, z.ZodTypeDef, FacetBucketFilter>;

declare type FacetBucketFilter = {
    /**
     * The facet whose buckets should be filtered.
     */
    facet?: string | undefined;
    /**
     * The per-term prefix that facet buckets should be filtered on.
     */
    prefix?: string | undefined;
};

declare function facetBucketFilterFromJSON(jsonString: string): Result<FacetBucketFilter, SDKValidationError>;

declare function facetBucketFilterToJSON(facetBucketFilter: FacetBucketFilter): string;

declare function facetBucketFromJSON(jsonString: string): Result<FacetBucket, SDKValidationError>;

declare function facetBucketToJSON(facetBucket: FacetBucket): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FacetFilter$ {
    /** @deprecated use `FacetFilter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FacetFilter, z.ZodTypeDef, unknown>;
    /** @deprecated use `FacetFilter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FacetFilter$Outbound, z.ZodTypeDef, FacetFilter>;
    /** @deprecated use `FacetFilter$Outbound` instead. */
    type Outbound = FacetFilter$Outbound;
}

/** @internal */
declare const FacetFilter$inboundSchema: z.ZodType<FacetFilter, z.ZodTypeDef, unknown>;

/** @internal */
declare type FacetFilter$Outbound = {
    fieldName?: string | undefined;
    values?: Array<FacetFilterValue$Outbound> | undefined;
    groupName?: string | undefined;
};

/** @internal */
declare const FacetFilter$outboundSchema: z.ZodType<FacetFilter$Outbound, z.ZodTypeDef, FacetFilter>;

declare type FacetFilter = {
    fieldName?: string | undefined;
    /**
     * Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet.
     */
    values?: Array<FacetFilterValue> | undefined;
    /**
     * Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet.
     */
    groupName?: string | undefined;
};

declare function facetFilterFromJSON(jsonString: string): Result<FacetFilter, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FacetFilterSet$ {
    /** @deprecated use `FacetFilterSet$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FacetFilterSet, z.ZodTypeDef, unknown>;
    /** @deprecated use `FacetFilterSet$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FacetFilterSet$Outbound, z.ZodTypeDef, FacetFilterSet>;
    /** @deprecated use `FacetFilterSet$Outbound` instead. */
    type Outbound = FacetFilterSet$Outbound;
}

/** @internal */
declare const FacetFilterSet$inboundSchema: z.ZodType<FacetFilterSet, z.ZodTypeDef, unknown>;

/** @internal */
declare type FacetFilterSet$Outbound = {
    filters?: Array<FacetFilter$Outbound> | undefined;
};

/** @internal */
declare const FacetFilterSet$outboundSchema: z.ZodType<FacetFilterSet$Outbound, z.ZodTypeDef, FacetFilterSet>;

/**
 * Within a single FacetFilterSet, the filters are treated as AND. For example, owner Sumeet and type Spreadsheet shows documents that are by Sumeet AND are Spreadsheets.
 */
declare type FacetFilterSet = {
    filters?: Array<FacetFilter> | undefined;
};

declare function facetFilterSetFromJSON(jsonString: string): Result<FacetFilterSet, SDKValidationError>;

declare function facetFilterSetToJSON(facetFilterSet: FacetFilterSet): string;

declare function facetFilterToJSON(facetFilter: FacetFilter): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FacetFilterValue$ {
    /** @deprecated use `FacetFilterValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FacetFilterValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `FacetFilterValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FacetFilterValue$Outbound, z.ZodTypeDef, FacetFilterValue>;
    /** @deprecated use `FacetFilterValue$Outbound` instead. */
    type Outbound = FacetFilterValue$Outbound;
}

/** @internal */
declare const FacetFilterValue$inboundSchema: z.ZodType<FacetFilterValue, z.ZodTypeDef, unknown>;

/** @internal */
declare type FacetFilterValue$Outbound = {
    value?: string | undefined;
    relationType?: string | undefined;
    isNegated?: boolean | undefined;
};

/** @internal */
declare const FacetFilterValue$outboundSchema: z.ZodType<FacetFilterValue$Outbound, z.ZodTypeDef, FacetFilterValue>;

declare type FacetFilterValue = {
    value?: string | undefined;
    relationType?: RelationType | undefined;
    /**
     * DEPRECATED - please use relationType instead
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    isNegated?: boolean | undefined;
};

declare function facetFilterValueFromJSON(jsonString: string): Result<FacetFilterValue, SDKValidationError>;

declare function facetFilterValueToJSON(facetFilterValue: FacetFilterValue): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FacetResult$ {
    /** @deprecated use `FacetResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FacetResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `FacetResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FacetResult$Outbound, z.ZodTypeDef, FacetResult>;
    /** @deprecated use `FacetResult$Outbound` instead. */
    type Outbound = FacetResult$Outbound;
}

/** @internal */
declare const FacetResult$inboundSchema: z.ZodType<FacetResult, z.ZodTypeDef, unknown>;

/** @internal */
declare type FacetResult$Outbound = {
    sourceName?: string | undefined;
    operatorName?: string | undefined;
    buckets?: Array<FacetBucket$Outbound> | undefined;
    hasMoreBuckets?: boolean | undefined;
    groupName?: string | undefined;
};

/** @internal */
declare const FacetResult$outboundSchema: z.ZodType<FacetResult$Outbound, z.ZodTypeDef, FacetResult>;

declare type FacetResult = {
    /**
     * The source of this facet (e.g. container_name, type, last_updated_at).
     */
    sourceName?: string | undefined;
    /**
     * How to display this facet. Currently supportes 'SelectSingle' and 'SelectMultiple'.
     */
    operatorName?: string | undefined;
    /**
     * A list of unique buckets that exist within this result set.
     */
    buckets?: Array<FacetBucket> | undefined;
    /**
     * Returns true if more buckets exist than those returned. Additional buckets can be retrieve by requesting again with a higher facetBucketSize.
     */
    hasMoreBuckets?: boolean | undefined;
    /**
     * For most facets this will be the empty string, meaning the facet is high-level and applies to all documents for the datasource. When non-empty, this is used to group facets together (i.e. group facets for each doctype for a certain datasource)
     */
    groupName?: string | undefined;
};

declare function facetResultFromJSON(jsonString: string): Result<FacetResult, SDKValidationError>;

declare function facetResultToJSON(facetResult: FacetResult): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FacetValue$ {
    /** @deprecated use `FacetValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FacetValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `FacetValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FacetValue$Outbound, z.ZodTypeDef, FacetValue>;
    /** @deprecated use `FacetValue$Outbound` instead. */
    type Outbound = FacetValue$Outbound;
}

/** @internal */
declare const FacetValue$inboundSchema: z.ZodType<FacetValue, z.ZodTypeDef, unknown>;

/** @internal */
declare type FacetValue$Outbound = {
    stringValue?: string | undefined;
    integerValue?: number | undefined;
    displayLabel?: string | undefined;
    iconConfig?: IconConfig$Outbound | undefined;
};

/** @internal */
declare const FacetValue$outboundSchema: z.ZodType<FacetValue$Outbound, z.ZodTypeDef, FacetValue>;

declare type FacetValue = {
    /**
     * The value that should be set in the FacetFilter when applying this filter to a search request.
     */
    stringValue?: string | undefined;
    integerValue?: number | undefined;
    /**
     * An optional user-friendly label to display in place of the facet value.
     */
    displayLabel?: string | undefined;
    /**
     * Defines how to render an icon
     */
    iconConfig?: IconConfig | undefined;
};

declare function facetValueFromJSON(jsonString: string): Result<FacetValue, SDKValidationError>;

declare function facetValueToJSON(facetValue: FacetValue): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FavoriteInfo$ {
    /** @deprecated use `FavoriteInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FavoriteInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `FavoriteInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FavoriteInfo$Outbound, z.ZodTypeDef, FavoriteInfo>;
    /** @deprecated use `FavoriteInfo$Outbound` instead. */
    type Outbound = FavoriteInfo$Outbound;
}

/** @internal */
declare const FavoriteInfo$inboundSchema: z.ZodType<FavoriteInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type FavoriteInfo$Outbound = {
    ugcType?: string | undefined;
    id?: string | undefined;
    count?: number | undefined;
    favoritedByUser?: boolean | undefined;
};

/** @internal */
declare const FavoriteInfo$outboundSchema: z.ZodType<FavoriteInfo$Outbound, z.ZodTypeDef, FavoriteInfo>;

declare type FavoriteInfo = {
    ugcType?: UgcType | undefined;
    /**
     * Opaque id of the UGC.
     */
    id?: string | undefined;
    /**
     * Number of users this object has been favorited by.
     */
    count?: number | undefined;
    /**
     * If the requesting user has favorited this object.
     */
    favoritedByUser?: boolean | undefined;
};

declare function favoriteInfoFromJSON(jsonString: string): Result<FavoriteInfo, SDKValidationError>;

declare function favoriteInfoToJSON(favoriteInfo: FavoriteInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Feedback$ {
    /** @deprecated use `Feedback$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Feedback, z.ZodTypeDef, unknown>;
    /** @deprecated use `Feedback$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Feedback$Outbound, z.ZodTypeDef, Feedback>;
    /** @deprecated use `Feedback$Outbound` instead. */
    type Outbound = Feedback$Outbound;
}

/** @internal */
declare const Feedback$inboundSchema: z.ZodType<Feedback, z.ZodTypeDef, unknown>;

/** @internal */
declare type Feedback$Outbound = {
    id?: string | undefined;
    category?: string | undefined;
    trackingTokens: Array<string>;
    event: string;
    position?: number | undefined;
    payload?: string | undefined;
    sessionInfo?: SessionInfo$Outbound | undefined;
    timestamp?: string | undefined;
    user?: User$Outbound | undefined;
    pathname?: string | undefined;
    channels?: Array<string> | undefined;
    url?: string | undefined;
    uiTree?: Array<string> | undefined;
    uiElement?: string | undefined;
    manualFeedbackInfo?: ManualFeedbackInfo$Outbound | undefined;
    manualFeedbackSideBySideInfo?: ManualFeedbackSideBySideInfo$Outbound | undefined;
    seenFeedbackInfo?: SeenFeedbackInfo$Outbound | undefined;
    userViewInfo?: UserViewInfo$Outbound | undefined;
    workflowFeedbackInfo?: WorkflowFeedbackInfo$Outbound | undefined;
    applicationId?: string | undefined;
    agentId?: string | undefined;
};

/** @internal */
declare const Feedback$outboundSchema: z.ZodType<Feedback$Outbound, z.ZodTypeDef, Feedback>;

declare type Feedback = {
    /**
     * Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
     */
    id?: string | undefined;
    /**
     * The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.
     */
    category?: FeedbackCategory | undefined;
    /**
     * A list of server-generated trackingTokens to which this event applies.
     */
    trackingTokens: Array<string>;
    /**
     * The action the user took within a Glean client with respect to the object referred to by the given `trackingToken`.
     */
    event: Event_2;
    /**
     * Position of the element in the case that the client controls order (such as feed and autocomplete).
     */
    position?: number | undefined;
    /**
     * For type MANUAL_FEEDBACK, contains string of user feedback. For autocomplete, partial query string. For feed, string of user feedback in addition to manual feedback signals extracted from all suggested content.
     */
    payload?: string | undefined;
    sessionInfo?: SessionInfo | undefined;
    /**
     * The ISO 8601 timestamp when the event occured.
     */
    timestamp?: Date | undefined;
    user?: User | undefined;
    /**
     * The path the client was at when the feedback event triggered.
     */
    pathname?: string | undefined;
    /**
     * Where the feedback will be sent, e.g. to Glean, the user's company, or both. If no channels are specified, feedback will go only to Glean.
     */
    channels?: Array<FeedbackChannel> | undefined;
    /**
     * The URL the client was at when the feedback event triggered.
     */
    url?: string | undefined;
    /**
     * The UI element tree associated with the event, if any.
     */
    uiTree?: Array<string> | undefined;
    /**
     * The UI element associated with the event, if any.
     */
    uiElement?: string | undefined;
    manualFeedbackInfo?: ManualFeedbackInfo | undefined;
    manualFeedbackSideBySideInfo?: ManualFeedbackSideBySideInfo | undefined;
    seenFeedbackInfo?: SeenFeedbackInfo | undefined;
    userViewInfo?: UserViewInfo | undefined;
    workflowFeedbackInfo?: WorkflowFeedbackInfo | undefined;
    /**
     * The application ID of the client that sent the feedback event.
     */
    applicationId?: string | undefined;
    /**
     * The agent ID of the client that sent the feedback event.
     */
    agentId?: string | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FeedbackCategory$ {
    /** @deprecated use `FeedbackCategory$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Announcement: "ANNOUNCEMENT";
        readonly Autocomplete: "AUTOCOMPLETE";
        readonly Collections: "COLLECTIONS";
        readonly Feed: "FEED";
        readonly Search: "SEARCH";
        readonly Chat: "CHAT";
        readonly Ntp: "NTP";
        readonly Workflows: "WORKFLOWS";
        readonly Summary: "SUMMARY";
        readonly General: "GENERAL";
        readonly Prompts: "PROMPTS";
    }>;
    /** @deprecated use `FeedbackCategory$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Announcement: "ANNOUNCEMENT";
        readonly Autocomplete: "AUTOCOMPLETE";
        readonly Collections: "COLLECTIONS";
        readonly Feed: "FEED";
        readonly Search: "SEARCH";
        readonly Chat: "CHAT";
        readonly Ntp: "NTP";
        readonly Workflows: "WORKFLOWS";
        readonly Summary: "SUMMARY";
        readonly General: "GENERAL";
        readonly Prompts: "PROMPTS";
    }>;
}

/** @internal */
declare const FeedbackCategory$inboundSchema: z.ZodNativeEnum<typeof FeedbackCategory>;

/** @internal */
declare const FeedbackCategory$outboundSchema: z.ZodNativeEnum<typeof FeedbackCategory>;

/**
 * The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.
 */
declare const FeedbackCategory: {
    readonly Announcement: "ANNOUNCEMENT";
    readonly Autocomplete: "AUTOCOMPLETE";
    readonly Collections: "COLLECTIONS";
    readonly Feed: "FEED";
    readonly Search: "SEARCH";
    readonly Chat: "CHAT";
    readonly Ntp: "NTP";
    readonly Workflows: "WORKFLOWS";
    readonly Summary: "SUMMARY";
    readonly General: "GENERAL";
    readonly Prompts: "PROMPTS";
};

/**
 * The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.
 */
declare type FeedbackCategory = ClosedEnum<typeof FeedbackCategory>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FeedbackChannel$ {
    /** @deprecated use `FeedbackChannel$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Company: "COMPANY";
        readonly Glean: "GLEAN";
    }>;
    /** @deprecated use `FeedbackChannel$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Company: "COMPANY";
        readonly Glean: "GLEAN";
    }>;
}

/** @internal */
declare const FeedbackChannel$inboundSchema: z.ZodNativeEnum<typeof FeedbackChannel>;

/** @internal */
declare const FeedbackChannel$outboundSchema: z.ZodNativeEnum<typeof FeedbackChannel>;

declare const FeedbackChannel: {
    readonly Company: "COMPANY";
    readonly Glean: "GLEAN";
};

declare type FeedbackChannel = ClosedEnum<typeof FeedbackChannel>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FeedbackChatExchange$ {
    /** @deprecated use `FeedbackChatExchange$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedbackChatExchange, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedbackChatExchange$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedbackChatExchange$Outbound, z.ZodTypeDef, FeedbackChatExchange>;
    /** @deprecated use `FeedbackChatExchange$Outbound` instead. */
    type Outbound = FeedbackChatExchange$Outbound;
}

/** @internal */
declare const FeedbackChatExchange$inboundSchema: z.ZodType<FeedbackChatExchange, z.ZodTypeDef, unknown>;

/** @internal */
declare type FeedbackChatExchange$Outbound = {
    timestamp?: number | undefined;
    agent?: string | undefined;
    userQuery?: string | undefined;
    searchQuery?: string | undefined;
    resultDocuments?: Array<ResultDocument$Outbound> | undefined;
    response?: string | undefined;
};

/** @internal */
declare const FeedbackChatExchange$outboundSchema: z.ZodType<FeedbackChatExchange$Outbound, z.ZodTypeDef, FeedbackChatExchange>;

declare type FeedbackChatExchange = {
    /**
     * Unix timestamp in millis for the chat request.
     */
    timestamp?: number | undefined;
    /**
     * Either DEFAULT (company knowledge) or GPT (world knowledge).
     */
    agent?: string | undefined;
    /**
     * Initial query entered by the user.
     */
    userQuery?: string | undefined;
    /**
     * Search query performed by the agent.
     */
    searchQuery?: string | undefined;
    /**
     * List of documents read by the agent.
     */
    resultDocuments?: Array<ResultDocument> | undefined;
    response?: string | undefined;
};

declare function feedbackChatExchangeFromJSON(jsonString: string): Result<FeedbackChatExchange, SDKValidationError>;

declare function feedbackChatExchangeToJSON(feedbackChatExchange: FeedbackChatExchange): string;

declare function feedbackFromJSON(jsonString: string): Result<Feedback, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FeedbackRequest$ {
    /** @deprecated use `FeedbackRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedbackRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedbackRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedbackRequest$Outbound, z.ZodTypeDef, FeedbackRequest>;
    /** @deprecated use `FeedbackRequest$Outbound` instead. */
    type Outbound = FeedbackRequest$Outbound;
}

/** @internal */
declare const FeedbackRequest$inboundSchema: z.ZodType<FeedbackRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type FeedbackRequest$Outbound = {
    feedbackQueryParameter?: string | undefined;
    Feedback1?: components.Feedback$Outbound | undefined;
};

/** @internal */
declare const FeedbackRequest$outboundSchema: z.ZodType<FeedbackRequest$Outbound, z.ZodTypeDef, FeedbackRequest>;

declare type FeedbackRequest = {
    /**
     * A URL encoded versions of Feedback. This is useful for requests.
     */
    feedbackQueryParameter?: string | undefined;
    feedback1?: components.Feedback | undefined;
};

declare function feedbackRequestFromJSON(jsonString: string): Result<FeedbackRequest, SDKValidationError>;

declare function feedbackRequestToJSON(feedbackRequest: FeedbackRequest): string;

declare function feedbackToJSON(feedback: Feedback): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FeedEntry$ {
    /** @deprecated use `FeedEntry$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedEntry, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedEntry$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedEntry$Outbound, z.ZodTypeDef, FeedEntry>;
    /** @deprecated use `FeedEntry$Outbound` instead. */
    type Outbound = FeedEntry$Outbound;
}

/** @internal */
declare const FeedEntry$inboundSchema: z.ZodType<FeedEntry, z.ZodTypeDef, unknown>;

/** @internal */
declare type FeedEntry$Outbound = {
    entryId?: string | undefined;
    title: string;
    thumbnail?: Thumbnail$Outbound | undefined;
    createdBy?: Person$Outbound | undefined;
    uiConfig?: UiConfig$Outbound | undefined;
    justificationType?: string | undefined;
    justification?: string | undefined;
    trackingToken?: string | undefined;
    viewUrl?: string | undefined;
    document?: Document$Outbound | undefined;
    event?: CalendarEvent$Outbound | undefined;
    announcement?: Announcement$Outbound | undefined;
    digest?: Digest$Outbound | undefined;
    collection?: Collection$Outbound | undefined;
    collectionItem?: CollectionItem$Outbound | undefined;
    person?: Person$Outbound | undefined;
    app?: AppResult$Outbound | undefined;
    chatSuggestion?: ChatSuggestion$Outbound | undefined;
    promptTemplate?: PromptTemplateResult$Outbound | undefined;
    workflow?: WorkflowResult$Outbound | undefined;
    activities?: Array<UserActivity$Outbound> | undefined;
    documentVisitorCount?: CountInfo$Outbound | undefined;
};

/** @internal */
declare const FeedEntry$outboundSchema: z.ZodType<FeedEntry$Outbound, z.ZodTypeDef, FeedEntry>;

declare type FeedEntry = {
    /**
     * optional ID associated with a single feed entry (displayable_list_id)
     */
    entryId?: string | undefined;
    /**
     * Title for the result. Can be document title, event title and so on.
     */
    title: string;
    thumbnail?: Thumbnail | undefined;
    createdBy?: Person | undefined;
    uiConfig?: UiConfig | undefined;
    /**
     * Type of the justification.
     */
    justificationType?: JustificationType | undefined;
    /**
     * Server side generated justification string if server provides one.
     */
    justification?: string | undefined;
    /**
     * An opaque token that represents this particular feed entry in this particular response. To be used for /feedback reporting.
     */
    trackingToken?: string | undefined;
    /**
     * View URL for the entry if based on links that are not documents in Glean.
     */
    viewUrl?: string | undefined;
    document?: Document_2 | undefined;
    event?: CalendarEvent | undefined;
    announcement?: Announcement | undefined;
    digest?: Digest | undefined;
    collection?: Collection | undefined;
    collectionItem?: CollectionItem | undefined;
    person?: Person | undefined;
    app?: AppResult | undefined;
    chatSuggestion?: ChatSuggestion | undefined;
    promptTemplate?: PromptTemplateResult | undefined;
    workflow?: WorkflowResult | undefined;
    /**
     * List of activity where each activity has user, action, timestamp.
     */
    activities?: Array<UserActivity> | undefined;
    documentVisitorCount?: CountInfo | undefined;
};

declare function feedEntryFromJSON(jsonString: string): Result<FeedEntry, SDKValidationError>;

declare function feedEntryToJSON(feedEntry: FeedEntry): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FeedRequest$ {
    /** @deprecated use `FeedRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedRequest$Outbound, z.ZodTypeDef, FeedRequest>;
    /** @deprecated use `FeedRequest$Outbound` instead. */
    type Outbound = FeedRequest$Outbound;
}

/** @internal */
declare const FeedRequest$inboundSchema: z.ZodType<FeedRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type FeedRequest$Outbound = {
    categories?: Array<string> | undefined;
    requestOptions?: FeedRequestOptions$Outbound | undefined;
    timeoutMillis?: number | undefined;
    sessionInfo?: SessionInfo$Outbound | undefined;
};

/** @internal */
declare const FeedRequest$outboundSchema: z.ZodType<FeedRequest$Outbound, z.ZodTypeDef, FeedRequest>;

declare type FeedRequest = {
    /**
     * Categories of content requested. An allowlist gives flexibility to request content separately or together.
     */
    categories?: Array<FeedRequestCategory> | undefined;
    requestOptions?: FeedRequestOptions | undefined;
    /**
     * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
     */
    timeoutMillis?: number | undefined;
    sessionInfo?: SessionInfo | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FeedRequestCategory$ {
    /** @deprecated use `FeedRequestCategory$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly DocumentSuggestion: "DOCUMENT_SUGGESTION";
        readonly DocumentSuggestionScenario: "DOCUMENT_SUGGESTION_SCENARIO";
        readonly TrendingDocument: "TRENDING_DOCUMENT";
        readonly VerificationReminder: "VERIFICATION_REMINDER";
        readonly Event: "EVENT";
        readonly Announcement: "ANNOUNCEMENT";
        readonly Mention: "MENTION";
        readonly DatasourceAffinity: "DATASOURCE_AFFINITY";
        readonly Recent: "RECENT";
        readonly CompanyResource: "COMPANY_RESOURCE";
        readonly Experimental: "EXPERIMENTAL";
        readonly PeopleCelebrations: "PEOPLE_CELEBRATIONS";
        readonly DisplayableList: "DISPLAYABLE_LIST";
        readonly SocialLink: "SOCIAL_LINK";
        readonly ExternalTasks: "EXTERNAL_TASKS";
        readonly WorkflowCollections: "WORKFLOW_COLLECTIONS";
        readonly ZeroStateChatSuggestion: "ZERO_STATE_CHAT_SUGGESTION";
        readonly ZeroStateChatToolSuggestion: "ZERO_STATE_CHAT_TOOL_SUGGESTION";
        readonly ZeroStateWorkflowCreatedByMe: "ZERO_STATE_WORKFLOW_CREATED_BY_ME";
        readonly ZeroStateWorkflowFavorites: "ZERO_STATE_WORKFLOW_FAVORITES";
        readonly ZeroStateWorkflowPopular: "ZERO_STATE_WORKFLOW_POPULAR";
        readonly ZeroStateWorkflowSuggestion: "ZERO_STATE_WORKFLOW_SUGGESTION";
        readonly PersonalizedChatSuggestion: "PERSONALIZED_CHAT_SUGGESTION";
        readonly DailyDigest: "DAILY_DIGEST";
    }>;
    /** @deprecated use `FeedRequestCategory$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly DocumentSuggestion: "DOCUMENT_SUGGESTION";
        readonly DocumentSuggestionScenario: "DOCUMENT_SUGGESTION_SCENARIO";
        readonly TrendingDocument: "TRENDING_DOCUMENT";
        readonly VerificationReminder: "VERIFICATION_REMINDER";
        readonly Event: "EVENT";
        readonly Announcement: "ANNOUNCEMENT";
        readonly Mention: "MENTION";
        readonly DatasourceAffinity: "DATASOURCE_AFFINITY";
        readonly Recent: "RECENT";
        readonly CompanyResource: "COMPANY_RESOURCE";
        readonly Experimental: "EXPERIMENTAL";
        readonly PeopleCelebrations: "PEOPLE_CELEBRATIONS";
        readonly DisplayableList: "DISPLAYABLE_LIST";
        readonly SocialLink: "SOCIAL_LINK";
        readonly ExternalTasks: "EXTERNAL_TASKS";
        readonly WorkflowCollections: "WORKFLOW_COLLECTIONS";
        readonly ZeroStateChatSuggestion: "ZERO_STATE_CHAT_SUGGESTION";
        readonly ZeroStateChatToolSuggestion: "ZERO_STATE_CHAT_TOOL_SUGGESTION";
        readonly ZeroStateWorkflowCreatedByMe: "ZERO_STATE_WORKFLOW_CREATED_BY_ME";
        readonly ZeroStateWorkflowFavorites: "ZERO_STATE_WORKFLOW_FAVORITES";
        readonly ZeroStateWorkflowPopular: "ZERO_STATE_WORKFLOW_POPULAR";
        readonly ZeroStateWorkflowSuggestion: "ZERO_STATE_WORKFLOW_SUGGESTION";
        readonly PersonalizedChatSuggestion: "PERSONALIZED_CHAT_SUGGESTION";
        readonly DailyDigest: "DAILY_DIGEST";
    }>;
}

/** @internal */
declare const FeedRequestCategory$inboundSchema: z.ZodNativeEnum<typeof FeedRequestCategory>;

/** @internal */
declare const FeedRequestCategory$outboundSchema: z.ZodNativeEnum<typeof FeedRequestCategory>;

declare const FeedRequestCategory: {
    readonly DocumentSuggestion: "DOCUMENT_SUGGESTION";
    readonly DocumentSuggestionScenario: "DOCUMENT_SUGGESTION_SCENARIO";
    readonly TrendingDocument: "TRENDING_DOCUMENT";
    readonly VerificationReminder: "VERIFICATION_REMINDER";
    readonly Event: "EVENT";
    readonly Announcement: "ANNOUNCEMENT";
    readonly Mention: "MENTION";
    readonly DatasourceAffinity: "DATASOURCE_AFFINITY";
    readonly Recent: "RECENT";
    readonly CompanyResource: "COMPANY_RESOURCE";
    readonly Experimental: "EXPERIMENTAL";
    readonly PeopleCelebrations: "PEOPLE_CELEBRATIONS";
    readonly DisplayableList: "DISPLAYABLE_LIST";
    readonly SocialLink: "SOCIAL_LINK";
    readonly ExternalTasks: "EXTERNAL_TASKS";
    readonly WorkflowCollections: "WORKFLOW_COLLECTIONS";
    readonly ZeroStateChatSuggestion: "ZERO_STATE_CHAT_SUGGESTION";
    readonly ZeroStateChatToolSuggestion: "ZERO_STATE_CHAT_TOOL_SUGGESTION";
    readonly ZeroStateWorkflowCreatedByMe: "ZERO_STATE_WORKFLOW_CREATED_BY_ME";
    readonly ZeroStateWorkflowFavorites: "ZERO_STATE_WORKFLOW_FAVORITES";
    readonly ZeroStateWorkflowPopular: "ZERO_STATE_WORKFLOW_POPULAR";
    readonly ZeroStateWorkflowSuggestion: "ZERO_STATE_WORKFLOW_SUGGESTION";
    readonly PersonalizedChatSuggestion: "PERSONALIZED_CHAT_SUGGESTION";
    readonly DailyDigest: "DAILY_DIGEST";
};

declare type FeedRequestCategory = ClosedEnum<typeof FeedRequestCategory>;

declare function feedRequestFromJSON(jsonString: string): Result<FeedRequest, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FeedRequestOptions$ {
    /** @deprecated use `FeedRequestOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedRequestOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedRequestOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedRequestOptions$Outbound, z.ZodTypeDef, FeedRequestOptions>;
    /** @deprecated use `FeedRequestOptions$Outbound` instead. */
    type Outbound = FeedRequestOptions$Outbound;
}

/** @internal */
declare const FeedRequestOptions$inboundSchema: z.ZodType<FeedRequestOptions, z.ZodTypeDef, unknown>;

/** @internal */
declare type FeedRequestOptions$Outbound = {
    resultSize: number;
    timezoneOffset?: number | undefined;
    categoryToResultSize?: {
        [k: string]: CategoryToResultSize$Outbound;
    } | undefined;
    datasourceFilter?: Array<string> | undefined;
    chatZeroStateSuggestionOptions?: ChatZeroStateSuggestionOptions$Outbound | undefined;
};

/** @internal */
declare const FeedRequestOptions$outboundSchema: z.ZodType<FeedRequestOptions$Outbound, z.ZodTypeDef, FeedRequestOptions>;

declare type FeedRequestOptions = {
    /**
     * Number of results asked in response. If a result is a collection, counts as one.
     */
    resultSize: number;
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    /**
     * Mapping from category to number of results asked for the category.
     */
    categoryToResultSize?: {
        [k: string]: CategoryToResultSize;
    } | undefined;
    /**
     * Datasources for which content should be included. Empty is for all.
     */
    datasourceFilter?: Array<string> | undefined;
    chatZeroStateSuggestionOptions?: ChatZeroStateSuggestionOptions | undefined;
};

declare function feedRequestOptionsFromJSON(jsonString: string): Result<FeedRequestOptions, SDKValidationError>;

declare function feedRequestOptionsToJSON(feedRequestOptions: FeedRequestOptions): string;

declare function feedRequestToJSON(feedRequest: FeedRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FeedResponse$ {
    /** @deprecated use `FeedResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedResponse$Outbound, z.ZodTypeDef, FeedResponse>;
    /** @deprecated use `FeedResponse$Outbound` instead. */
    type Outbound = FeedResponse$Outbound;
}

/** @internal */
declare const FeedResponse$inboundSchema: z.ZodType<FeedResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type FeedResponse$Outbound = {
    experimentIds?: Array<number> | undefined;
    trackingToken?: string | undefined;
    serverTimestamp: number;
    results?: Array<FeedResult$Outbound> | undefined;
    facetResults?: {
        [k: string]: Array<FacetResult$Outbound>;
    } | undefined;
    mentionsTimeWindowInHours?: number | undefined;
};

/** @internal */
declare const FeedResponse$outboundSchema: z.ZodType<FeedResponse$Outbound, z.ZodTypeDef, FeedResponse>;

declare type FeedResponse = {
    /**
     * List of experiment ids for the corresponding request.
     */
    experimentIds?: Array<number> | undefined;
    /**
     * An opaque token that represents this particular feed response.
     */
    trackingToken?: string | undefined;
    /**
     * Server unix timestamp (in seconds since epoch UTC).
     */
    serverTimestamp: number;
    results?: Array<FeedResult> | undefined;
    /**
     * Map from category to the list of facets that can be used to filter the entry's content.
     */
    facetResults?: {
        [k: string]: Array<FacetResult>;
    } | undefined;
    /**
     * The time window (in hours) used for generating user mentions.
     */
    mentionsTimeWindowInHours?: number | undefined;
};

declare function feedResponseFromJSON(jsonString: string): Result<FeedResponse, SDKValidationError>;

declare function feedResponseToJSON(feedResponse: FeedResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FeedResult$ {
    /** @deprecated use `FeedResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FeedResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `FeedResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FeedResult$Outbound, z.ZodTypeDef, FeedResult>;
    /** @deprecated use `FeedResult$Outbound` instead. */
    type Outbound = FeedResult$Outbound;
}

/** @internal */
declare const FeedResult$inboundSchema: z.ZodType<FeedResult, z.ZodTypeDef, unknown>;

/** @internal */
declare type FeedResult$Outbound = {
    category: string;
    primaryEntry: FeedEntry$Outbound;
    secondaryEntries?: Array<FeedEntry$Outbound> | undefined;
    rank?: number | undefined;
};

/** @internal */
declare const FeedResult$outboundSchema: z.ZodType<FeedResult$Outbound, z.ZodTypeDef, FeedResult>;

declare type FeedResult = {
    /**
     * Category of the result, one of the requested categories in incoming request.
     */
    category: FeedResultCategory;
    primaryEntry: FeedEntry;
    /**
     * Secondary entries for the result e.g. suggested docs for the calendar, carousel.
     */
    secondaryEntries?: Array<FeedEntry> | undefined;
    /**
     * Rank of the result. Rank is suggested by server. Client side rank may differ.
     */
    rank?: number | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FeedResultCategory$ {
    /** @deprecated use `FeedResultCategory$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly DocumentSuggestion: "DOCUMENT_SUGGESTION";
        readonly DocumentSuggestionScenario: "DOCUMENT_SUGGESTION_SCENARIO";
        readonly TrendingDocument: "TRENDING_DOCUMENT";
        readonly UseCase: "USE_CASE";
        readonly VerificationReminder: "VERIFICATION_REMINDER";
        readonly Event: "EVENT";
        readonly Announcement: "ANNOUNCEMENT";
        readonly Mention: "MENTION";
        readonly DatasourceAffinity: "DATASOURCE_AFFINITY";
        readonly Recent: "RECENT";
        readonly CompanyResource: "COMPANY_RESOURCE";
        readonly Experimental: "EXPERIMENTAL";
        readonly PeopleCelebrations: "PEOPLE_CELEBRATIONS";
        readonly SocialLink: "SOCIAL_LINK";
        readonly ExternalTasks: "EXTERNAL_TASKS";
        readonly DisplayableList: "DISPLAYABLE_LIST";
        readonly ZeroStateChatSuggestion: "ZERO_STATE_CHAT_SUGGESTION";
        readonly ZeroStateChatToolSuggestion: "ZERO_STATE_CHAT_TOOL_SUGGESTION";
        readonly ZeroStateWorkflowCreatedByMe: "ZERO_STATE_WORKFLOW_CREATED_BY_ME";
        readonly ZeroStateWorkflowFavorites: "ZERO_STATE_WORKFLOW_FAVORITES";
        readonly ZeroStateWorkflowPopular: "ZERO_STATE_WORKFLOW_POPULAR";
        readonly ZeroStateWorkflowSuggestion: "ZERO_STATE_WORKFLOW_SUGGESTION";
        readonly PersonalizedChatSuggestion: "PERSONALIZED_CHAT_SUGGESTION";
        readonly DailyDigest: "DAILY_DIGEST";
    }>;
    /** @deprecated use `FeedResultCategory$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly DocumentSuggestion: "DOCUMENT_SUGGESTION";
        readonly DocumentSuggestionScenario: "DOCUMENT_SUGGESTION_SCENARIO";
        readonly TrendingDocument: "TRENDING_DOCUMENT";
        readonly UseCase: "USE_CASE";
        readonly VerificationReminder: "VERIFICATION_REMINDER";
        readonly Event: "EVENT";
        readonly Announcement: "ANNOUNCEMENT";
        readonly Mention: "MENTION";
        readonly DatasourceAffinity: "DATASOURCE_AFFINITY";
        readonly Recent: "RECENT";
        readonly CompanyResource: "COMPANY_RESOURCE";
        readonly Experimental: "EXPERIMENTAL";
        readonly PeopleCelebrations: "PEOPLE_CELEBRATIONS";
        readonly SocialLink: "SOCIAL_LINK";
        readonly ExternalTasks: "EXTERNAL_TASKS";
        readonly DisplayableList: "DISPLAYABLE_LIST";
        readonly ZeroStateChatSuggestion: "ZERO_STATE_CHAT_SUGGESTION";
        readonly ZeroStateChatToolSuggestion: "ZERO_STATE_CHAT_TOOL_SUGGESTION";
        readonly ZeroStateWorkflowCreatedByMe: "ZERO_STATE_WORKFLOW_CREATED_BY_ME";
        readonly ZeroStateWorkflowFavorites: "ZERO_STATE_WORKFLOW_FAVORITES";
        readonly ZeroStateWorkflowPopular: "ZERO_STATE_WORKFLOW_POPULAR";
        readonly ZeroStateWorkflowSuggestion: "ZERO_STATE_WORKFLOW_SUGGESTION";
        readonly PersonalizedChatSuggestion: "PERSONALIZED_CHAT_SUGGESTION";
        readonly DailyDigest: "DAILY_DIGEST";
    }>;
}

/** @internal */
declare const FeedResultCategory$inboundSchema: z.ZodNativeEnum<typeof FeedResultCategory>;

/** @internal */
declare const FeedResultCategory$outboundSchema: z.ZodNativeEnum<typeof FeedResultCategory>;

/**
 * Category of the result, one of the requested categories in incoming request.
 */
declare const FeedResultCategory: {
    readonly DocumentSuggestion: "DOCUMENT_SUGGESTION";
    readonly DocumentSuggestionScenario: "DOCUMENT_SUGGESTION_SCENARIO";
    readonly TrendingDocument: "TRENDING_DOCUMENT";
    readonly UseCase: "USE_CASE";
    readonly VerificationReminder: "VERIFICATION_REMINDER";
    readonly Event: "EVENT";
    readonly Announcement: "ANNOUNCEMENT";
    readonly Mention: "MENTION";
    readonly DatasourceAffinity: "DATASOURCE_AFFINITY";
    readonly Recent: "RECENT";
    readonly CompanyResource: "COMPANY_RESOURCE";
    readonly Experimental: "EXPERIMENTAL";
    readonly PeopleCelebrations: "PEOPLE_CELEBRATIONS";
    readonly SocialLink: "SOCIAL_LINK";
    readonly ExternalTasks: "EXTERNAL_TASKS";
    readonly DisplayableList: "DISPLAYABLE_LIST";
    readonly ZeroStateChatSuggestion: "ZERO_STATE_CHAT_SUGGESTION";
    readonly ZeroStateChatToolSuggestion: "ZERO_STATE_CHAT_TOOL_SUGGESTION";
    readonly ZeroStateWorkflowCreatedByMe: "ZERO_STATE_WORKFLOW_CREATED_BY_ME";
    readonly ZeroStateWorkflowFavorites: "ZERO_STATE_WORKFLOW_FAVORITES";
    readonly ZeroStateWorkflowPopular: "ZERO_STATE_WORKFLOW_POPULAR";
    readonly ZeroStateWorkflowSuggestion: "ZERO_STATE_WORKFLOW_SUGGESTION";
    readonly PersonalizedChatSuggestion: "PERSONALIZED_CHAT_SUGGESTION";
    readonly DailyDigest: "DAILY_DIGEST";
};

/**
 * Category of the result, one of the requested categories in incoming request.
 */
declare type FeedResultCategory = ClosedEnum<typeof FeedResultCategory>;

declare function feedResultFromJSON(jsonString: string): Result<FeedResult, SDKValidationError>;

declare function feedResultToJSON(feedResult: FeedResult): string;

export declare type Fetcher = (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>;

declare function fileFromJSON(jsonString: string): Result<FileT, SDKValidationError>;

export declare namespace files {
    export {
        readableStreamToArrayBuffer,
        getContentTypeFromFileName
    }
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FileT$ {
    /** @deprecated use `FileT$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown>;
    /** @deprecated use `FileT$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FileT$Outbound, z.ZodTypeDef, FileT>;
    /** @deprecated use `FileT$Outbound` instead. */
    type Outbound = FileT$Outbound;
}

/** @internal */
declare const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown>;

/** @internal */
declare type FileT$Outbound = {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
declare const FileT$outboundSchema: z.ZodType<FileT$Outbound, z.ZodTypeDef, FileT>;

declare type FileT = {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

declare function fileToJSON(fileT: FileT): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace FollowupAction$ {
    /** @deprecated use `FollowupAction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<FollowupAction, z.ZodTypeDef, unknown>;
    /** @deprecated use `FollowupAction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<FollowupAction$Outbound, z.ZodTypeDef, FollowupAction>;
    /** @deprecated use `FollowupAction$Outbound` instead. */
    type Outbound = FollowupAction$Outbound;
}

/** @internal */
declare const FollowupAction$inboundSchema: z.ZodType<FollowupAction, z.ZodTypeDef, unknown>;

/** @internal */
declare type FollowupAction$Outbound = {
    actionRunId?: string | undefined;
    actionInstanceId?: string | undefined;
    actionId?: string | undefined;
    parameters?: {
        [k: string]: string;
    } | undefined;
    recommendationText?: string | undefined;
    actionLabel?: string | undefined;
    userConfirmationRequired?: boolean | undefined;
};

/** @internal */
declare const FollowupAction$outboundSchema: z.ZodType<FollowupAction$Outbound, z.ZodTypeDef, FollowupAction>;

/**
 * A follow-up action that can be invoked by the user after a response. The action parameters are not included and need to be predicted/filled separately.
 */
declare type FollowupAction = {
    /**
     * Unique identifier for this actionRun recommendation event.
     */
    actionRunId?: string | undefined;
    /**
     * The ID of the action instance that will be invoked.
     */
    actionInstanceId?: string | undefined;
    /**
     * The ID of the associated action.
     */
    actionId?: string | undefined;
    /**
     * Map of assistant predicted parameters and their corresponding values.
     */
    parameters?: {
        [k: string]: string;
    } | undefined;
    /**
     * Text to be displayed to the user when recommending the action instance.
     */
    recommendationText?: string | undefined;
    /**
     * The label to be used when displaying a button to execute this action instance.
     */
    actionLabel?: string | undefined;
    /**
     * Whether user confirmation is needed before executing this action instance.
     */
    userConfirmationRequired?: boolean | undefined;
};

declare function followupActionFromJSON(jsonString: string): Result<FollowupAction, SDKValidationError>;

declare function followupActionToJSON(followupAction: FollowupAction): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Format$ {
    /** @deprecated use `Format$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly List: "LIST";
    }>;
    /** @deprecated use `Format$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly List: "LIST";
    }>;
}

/** @internal */
declare const Format$inboundSchema: z.ZodNativeEnum<typeof Format>;

/** @internal */
declare const Format$outboundSchema: z.ZodNativeEnum<typeof Format>;

/**
 * defines how to render this particular displayable list card
 */
declare const Format: {
    readonly List: "LIST";
};

/**
 * defines how to render this particular displayable list card
 */
declare type Format = ClosedEnum<typeof Format>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GeneratedAttachment$ {
    /** @deprecated use `GeneratedAttachment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GeneratedAttachment, z.ZodTypeDef, unknown>;
    /** @deprecated use `GeneratedAttachment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GeneratedAttachment$Outbound, z.ZodTypeDef, GeneratedAttachment>;
    /** @deprecated use `GeneratedAttachment$Outbound` instead. */
    type Outbound = GeneratedAttachment$Outbound;
}

/** @internal */
declare const GeneratedAttachment$inboundSchema: z.ZodType<GeneratedAttachment, z.ZodTypeDef, unknown>;

/** @internal */
declare type GeneratedAttachment$Outbound = {
    strategyName?: string | undefined;
    documents?: Array<Document$Outbound> | undefined;
    person?: Person$Outbound | undefined;
    customer?: Customer$Outbound | undefined;
    externalLinks?: Array<StructuredLink$Outbound> | undefined;
    content?: Array<GeneratedAttachmentContent$Outbound> | undefined;
};

/** @internal */
declare const GeneratedAttachment$outboundSchema: z.ZodType<GeneratedAttachment$Outbound, z.ZodTypeDef, GeneratedAttachment>;

/**
 * These are attachments that aren't natively present on the event, and have been smartly suggested.
 */
declare type GeneratedAttachment = {
    /**
     * The name of method used to surface relevant data for a given calendar event.
     */
    strategyName?: EventStrategyName | undefined;
    documents?: Array<Document_2> | undefined;
    person?: Person | undefined;
    customer?: Customer | undefined;
    /**
     * A list of links to external sources outside of Glean.
     */
    externalLinks?: Array<StructuredLink> | undefined;
    content?: Array<GeneratedAttachmentContent> | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GeneratedAttachmentContent$ {
    /** @deprecated use `GeneratedAttachmentContent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GeneratedAttachmentContent, z.ZodTypeDef, unknown>;
    /** @deprecated use `GeneratedAttachmentContent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GeneratedAttachmentContent$Outbound, z.ZodTypeDef, GeneratedAttachmentContent>;
    /** @deprecated use `GeneratedAttachmentContent$Outbound` instead. */
    type Outbound = GeneratedAttachmentContent$Outbound;
}

/** @internal */
declare const GeneratedAttachmentContent$inboundSchema: z.ZodType<GeneratedAttachmentContent, z.ZodTypeDef, unknown>;

/** @internal */
declare type GeneratedAttachmentContent$Outbound = {
    displayHeader?: string | undefined;
    text?: string | undefined;
};

/** @internal */
declare const GeneratedAttachmentContent$outboundSchema: z.ZodType<GeneratedAttachmentContent$Outbound, z.ZodTypeDef, GeneratedAttachmentContent>;

/**
 * Content that has been generated or extrapolated from the documents present in the document field.
 */
declare type GeneratedAttachmentContent = {
    /**
     * The header describing the generated content.
     */
    displayHeader?: string | undefined;
    /**
     * The content that has been generated.
     */
    text?: string | undefined;
};

declare function generatedAttachmentContentFromJSON(jsonString: string): Result<GeneratedAttachmentContent, SDKValidationError>;

declare function generatedAttachmentContentToJSON(generatedAttachmentContent: GeneratedAttachmentContent): string;

declare function generatedAttachmentFromJSON(jsonString: string): Result<GeneratedAttachment, SDKValidationError>;

declare function generatedAttachmentToJSON(generatedAttachment: GeneratedAttachment): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GeneratedQna$ {
    /** @deprecated use `GeneratedQna$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GeneratedQna, z.ZodTypeDef, unknown>;
    /** @deprecated use `GeneratedQna$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GeneratedQna$Outbound, z.ZodTypeDef, GeneratedQna>;
    /** @deprecated use `GeneratedQna$Outbound` instead. */
    type Outbound = GeneratedQna$Outbound;
}

/** @internal */
declare const GeneratedQna$inboundSchema: z.ZodType<GeneratedQna, z.ZodTypeDef, unknown>;

/** @internal */
declare type GeneratedQna$Outbound = {
    question?: string | undefined;
    answer?: string | undefined;
    followUpPrompts?: Array<string> | undefined;
    followupActions?: Array<FollowupAction$Outbound> | undefined;
    ranges?: Array<TextRange$Outbound> | undefined;
    status?: string | undefined;
    cursor?: string | undefined;
    trackingToken?: string | undefined;
};

/** @internal */
declare const GeneratedQna$outboundSchema: z.ZodType<GeneratedQna$Outbound, z.ZodTypeDef, GeneratedQna>;

declare type GeneratedQna = {
    /**
     * Search query rephrased into a question.
     */
    question?: string | undefined;
    /**
     * Answer generated for the given query or the generated question.
     */
    answer?: string | undefined;
    /**
     * List of all follow-up prompts generated for the given query or the generated question.
     */
    followUpPrompts?: Array<string> | undefined;
    /**
     * List of follow-up actions generated for the given query or the generated question.
     */
    followupActions?: Array<FollowupAction> | undefined;
    /**
     * Answer subsections to mark with special formatting (citations, bolding etc)
     */
    ranges?: Array<TextRange> | undefined;
    /**
     * Status of backend generating the answer
     */
    status?: GeneratedQnaStatus | undefined;
    /**
     * An opaque cursor representing the search request
     */
    cursor?: string | undefined;
    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    trackingToken?: string | undefined;
};

declare function generatedQnaFromJSON(jsonString: string): Result<GeneratedQna, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GeneratedQnaStatus$ {
    /** @deprecated use `GeneratedQnaStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Computing: "COMPUTING";
        readonly Disabled: "DISABLED";
        readonly Failed: "FAILED";
        readonly NoAnswer: "NO_ANSWER";
        readonly Skipped: "SKIPPED";
        readonly Streaming: "STREAMING";
        readonly Succeeded: "SUCCEEDED";
        readonly Timeout: "TIMEOUT";
    }>;
    /** @deprecated use `GeneratedQnaStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Computing: "COMPUTING";
        readonly Disabled: "DISABLED";
        readonly Failed: "FAILED";
        readonly NoAnswer: "NO_ANSWER";
        readonly Skipped: "SKIPPED";
        readonly Streaming: "STREAMING";
        readonly Succeeded: "SUCCEEDED";
        readonly Timeout: "TIMEOUT";
    }>;
}

/** @internal */
declare const GeneratedQnaStatus$inboundSchema: z.ZodNativeEnum<typeof GeneratedQnaStatus>;

/** @internal */
declare const GeneratedQnaStatus$outboundSchema: z.ZodNativeEnum<typeof GeneratedQnaStatus>;

/**
 * Status of backend generating the answer
 */
declare const GeneratedQnaStatus: {
    readonly Computing: "COMPUTING";
    readonly Disabled: "DISABLED";
    readonly Failed: "FAILED";
    readonly NoAnswer: "NO_ANSWER";
    readonly Skipped: "SKIPPED";
    readonly Streaming: "STREAMING";
    readonly Succeeded: "SUCCEEDED";
    readonly Timeout: "TIMEOUT";
};

/**
 * Status of backend generating the answer
 */
declare type GeneratedQnaStatus = ClosedEnum<typeof GeneratedQnaStatus>;

declare function generatedQnaToJSON(generatedQna: GeneratedQna): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetAgentRequest$ {
    /** @deprecated use `GetAgentRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAgentRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAgentRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAgentRequest$Outbound, z.ZodTypeDef, GetAgentRequest>;
    /** @deprecated use `GetAgentRequest$Outbound` instead. */
    type Outbound = GetAgentRequest$Outbound;
}

/** @internal */
declare const GetAgentRequest$inboundSchema: z.ZodType<GetAgentRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetAgentRequest$Outbound = {
    timezoneOffset?: number | undefined;
    agent_id: string;
};

/** @internal */
declare const GetAgentRequest$outboundSchema: z.ZodType<GetAgentRequest$Outbound, z.ZodTypeDef, GetAgentRequest>;

declare type GetAgentRequest = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    /**
     * The ID of the agent.
     */
    agentId: string;
};

declare function getAgentRequestFromJSON(jsonString: string): Result<GetAgentRequest, SDKValidationError>;

declare function getAgentRequestToJSON(getAgentRequest: GetAgentRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetAgentSchemasRequest$ {
    /** @deprecated use `GetAgentSchemasRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAgentSchemasRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAgentSchemasRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAgentSchemasRequest$Outbound, z.ZodTypeDef, GetAgentSchemasRequest>;
    /** @deprecated use `GetAgentSchemasRequest$Outbound` instead. */
    type Outbound = GetAgentSchemasRequest$Outbound;
}

/** @internal */
declare const GetAgentSchemasRequest$inboundSchema: z.ZodType<GetAgentSchemasRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetAgentSchemasRequest$Outbound = {
    timezoneOffset?: number | undefined;
    agent_id: string;
};

/** @internal */
declare const GetAgentSchemasRequest$outboundSchema: z.ZodType<GetAgentSchemasRequest$Outbound, z.ZodTypeDef, GetAgentSchemasRequest>;

declare type GetAgentSchemasRequest = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    /**
     * The ID of the agent.
     */
    agentId: string;
};

declare function getAgentSchemasRequestFromJSON(jsonString: string): Result<GetAgentSchemasRequest, SDKValidationError>;

declare function getAgentSchemasRequestToJSON(getAgentSchemasRequest: GetAgentSchemasRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetAnswerError$ {
    /** @deprecated use `GetAnswerError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAnswerError, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAnswerError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAnswerError$Outbound, z.ZodTypeDef, GetAnswerError>;
    /** @deprecated use `GetAnswerError$Outbound` instead. */
    type Outbound = GetAnswerError$Outbound;
}

/** @internal */
declare const GetAnswerError$inboundSchema: z.ZodType<GetAnswerError, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetAnswerError$Outbound = {
    errorType?: string | undefined;
    answerAuthor?: Person$Outbound | undefined;
};

/** @internal */
declare const GetAnswerError$outboundSchema: z.ZodType<GetAnswerError$Outbound, z.ZodTypeDef, GetAnswerError>;

declare type GetAnswerError = {
    errorType?: GetAnswerErrorErrorType | undefined;
    answerAuthor?: Person | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetAnswerErrorErrorType$ {
    /** @deprecated use `GetAnswerErrorErrorType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly NoPermission: "NO_PERMISSION";
        readonly InvalidId: "INVALID_ID";
    }>;
    /** @deprecated use `GetAnswerErrorErrorType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly NoPermission: "NO_PERMISSION";
        readonly InvalidId: "INVALID_ID";
    }>;
}

/** @internal */
declare const GetAnswerErrorErrorType$inboundSchema: z.ZodNativeEnum<typeof GetAnswerErrorErrorType>;

/** @internal */
declare const GetAnswerErrorErrorType$outboundSchema: z.ZodNativeEnum<typeof GetAnswerErrorErrorType>;

declare const GetAnswerErrorErrorType: {
    readonly NoPermission: "NO_PERMISSION";
    readonly InvalidId: "INVALID_ID";
};

declare type GetAnswerErrorErrorType = ClosedEnum<typeof GetAnswerErrorErrorType>;

declare function getAnswerErrorFromJSON(jsonString: string): Result<GetAnswerError, SDKValidationError>;

declare function getAnswerErrorToJSON(getAnswerError: GetAnswerError): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetAnswerRequest$ {
    /** @deprecated use `GetAnswerRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAnswerRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAnswerRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAnswerRequest$Outbound, z.ZodTypeDef, GetAnswerRequest>;
    /** @deprecated use `GetAnswerRequest$Outbound` instead. */
    type Outbound = GetAnswerRequest$Outbound;
}

/** @internal */
declare const GetAnswerRequest$inboundSchema: z.ZodType<GetAnswerRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetAnswerRequest$Outbound = {
    id?: number | undefined;
    docId?: string | undefined;
};

/** @internal */
declare const GetAnswerRequest$outboundSchema: z.ZodType<GetAnswerRequest$Outbound, z.ZodTypeDef, GetAnswerRequest>;

declare type GetAnswerRequest = {
    /**
     * The opaque ID of the Answer.
     */
    id?: number | undefined;
    /**
     * Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
     */
    docId?: string | undefined;
};

declare function getAnswerRequestFromJSON(jsonString: string): Result<GetAnswerRequest, SDKValidationError>;

declare function getAnswerRequestToJSON(getAnswerRequest: GetAnswerRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetAnswerResponse$ {
    /** @deprecated use `GetAnswerResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetAnswerResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetAnswerResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetAnswerResponse$Outbound, z.ZodTypeDef, GetAnswerResponse>;
    /** @deprecated use `GetAnswerResponse$Outbound` instead. */
    type Outbound = GetAnswerResponse$Outbound;
}

/** @internal */
declare const GetAnswerResponse$inboundSchema: z.ZodType<GetAnswerResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetAnswerResponse$Outbound = {
    answerResult?: AnswerResult$Outbound | undefined;
    error?: GetAnswerError$Outbound | undefined;
};

/** @internal */
declare const GetAnswerResponse$outboundSchema: z.ZodType<GetAnswerResponse$Outbound, z.ZodTypeDef, GetAnswerResponse>;

declare type GetAnswerResponse = {
    answerResult?: AnswerResult | undefined;
    error?: GetAnswerError | undefined;
};

declare function getAnswerResponseFromJSON(jsonString: string): Result<GetAnswerResponse, SDKValidationError>;

declare function getAnswerResponseToJSON(getAnswerResponse: GetAnswerResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetChatApplicationRequest$ {
    /** @deprecated use `GetChatApplicationRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetChatApplicationRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetChatApplicationRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetChatApplicationRequest$Outbound, z.ZodTypeDef, GetChatApplicationRequest>;
    /** @deprecated use `GetChatApplicationRequest$Outbound` instead. */
    type Outbound = GetChatApplicationRequest$Outbound;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetchatapplicationRequest$ {
    /** @deprecated use `GetchatapplicationRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetchatapplicationRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetchatapplicationRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetchatapplicationRequest$Outbound, z.ZodTypeDef, GetchatapplicationRequest>;
    /** @deprecated use `GetchatapplicationRequest$Outbound` instead. */
    type Outbound = GetchatapplicationRequest$Outbound;
}

/** @internal */
declare const GetChatApplicationRequest$inboundSchema: z.ZodType<GetChatApplicationRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare const GetchatapplicationRequest$inboundSchema: z.ZodType<GetchatapplicationRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetChatApplicationRequest$Outbound = {
    id: string;
};

/** @internal */
declare type GetchatapplicationRequest$Outbound = {
    timezoneOffset?: number | undefined;
    GetChatApplicationRequest: components.GetChatApplicationRequest$Outbound;
};

/** @internal */
declare const GetChatApplicationRequest$outboundSchema: z.ZodType<GetChatApplicationRequest$Outbound, z.ZodTypeDef, GetChatApplicationRequest>;

/** @internal */
declare const GetchatapplicationRequest$outboundSchema: z.ZodType<GetchatapplicationRequest$Outbound, z.ZodTypeDef, GetchatapplicationRequest>;

declare type GetChatApplicationRequest = {
    /**
     * The id of the Chat application to be retrieved.
     */
    id: string;
};

declare type GetchatapplicationRequest = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    getChatApplicationRequest: components.GetChatApplicationRequest;
};

declare function getChatApplicationRequestFromJSON(jsonString: string): Result<GetChatApplicationRequest, SDKValidationError>;

declare function getchatapplicationRequestFromJSON(jsonString: string): Result<GetchatapplicationRequest, SDKValidationError>;

declare function getChatApplicationRequestToJSON(getChatApplicationRequest: GetChatApplicationRequest): string;

declare function getchatapplicationRequestToJSON(getchatapplicationRequest: GetchatapplicationRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetChatApplicationResponse$ {
    /** @deprecated use `GetChatApplicationResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetChatApplicationResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetChatApplicationResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetChatApplicationResponse$Outbound, z.ZodTypeDef, GetChatApplicationResponse>;
    /** @deprecated use `GetChatApplicationResponse$Outbound` instead. */
    type Outbound = GetChatApplicationResponse$Outbound;
}

/** @internal */
declare const GetChatApplicationResponse$inboundSchema: z.ZodType<GetChatApplicationResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetChatApplicationResponse$Outbound = {
    application?: any | undefined;
};

/** @internal */
declare const GetChatApplicationResponse$outboundSchema: z.ZodType<GetChatApplicationResponse$Outbound, z.ZodTypeDef, GetChatApplicationResponse>;

declare type GetChatApplicationResponse = {
    application?: any | undefined;
};

declare function getChatApplicationResponseFromJSON(jsonString: string): Result<GetChatApplicationResponse, SDKValidationError>;

declare function getChatApplicationResponseToJSON(getChatApplicationResponse: GetChatApplicationResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetChatFilesRequest$ {
    /** @deprecated use `GetChatFilesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetChatFilesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetChatFilesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetChatFilesRequest$Outbound, z.ZodTypeDef, GetChatFilesRequest>;
    /** @deprecated use `GetChatFilesRequest$Outbound` instead. */
    type Outbound = GetChatFilesRequest$Outbound;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetchatfilesRequest$ {
    /** @deprecated use `GetchatfilesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetchatfilesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetchatfilesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetchatfilesRequest$Outbound, z.ZodTypeDef, GetchatfilesRequest>;
    /** @deprecated use `GetchatfilesRequest$Outbound` instead. */
    type Outbound = GetchatfilesRequest$Outbound;
}

/** @internal */
declare const GetChatFilesRequest$inboundSchema: z.ZodType<GetChatFilesRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare const GetchatfilesRequest$inboundSchema: z.ZodType<GetchatfilesRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetChatFilesRequest$Outbound = {
    fileIds: Array<string>;
    chatId?: string | undefined;
};

/** @internal */
declare type GetchatfilesRequest$Outbound = {
    timezoneOffset?: number | undefined;
    GetChatFilesRequest: components.GetChatFilesRequest$Outbound;
};

/** @internal */
declare const GetChatFilesRequest$outboundSchema: z.ZodType<GetChatFilesRequest$Outbound, z.ZodTypeDef, GetChatFilesRequest>;

/** @internal */
declare const GetchatfilesRequest$outboundSchema: z.ZodType<GetchatfilesRequest$Outbound, z.ZodTypeDef, GetchatfilesRequest>;

declare type GetChatFilesRequest = {
    /**
     * IDs of files to fetch.
     */
    fileIds: Array<string>;
    /**
     * The ID of the chat that contains the chat file.
     */
    chatId?: string | undefined;
};

declare type GetchatfilesRequest = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    getChatFilesRequest: components.GetChatFilesRequest;
};

declare function getChatFilesRequestFromJSON(jsonString: string): Result<GetChatFilesRequest, SDKValidationError>;

declare function getchatfilesRequestFromJSON(jsonString: string): Result<GetchatfilesRequest, SDKValidationError>;

declare function getChatFilesRequestToJSON(getChatFilesRequest: GetChatFilesRequest): string;

declare function getchatfilesRequestToJSON(getchatfilesRequest: GetchatfilesRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetChatFilesResponse$ {
    /** @deprecated use `GetChatFilesResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetChatFilesResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetChatFilesResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetChatFilesResponse$Outbound, z.ZodTypeDef, GetChatFilesResponse>;
    /** @deprecated use `GetChatFilesResponse$Outbound` instead. */
    type Outbound = GetChatFilesResponse$Outbound;
}

/** @internal */
declare const GetChatFilesResponse$inboundSchema: z.ZodType<GetChatFilesResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetChatFilesResponse$Outbound = {
    files?: {
        [k: string]: ChatFile$Outbound;
    } | undefined;
};

/** @internal */
declare const GetChatFilesResponse$outboundSchema: z.ZodType<GetChatFilesResponse$Outbound, z.ZodTypeDef, GetChatFilesResponse>;

declare type GetChatFilesResponse = {
    /**
     * A map of file IDs to ChatFile structs.
     */
    files?: {
        [k: string]: ChatFile;
    } | undefined;
};

declare function getChatFilesResponseFromJSON(jsonString: string): Result<GetChatFilesResponse, SDKValidationError>;

declare function getChatFilesResponseToJSON(getChatFilesResponse: GetChatFilesResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetChatRequest$ {
    /** @deprecated use `GetChatRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetChatRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetChatRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetChatRequest$Outbound, z.ZodTypeDef, GetChatRequest>;
    /** @deprecated use `GetChatRequest$Outbound` instead. */
    type Outbound = GetChatRequest$Outbound;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetchatRequest$ {
    /** @deprecated use `GetchatRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetchatRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetchatRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetchatRequest$Outbound, z.ZodTypeDef, GetchatRequest>;
    /** @deprecated use `GetchatRequest$Outbound` instead. */
    type Outbound = GetchatRequest$Outbound;
}

/** @internal */
declare const GetChatRequest$inboundSchema: z.ZodType<GetChatRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare const GetchatRequest$inboundSchema: z.ZodType<GetchatRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetChatRequest$Outbound = {
    id: string;
};

/** @internal */
declare type GetchatRequest$Outbound = {
    timezoneOffset?: number | undefined;
    GetChatRequest: components.GetChatRequest$Outbound;
};

/** @internal */
declare const GetChatRequest$outboundSchema: z.ZodType<GetChatRequest$Outbound, z.ZodTypeDef, GetChatRequest>;

/** @internal */
declare const GetchatRequest$outboundSchema: z.ZodType<GetchatRequest$Outbound, z.ZodTypeDef, GetchatRequest>;

declare type GetChatRequest = {
    /**
     * The id of the Chat to be retrieved.
     */
    id: string;
};

declare type GetchatRequest = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    getChatRequest: components.GetChatRequest;
};

declare function getChatRequestFromJSON(jsonString: string): Result<GetChatRequest, SDKValidationError>;

declare function getchatRequestFromJSON(jsonString: string): Result<GetchatRequest, SDKValidationError>;

declare function getChatRequestToJSON(getChatRequest: GetChatRequest): string;

declare function getchatRequestToJSON(getchatRequest: GetchatRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetChatResponse$ {
    /** @deprecated use `GetChatResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetChatResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetChatResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetChatResponse$Outbound, z.ZodTypeDef, GetChatResponse>;
    /** @deprecated use `GetChatResponse$Outbound` instead. */
    type Outbound = GetChatResponse$Outbound;
}

/** @internal */
declare const GetChatResponse$inboundSchema: z.ZodType<GetChatResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetChatResponse$Outbound = {
    chatResult?: ChatResult$Outbound | undefined;
};

/** @internal */
declare const GetChatResponse$outboundSchema: z.ZodType<GetChatResponse$Outbound, z.ZodTypeDef, GetChatResponse>;

declare type GetChatResponse = {
    chatResult?: ChatResult | undefined;
};

declare function getChatResponseFromJSON(jsonString: string): Result<GetChatResponse, SDKValidationError>;

declare function getChatResponseToJSON(getChatResponse: GetChatResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetCollectionRequest$ {
    /** @deprecated use `GetCollectionRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCollectionRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCollectionRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCollectionRequest$Outbound, z.ZodTypeDef, GetCollectionRequest>;
    /** @deprecated use `GetCollectionRequest$Outbound` instead. */
    type Outbound = GetCollectionRequest$Outbound;
}

/** @internal */
declare const GetCollectionRequest$inboundSchema: z.ZodType<GetCollectionRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetCollectionRequest$Outbound = {
    id: number;
    withItems?: boolean | undefined;
    withHierarchy?: boolean | undefined;
    allowedDatasource?: string | undefined;
};

/** @internal */
declare const GetCollectionRequest$outboundSchema: z.ZodType<GetCollectionRequest$Outbound, z.ZodTypeDef, GetCollectionRequest>;

declare type GetCollectionRequest = {
    /**
     * The ID of the Collection to be retrieved.
     */
    id: number;
    /**
     * Whether or not to include the Collection Items in this Collection. Only request if absolutely required, as this is expensive.
     */
    withItems?: boolean | undefined;
    /**
     * Whether or not to include the top level Collection in this Collection's hierarchy.
     */
    withHierarchy?: boolean | undefined;
    /**
     * The datasource allowed in the Collection returned.
     */
    allowedDatasource?: string | undefined;
};

declare function getCollectionRequestFromJSON(jsonString: string): Result<GetCollectionRequest, SDKValidationError>;

declare function getCollectionRequestToJSON(getCollectionRequest: GetCollectionRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetCollectionResponse$ {
    /** @deprecated use `GetCollectionResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCollectionResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCollectionResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCollectionResponse$Outbound, z.ZodTypeDef, GetCollectionResponse>;
    /** @deprecated use `GetCollectionResponse$Outbound` instead. */
    type Outbound = GetCollectionResponse$Outbound;
}

/** @internal */
declare const GetCollectionResponse$inboundSchema: z.ZodType<GetCollectionResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetCollectionResponse$Outbound = {
    collection?: Collection$Outbound | undefined;
    rootCollection?: Collection$Outbound | undefined;
    trackingToken?: string | undefined;
    error?: CollectionError$Outbound | undefined;
};

/** @internal */
declare const GetCollectionResponse$outboundSchema: z.ZodType<GetCollectionResponse$Outbound, z.ZodTypeDef, GetCollectionResponse>;

declare type GetCollectionResponse = {
    collection?: Collection | undefined;
    rootCollection?: Collection | undefined;
    /**
     * An opaque token that represents this particular Collection. To be used for `/feedback` reporting.
     */
    trackingToken?: string | undefined;
    error?: CollectionError | undefined;
};

declare function getCollectionResponseFromJSON(jsonString: string): Result<GetCollectionResponse, SDKValidationError>;

declare function getCollectionResponseToJSON(getCollectionResponse: GetCollectionResponse): string;

/**
 * Determines the MIME content type based on a file's extension.
 * Returns null if the extension is not recognized.
 */
declare function getContentTypeFromFileName(fileName: string): string | null;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDatasourceConfigRequest$ {
    /** @deprecated use `GetDatasourceConfigRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDatasourceConfigRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDatasourceConfigRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDatasourceConfigRequest$Outbound, z.ZodTypeDef, GetDatasourceConfigRequest>;
    /** @deprecated use `GetDatasourceConfigRequest$Outbound` instead. */
    type Outbound = GetDatasourceConfigRequest$Outbound;
}

/** @internal */
declare const GetDatasourceConfigRequest$inboundSchema: z.ZodType<GetDatasourceConfigRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDatasourceConfigRequest$Outbound = {
    datasource: string;
};

/** @internal */
declare const GetDatasourceConfigRequest$outboundSchema: z.ZodType<GetDatasourceConfigRequest$Outbound, z.ZodTypeDef, GetDatasourceConfigRequest>;

/**
 * Describes the request body of the /getdatasourceconfig API call
 */
declare type GetDatasourceConfigRequest = {
    /**
     * Datasource name for which config is needed.
     */
    datasource: string;
};

declare function getDatasourceConfigRequestFromJSON(jsonString: string): Result<GetDatasourceConfigRequest, SDKValidationError>;

declare function getDatasourceConfigRequestToJSON(getDatasourceConfigRequest: GetDatasourceConfigRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDlpReportResponse$ {
    /** @deprecated use `GetDlpReportResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDlpReportResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDlpReportResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDlpReportResponse$Outbound, z.ZodTypeDef, GetDlpReportResponse>;
    /** @deprecated use `GetDlpReportResponse$Outbound` instead. */
    type Outbound = GetDlpReportResponse$Outbound;
}

/** @internal */
declare const GetDlpReportResponse$inboundSchema: z.ZodType<GetDlpReportResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDlpReportResponse$Outbound = {
    report?: DlpReport$Outbound | undefined;
};

/** @internal */
declare const GetDlpReportResponse$outboundSchema: z.ZodType<GetDlpReportResponse$Outbound, z.ZodTypeDef, GetDlpReportResponse>;

declare type GetDlpReportResponse = {
    /**
     * Full policy information that will be used for scans.
     */
    report?: DlpReport | undefined;
};

declare function getDlpReportResponseFromJSON(jsonString: string): Result<GetDlpReportResponse, SDKValidationError>;

declare function getDlpReportResponseToJSON(getDlpReportResponse: GetDlpReportResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDocPermissionsRequest$ {
    /** @deprecated use `GetDocPermissionsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDocPermissionsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDocPermissionsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDocPermissionsRequest$Outbound, z.ZodTypeDef, GetDocPermissionsRequest>;
    /** @deprecated use `GetDocPermissionsRequest$Outbound` instead. */
    type Outbound = GetDocPermissionsRequest$Outbound;
}

/** @internal */
declare const GetDocPermissionsRequest$inboundSchema: z.ZodType<GetDocPermissionsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDocPermissionsRequest$Outbound = {
    documentId?: string | undefined;
};

/** @internal */
declare const GetDocPermissionsRequest$outboundSchema: z.ZodType<GetDocPermissionsRequest$Outbound, z.ZodTypeDef, GetDocPermissionsRequest>;

declare type GetDocPermissionsRequest = {
    /**
     * The Glean Document ID to retrieve permissions for.
     */
    documentId?: string | undefined;
};

declare function getDocPermissionsRequestFromJSON(jsonString: string): Result<GetDocPermissionsRequest, SDKValidationError>;

declare function getDocPermissionsRequestToJSON(getDocPermissionsRequest: GetDocPermissionsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDocPermissionsResponse$ {
    /** @deprecated use `GetDocPermissionsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDocPermissionsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDocPermissionsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDocPermissionsResponse$Outbound, z.ZodTypeDef, GetDocPermissionsResponse>;
    /** @deprecated use `GetDocPermissionsResponse$Outbound` instead. */
    type Outbound = GetDocPermissionsResponse$Outbound;
}

/** @internal */
declare const GetDocPermissionsResponse$inboundSchema: z.ZodType<GetDocPermissionsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDocPermissionsResponse$Outbound = {
    allowedUserEmails?: Array<string> | undefined;
};

/** @internal */
declare const GetDocPermissionsResponse$outboundSchema: z.ZodType<GetDocPermissionsResponse$Outbound, z.ZodTypeDef, GetDocPermissionsResponse>;

declare type GetDocPermissionsResponse = {
    /**
     * A list of emails of users who have access to the document. If the document is visible to all Glean users, a list with only a single value of 'VISIBLE_TO_ALL'.
     */
    allowedUserEmails?: Array<string> | undefined;
};

declare function getDocPermissionsResponseFromJSON(jsonString: string): Result<GetDocPermissionsResponse, SDKValidationError>;

declare function getDocPermissionsResponseToJSON(getDocPermissionsResponse: GetDocPermissionsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDocumentCountRequest$ {
    /** @deprecated use `GetDocumentCountRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDocumentCountRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDocumentCountRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDocumentCountRequest$Outbound, z.ZodTypeDef, GetDocumentCountRequest>;
    /** @deprecated use `GetDocumentCountRequest$Outbound` instead. */
    type Outbound = GetDocumentCountRequest$Outbound;
}

/** @internal */
declare const GetDocumentCountRequest$inboundSchema: z.ZodType<GetDocumentCountRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDocumentCountRequest$Outbound = {
    datasource: string;
};

/** @internal */
declare const GetDocumentCountRequest$outboundSchema: z.ZodType<GetDocumentCountRequest$Outbound, z.ZodTypeDef, GetDocumentCountRequest>;

/**
 * Describes the request body of the /getdocumentcount API call
 */
declare type GetDocumentCountRequest = {
    /**
     * Datasource name for which document count is needed.
     */
    datasource: string;
};

declare function getDocumentCountRequestFromJSON(jsonString: string): Result<GetDocumentCountRequest, SDKValidationError>;

declare function getDocumentCountRequestToJSON(getDocumentCountRequest: GetDocumentCountRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDocumentCountResponse$ {
    /** @deprecated use `GetDocumentCountResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDocumentCountResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDocumentCountResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDocumentCountResponse$Outbound, z.ZodTypeDef, GetDocumentCountResponse>;
    /** @deprecated use `GetDocumentCountResponse$Outbound` instead. */
    type Outbound = GetDocumentCountResponse$Outbound;
}

/** @internal */
declare const GetDocumentCountResponse$inboundSchema: z.ZodType<GetDocumentCountResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDocumentCountResponse$Outbound = {
    documentCount?: number | undefined;
};

/** @internal */
declare const GetDocumentCountResponse$outboundSchema: z.ZodType<GetDocumentCountResponse$Outbound, z.ZodTypeDef, GetDocumentCountResponse>;

/**
 * Describes the response body of the /getdocumentcount API call
 */
declare type GetDocumentCountResponse = {
    /**
     * Number of documents corresponding to the specified custom datasource.
     */
    documentCount?: number | undefined;
};

declare function getDocumentCountResponseFromJSON(jsonString: string): Result<GetDocumentCountResponse, SDKValidationError>;

declare function getDocumentCountResponseToJSON(getDocumentCountResponse: GetDocumentCountResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDocumentsByFacetsRequest$ {
    /** @deprecated use `GetDocumentsByFacetsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDocumentsByFacetsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDocumentsByFacetsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDocumentsByFacetsRequest$Outbound, z.ZodTypeDef, GetDocumentsByFacetsRequest>;
    /** @deprecated use `GetDocumentsByFacetsRequest$Outbound` instead. */
    type Outbound = GetDocumentsByFacetsRequest$Outbound;
}

/** @internal */
declare const GetDocumentsByFacetsRequest$inboundSchema: z.ZodType<GetDocumentsByFacetsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDocumentsByFacetsRequest$Outbound = {
    datasourcesFilter?: Array<string> | undefined;
    filterSets: Array<FacetFilterSet$Outbound>;
    cursor?: string | undefined;
};

/** @internal */
declare const GetDocumentsByFacetsRequest$outboundSchema: z.ZodType<GetDocumentsByFacetsRequest$Outbound, z.ZodTypeDef, GetDocumentsByFacetsRequest>;

declare type GetDocumentsByFacetsRequest = {
    /**
     * Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing.
     */
    datasourcesFilter?: Array<string> | undefined;
    /**
     * A list of facet filter sets that will be OR'ed together. An AND is assumed between different filters in each set.
     */
    filterSets: Array<FacetFilterSet>;
    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    cursor?: string | undefined;
};

declare function getDocumentsByFacetsRequestFromJSON(jsonString: string): Result<GetDocumentsByFacetsRequest, SDKValidationError>;

declare function getDocumentsByFacetsRequestToJSON(getDocumentsByFacetsRequest: GetDocumentsByFacetsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDocumentsByFacetsResponse$ {
    /** @deprecated use `GetDocumentsByFacetsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDocumentsByFacetsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDocumentsByFacetsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDocumentsByFacetsResponse$Outbound, z.ZodTypeDef, GetDocumentsByFacetsResponse>;
    /** @deprecated use `GetDocumentsByFacetsResponse$Outbound` instead. */
    type Outbound = GetDocumentsByFacetsResponse$Outbound;
}

/** @internal */
declare const GetDocumentsByFacetsResponse$inboundSchema: z.ZodType<GetDocumentsByFacetsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDocumentsByFacetsResponse$Outbound = {
    documents?: Array<Document$Outbound> | undefined;
    hasMoreResults?: boolean | undefined;
    cursor?: string | undefined;
};

/** @internal */
declare const GetDocumentsByFacetsResponse$outboundSchema: z.ZodType<GetDocumentsByFacetsResponse$Outbound, z.ZodTypeDef, GetDocumentsByFacetsResponse>;

declare type GetDocumentsByFacetsResponse = {
    /**
     * The document details, ordered by score.
     */
    documents?: Array<Document_2> | undefined;
    /**
     * Whether more results are available. Use cursor to retrieve them.
     */
    hasMoreResults?: boolean | undefined;
    /**
     * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
     */
    cursor?: string | undefined;
};

declare function getDocumentsByFacetsResponseFromJSON(jsonString: string): Result<GetDocumentsByFacetsResponse, SDKValidationError>;

declare function getDocumentsByFacetsResponseToJSON(getDocumentsByFacetsResponse: GetDocumentsByFacetsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDocumentsRequest$ {
    /** @deprecated use `GetDocumentsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDocumentsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDocumentsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDocumentsRequest$Outbound, z.ZodTypeDef, GetDocumentsRequest>;
    /** @deprecated use `GetDocumentsRequest$Outbound` instead. */
    type Outbound = GetDocumentsRequest$Outbound;
}

/** @internal */
declare const GetDocumentsRequest$inboundSchema: z.ZodType<GetDocumentsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDocumentsRequest$Outbound = {
    documentSpecs: Array<DocumentSpecUnion$Outbound>;
    includeFields?: Array<string> | undefined;
};

/** @internal */
declare const GetDocumentsRequest$outboundSchema: z.ZodType<GetDocumentsRequest$Outbound, z.ZodTypeDef, GetDocumentsRequest>;

declare type GetDocumentsRequest = {
    /**
     * The specification for the documents to be retrieved.
     */
    documentSpecs: Array<DocumentSpecUnion>;
    /**
     * List of Document fields to return (that aren't returned by default)
     */
    includeFields?: Array<GetDocumentsRequestIncludeField> | undefined;
};

declare function getDocumentsRequestFromJSON(jsonString: string): Result<GetDocumentsRequest, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDocumentsRequestIncludeField$ {
    /** @deprecated use `GetDocumentsRequestIncludeField$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly LastViewedAt: "LAST_VIEWED_AT";
        readonly VisitorsCount: "VISITORS_COUNT";
        readonly RecentShares: "RECENT_SHARES";
        readonly DocumentContent: "DOCUMENT_CONTENT";
    }>;
    /** @deprecated use `GetDocumentsRequestIncludeField$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly LastViewedAt: "LAST_VIEWED_AT";
        readonly VisitorsCount: "VISITORS_COUNT";
        readonly RecentShares: "RECENT_SHARES";
        readonly DocumentContent: "DOCUMENT_CONTENT";
    }>;
}

/** @internal */
declare const GetDocumentsRequestIncludeField$inboundSchema: z.ZodNativeEnum<typeof GetDocumentsRequestIncludeField>;

/** @internal */
declare const GetDocumentsRequestIncludeField$outboundSchema: z.ZodNativeEnum<typeof GetDocumentsRequestIncludeField>;

declare const GetDocumentsRequestIncludeField: {
    readonly LastViewedAt: "LAST_VIEWED_AT";
    readonly VisitorsCount: "VISITORS_COUNT";
    readonly RecentShares: "RECENT_SHARES";
    readonly DocumentContent: "DOCUMENT_CONTENT";
};

declare type GetDocumentsRequestIncludeField = ClosedEnum<typeof GetDocumentsRequestIncludeField>;

declare function getDocumentsRequestToJSON(getDocumentsRequest: GetDocumentsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDocumentsResponse$ {
    /** @deprecated use `GetDocumentsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDocumentsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDocumentsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDocumentsResponse$Outbound, z.ZodTypeDef, GetDocumentsResponse>;
    /** @deprecated use `GetDocumentsResponse$Outbound` instead. */
    type Outbound = GetDocumentsResponse$Outbound;
}

/** @internal */
declare const GetDocumentsResponse$inboundSchema: z.ZodType<GetDocumentsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDocumentsResponse$Outbound = {
    documents?: {
        [k: string]: DocumentOrErrorUnion$Outbound;
    } | undefined;
};

/** @internal */
declare const GetDocumentsResponse$outboundSchema: z.ZodType<GetDocumentsResponse$Outbound, z.ZodTypeDef, GetDocumentsResponse>;

declare type GetDocumentsResponse = {
    /**
     * The document details or the error if document is not found.
     */
    documents?: {
        [k: string]: DocumentOrErrorUnion;
    } | undefined;
};

declare function getDocumentsResponseFromJSON(jsonString: string): Result<GetDocumentsResponse, SDKValidationError>;

declare function getDocumentsResponseToJSON(getDocumentsResponse: GetDocumentsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDocumentStatusRequest$ {
    /** @deprecated use `GetDocumentStatusRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDocumentStatusRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDocumentStatusRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDocumentStatusRequest$Outbound, z.ZodTypeDef, GetDocumentStatusRequest>;
    /** @deprecated use `GetDocumentStatusRequest$Outbound` instead. */
    type Outbound = GetDocumentStatusRequest$Outbound;
}

/** @internal */
declare const GetDocumentStatusRequest$inboundSchema: z.ZodType<GetDocumentStatusRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDocumentStatusRequest$Outbound = {
    datasource: string;
    objectType: string;
    docId: string;
};

/** @internal */
declare const GetDocumentStatusRequest$outboundSchema: z.ZodType<GetDocumentStatusRequest$Outbound, z.ZodTypeDef, GetDocumentStatusRequest>;

/**
 * Describes the request body for /getdocumentstatus API call
 */
declare type GetDocumentStatusRequest = {
    /**
     * Datasource to get fetch document status for
     */
    datasource: string;
    /**
     * Object type of the document to get the status for
     */
    objectType: string;
    /**
     * Glean Document ID within the datasource to get the status for.
     */
    docId: string;
};

declare function getDocumentStatusRequestFromJSON(jsonString: string): Result<GetDocumentStatusRequest, SDKValidationError>;

declare function getDocumentStatusRequestToJSON(getDocumentStatusRequest: GetDocumentStatusRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDocumentStatusResponse$ {
    /** @deprecated use `GetDocumentStatusResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDocumentStatusResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDocumentStatusResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDocumentStatusResponse$Outbound, z.ZodTypeDef, GetDocumentStatusResponse>;
    /** @deprecated use `GetDocumentStatusResponse$Outbound` instead. */
    type Outbound = GetDocumentStatusResponse$Outbound;
}

/** @internal */
declare const GetDocumentStatusResponse$inboundSchema: z.ZodType<GetDocumentStatusResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDocumentStatusResponse$Outbound = {
    uploadStatus?: string | undefined;
    lastUploadedAt?: number | undefined;
    indexingStatus?: string | undefined;
    lastIndexedAt?: number | undefined;
};

/** @internal */
declare const GetDocumentStatusResponse$outboundSchema: z.ZodType<GetDocumentStatusResponse$Outbound, z.ZodTypeDef, GetDocumentStatusResponse>;

/**
 * Describes the response body of the /getdocumentstatus API call
 */
declare type GetDocumentStatusResponse = {
    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    uploadStatus?: string | undefined;
    /**
     * Time of last successful upload, in epoch seconds
     */
    lastUploadedAt?: number | undefined;
    /**
     * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
     */
    indexingStatus?: string | undefined;
    /**
     * Time of last successful indexing, in epoch seconds
     */
    lastIndexedAt?: number | undefined;
};

declare function getDocumentStatusResponseFromJSON(jsonString: string): Result<GetDocumentStatusResponse, SDKValidationError>;

declare function getDocumentStatusResponseToJSON(getDocumentStatusResponse: GetDocumentStatusResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetDocumentVisibilityOverridesResponse$ {
    /** @deprecated use `GetDocumentVisibilityOverridesResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetDocumentVisibilityOverridesResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetDocumentVisibilityOverridesResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetDocumentVisibilityOverridesResponse$Outbound, z.ZodTypeDef, GetDocumentVisibilityOverridesResponse>;
    /** @deprecated use `GetDocumentVisibilityOverridesResponse$Outbound` instead. */
    type Outbound = GetDocumentVisibilityOverridesResponse$Outbound;
}

/** @internal */
declare const GetDocumentVisibilityOverridesResponse$inboundSchema: z.ZodType<GetDocumentVisibilityOverridesResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetDocumentVisibilityOverridesResponse$Outbound = {
    visibilityOverrides?: Array<DocumentVisibilityOverride$Outbound> | undefined;
};

/** @internal */
declare const GetDocumentVisibilityOverridesResponse$outboundSchema: z.ZodType<GetDocumentVisibilityOverridesResponse$Outbound, z.ZodTypeDef, GetDocumentVisibilityOverridesResponse>;

declare type GetDocumentVisibilityOverridesResponse = {
    visibilityOverrides?: Array<DocumentVisibilityOverride> | undefined;
};

declare function getDocumentVisibilityOverridesResponseFromJSON(jsonString: string): Result<GetDocumentVisibilityOverridesResponse, SDKValidationError>;

declare function getDocumentVisibilityOverridesResponseToJSON(getDocumentVisibilityOverridesResponse: GetDocumentVisibilityOverridesResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetdocvisibilityRequest$ {
    /** @deprecated use `GetdocvisibilityRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetdocvisibilityRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetdocvisibilityRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetdocvisibilityRequest$Outbound, z.ZodTypeDef, GetdocvisibilityRequest>;
    /** @deprecated use `GetdocvisibilityRequest$Outbound` instead. */
    type Outbound = GetdocvisibilityRequest$Outbound;
}

/** @internal */
declare const GetdocvisibilityRequest$inboundSchema: z.ZodType<GetdocvisibilityRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetdocvisibilityRequest$Outbound = {
    docIds?: Array<string> | undefined;
};

/** @internal */
declare const GetdocvisibilityRequest$outboundSchema: z.ZodType<GetdocvisibilityRequest$Outbound, z.ZodTypeDef, GetdocvisibilityRequest>;

declare type GetdocvisibilityRequest = {
    /**
     * List of doc-ids which will have their hide status fetched.
     */
    docIds?: Array<string> | undefined;
};

declare function getdocvisibilityRequestFromJSON(jsonString: string): Result<GetdocvisibilityRequest, SDKValidationError>;

declare function getdocvisibilityRequestToJSON(getdocvisibilityRequest: GetdocvisibilityRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetPinRequest$ {
    /** @deprecated use `GetPinRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetPinRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetPinRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetPinRequest$Outbound, z.ZodTypeDef, GetPinRequest>;
    /** @deprecated use `GetPinRequest$Outbound` instead. */
    type Outbound = GetPinRequest$Outbound;
}

/** @internal */
declare const GetPinRequest$inboundSchema: z.ZodType<GetPinRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetPinRequest$Outbound = {
    id?: string | undefined;
};

/** @internal */
declare const GetPinRequest$outboundSchema: z.ZodType<GetPinRequest$Outbound, z.ZodTypeDef, GetPinRequest>;

declare type GetPinRequest = {
    /**
     * The opaque id of the pin to be fetched.
     */
    id?: string | undefined;
};

declare function getPinRequestFromJSON(jsonString: string): Result<GetPinRequest, SDKValidationError>;

declare function getPinRequestToJSON(getPinRequest: GetPinRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetPinResponse$ {
    /** @deprecated use `GetPinResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetPinResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetPinResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetPinResponse$Outbound, z.ZodTypeDef, GetPinResponse>;
    /** @deprecated use `GetPinResponse$Outbound` instead. */
    type Outbound = GetPinResponse$Outbound;
}

/** @internal */
declare const GetPinResponse$inboundSchema: z.ZodType<GetPinResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetPinResponse$Outbound = {
    pin?: PinDocument$Outbound | undefined;
};

/** @internal */
declare const GetPinResponse$outboundSchema: z.ZodType<GetPinResponse$Outbound, z.ZodTypeDef, GetPinResponse>;

declare type GetPinResponse = {
    pin?: PinDocument | undefined;
};

declare function getPinResponseFromJSON(jsonString: string): Result<GetPinResponse, SDKValidationError>;

declare function getPinResponseToJSON(getPinResponse: GetPinResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetpolicyRequest$ {
    /** @deprecated use `GetpolicyRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetpolicyRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetpolicyRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetpolicyRequest$Outbound, z.ZodTypeDef, GetpolicyRequest>;
    /** @deprecated use `GetpolicyRequest$Outbound` instead. */
    type Outbound = GetpolicyRequest$Outbound;
}

/** @internal */
declare const GetpolicyRequest$inboundSchema: z.ZodType<GetpolicyRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetpolicyRequest$Outbound = {
    id: string;
    version?: number | undefined;
};

/** @internal */
declare const GetpolicyRequest$outboundSchema: z.ZodType<GetpolicyRequest$Outbound, z.ZodTypeDef, GetpolicyRequest>;

declare type GetpolicyRequest = {
    /**
     * The id of the policy to fetch.
     */
    id: string;
    /**
     * The version of the policy to fetch. Each time a policy is updated, the older version is still stored. If this is left empty, the latest policy is fetched.
     */
    version?: number | undefined;
};

declare function getpolicyRequestFromJSON(jsonString: string): Result<GetpolicyRequest, SDKValidationError>;

declare function getpolicyRequestToJSON(getpolicyRequest: GetpolicyRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetreportstatusRequest$ {
    /** @deprecated use `GetreportstatusRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetreportstatusRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetreportstatusRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetreportstatusRequest$Outbound, z.ZodTypeDef, GetreportstatusRequest>;
    /** @deprecated use `GetreportstatusRequest$Outbound` instead. */
    type Outbound = GetreportstatusRequest$Outbound;
}

/** @internal */
declare const GetreportstatusRequest$inboundSchema: z.ZodType<GetreportstatusRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetreportstatusRequest$Outbound = {
    id: string;
};

/** @internal */
declare const GetreportstatusRequest$outboundSchema: z.ZodType<GetreportstatusRequest$Outbound, z.ZodTypeDef, GetreportstatusRequest>;

declare type GetreportstatusRequest = {
    /**
     * The id of the report to get run status for.
     */
    id: string;
};

declare function getreportstatusRequestFromJSON(jsonString: string): Result<GetreportstatusRequest, SDKValidationError>;

declare function getreportstatusRequestToJSON(getreportstatusRequest: GetreportstatusRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetRestApiV1ToolsListRequest$ {
    /** @deprecated use `GetRestApiV1ToolsListRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetRestApiV1ToolsListRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetRestApiV1ToolsListRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetRestApiV1ToolsListRequest$Outbound, z.ZodTypeDef, GetRestApiV1ToolsListRequest>;
    /** @deprecated use `GetRestApiV1ToolsListRequest$Outbound` instead. */
    type Outbound = GetRestApiV1ToolsListRequest$Outbound;
}

/** @internal */
declare const GetRestApiV1ToolsListRequest$inboundSchema: z.ZodType<GetRestApiV1ToolsListRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetRestApiV1ToolsListRequest$Outbound = {
    toolNames?: Array<string> | undefined;
};

/** @internal */
declare const GetRestApiV1ToolsListRequest$outboundSchema: z.ZodType<GetRestApiV1ToolsListRequest$Outbound, z.ZodTypeDef, GetRestApiV1ToolsListRequest>;

declare type GetRestApiV1ToolsListRequest = {
    /**
     * Optional array of tool names to filter by
     */
    toolNames?: Array<string> | undefined;
};

declare function getRestApiV1ToolsListRequestFromJSON(jsonString: string): Result<GetRestApiV1ToolsListRequest, SDKValidationError>;

declare function getRestApiV1ToolsListRequestToJSON(getRestApiV1ToolsListRequest: GetRestApiV1ToolsListRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetShortcutRequest$ {
    /** @deprecated use `GetShortcutRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetShortcutRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetShortcutRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetShortcutRequest$Outbound, z.ZodTypeDef, GetShortcutRequest>;
    /** @deprecated use `GetShortcutRequest$Outbound` instead. */
    type Outbound = GetShortcutRequest$Outbound;
}

/** @internal */
declare const GetShortcutRequest$inboundSchema: z.ZodType<GetShortcutRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetShortcutRequest$Outbound = {
    alias: string;
};

/** @internal */
declare const GetShortcutRequest$outboundSchema: z.ZodType<GetShortcutRequest$Outbound, z.ZodTypeDef, GetShortcutRequest>;

declare type GetShortcutRequest = {
    /**
     * The alias for the shortcut, including any arguments for variable shortcuts.
     */
    alias: string;
};

declare function getShortcutRequestFromJSON(jsonString: string): Result<GetShortcutRequest, SDKValidationError>;

declare function getShortcutRequestToJSON(getShortcutRequest: GetShortcutRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetShortcutRequestUnion$ {
    /** @deprecated use `GetShortcutRequestUnion$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetShortcutRequestUnion, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetShortcutRequestUnion$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetShortcutRequestUnion$Outbound, z.ZodTypeDef, GetShortcutRequestUnion>;
    /** @deprecated use `GetShortcutRequestUnion$Outbound` instead. */
    type Outbound = GetShortcutRequestUnion$Outbound;
}

/** @internal */
declare const GetShortcutRequestUnion$inboundSchema: z.ZodType<GetShortcutRequestUnion, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetShortcutRequestUnion$Outbound = GetShortcutRequest$Outbound | UserGeneratedContentId$Outbound;

/** @internal */
declare const GetShortcutRequestUnion$outboundSchema: z.ZodType<GetShortcutRequestUnion$Outbound, z.ZodTypeDef, GetShortcutRequestUnion>;

declare type GetShortcutRequestUnion = GetShortcutRequest | UserGeneratedContentId;

declare function getShortcutRequestUnionFromJSON(jsonString: string): Result<GetShortcutRequestUnion, SDKValidationError>;

declare function getShortcutRequestUnionToJSON(getShortcutRequestUnion: GetShortcutRequestUnion): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetShortcutResponse$ {
    /** @deprecated use `GetShortcutResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetShortcutResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetShortcutResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetShortcutResponse$Outbound, z.ZodTypeDef, GetShortcutResponse>;
    /** @deprecated use `GetShortcutResponse$Outbound` instead. */
    type Outbound = GetShortcutResponse$Outbound;
}

/** @internal */
declare const GetShortcutResponse$inboundSchema: z.ZodType<GetShortcutResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetShortcutResponse$Outbound = {
    shortcut?: Shortcut$Outbound | undefined;
    error?: ShortcutError$Outbound | undefined;
};

/** @internal */
declare const GetShortcutResponse$outboundSchema: z.ZodType<GetShortcutResponse$Outbound, z.ZodTypeDef, GetShortcutResponse>;

declare type GetShortcutResponse = {
    shortcut?: Shortcut | undefined;
    error?: ShortcutError | undefined;
};

declare function getShortcutResponseFromJSON(jsonString: string): Result<GetShortcutResponse, SDKValidationError>;

declare function getShortcutResponseToJSON(getShortcutResponse: GetShortcutResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetUserCountRequest$ {
    /** @deprecated use `GetUserCountRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetUserCountRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetUserCountRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetUserCountRequest$Outbound, z.ZodTypeDef, GetUserCountRequest>;
    /** @deprecated use `GetUserCountRequest$Outbound` instead. */
    type Outbound = GetUserCountRequest$Outbound;
}

/** @internal */
declare const GetUserCountRequest$inboundSchema: z.ZodType<GetUserCountRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetUserCountRequest$Outbound = {
    datasource: string;
};

/** @internal */
declare const GetUserCountRequest$outboundSchema: z.ZodType<GetUserCountRequest$Outbound, z.ZodTypeDef, GetUserCountRequest>;

/**
 * Describes the request body of the /getusercount API call
 */
declare type GetUserCountRequest = {
    /**
     * Datasource name for which user count is needed.
     */
    datasource: string;
};

declare function getUserCountRequestFromJSON(jsonString: string): Result<GetUserCountRequest, SDKValidationError>;

declare function getUserCountRequestToJSON(getUserCountRequest: GetUserCountRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GetUserCountResponse$ {
    /** @deprecated use `GetUserCountResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetUserCountResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetUserCountResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetUserCountResponse$Outbound, z.ZodTypeDef, GetUserCountResponse>;
    /** @deprecated use `GetUserCountResponse$Outbound` instead. */
    type Outbound = GetUserCountResponse$Outbound;
}

/** @internal */
declare const GetUserCountResponse$inboundSchema: z.ZodType<GetUserCountResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GetUserCountResponse$Outbound = {
    userCount?: number | undefined;
};

/** @internal */
declare const GetUserCountResponse$outboundSchema: z.ZodType<GetUserCountResponse$Outbound, z.ZodTypeDef, GetUserCountResponse>;

/**
 * Describes the response body of the /getusercount API call
 */
declare type GetUserCountResponse = {
    /**
     * Number of users corresponding to the specified custom datasource.
     */
    userCount?: number | undefined;
};

declare function getUserCountResponseFromJSON(jsonString: string): Result<GetUserCountResponse, SDKValidationError>;

declare function getUserCountResponseToJSON(getUserCountResponse: GetUserCountResponse): string;

export declare class Glean extends ClientSDK {
    private _client?;
    get client(): Client;
    private _indexing?;
    get indexing(): Indexing;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GleanAssistInsightsResponse$ {
    /** @deprecated use `GleanAssistInsightsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GleanAssistInsightsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `GleanAssistInsightsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GleanAssistInsightsResponse$Outbound, z.ZodTypeDef, GleanAssistInsightsResponse>;
    /** @deprecated use `GleanAssistInsightsResponse$Outbound` instead. */
    type Outbound = GleanAssistInsightsResponse$Outbound;
}

/** @internal */
declare const GleanAssistInsightsResponse$inboundSchema: z.ZodType<GleanAssistInsightsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type GleanAssistInsightsResponse$Outbound = {
    lastLogTimestamp?: number | undefined;
    activityInsights?: Array<UserActivityInsight$Outbound> | undefined;
    totalActiveUsers?: number | undefined;
    datasourceInstances?: Array<string> | undefined;
    departments?: Array<string> | undefined;
};

/** @internal */
declare const GleanAssistInsightsResponse$outboundSchema: z.ZodType<GleanAssistInsightsResponse$Outbound, z.ZodTypeDef, GleanAssistInsightsResponse>;

declare type GleanAssistInsightsResponse = {
    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    lastLogTimestamp?: number | undefined;
    /**
     * Insights for all active users with respect to set of actions.
     */
    activityInsights?: Array<UserActivityInsight> | undefined;
    /**
     * Total number of active users in the requested period.
     */
    totalActiveUsers?: number | undefined;
    /**
     * List of datasource instances for which glean assist is enabled.
     */
    datasourceInstances?: Array<string> | undefined;
    /**
     * List of departments applicable for users tab.
     */
    departments?: Array<string> | undefined;
};

declare function gleanAssistInsightsResponseFromJSON(jsonString: string): Result<GleanAssistInsightsResponse, SDKValidationError>;

declare function gleanAssistInsightsResponseToJSON(gleanAssistInsightsResponse: GleanAssistInsightsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GleanDataError$ {
    /** @deprecated use `GleanDataError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GleanDataError, z.ZodTypeDef, unknown>;
    /** @deprecated use `GleanDataError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GleanDataError$Outbound, z.ZodTypeDef, GleanDataError>;
    /** @deprecated use `GleanDataError$Outbound` instead. */
    type Outbound = GleanDataError$Outbound;
}

/** @internal */
declare const GleanDataError$inboundSchema: z.ZodType<GleanDataError, z.ZodTypeDef, unknown>;

/** @internal */
declare type GleanDataError$Outbound = {
    badGmailToken?: boolean | undefined;
    badOutlookToken?: boolean | undefined;
    invalidOperators?: Array<InvalidOperatorValueError$Outbound> | undefined;
    errorMessages?: Array<ErrorMessage$Outbound> | undefined;
};

/** @internal */
declare const GleanDataError$outboundSchema: z.ZodType<GleanDataError$Outbound, z.ZodTypeDef, GleanDataError>;

declare type GleanDataError = {
    /**
     * Indicates the gmail results could not be fetched due to bad token.
     */
    badGmailToken?: boolean | undefined;
    /**
     * Indicates the outlook results could not be fetched due to bad token.
     */
    badOutlookToken?: boolean | undefined;
    /**
     * Indicates results could not be fetched due to invalid operators in the query.
     */
    invalidOperators?: Array<InvalidOperatorValueError> | undefined;
    errorMessages?: Array<ErrorMessage> | undefined;
};

declare function gleanDataErrorFromJSON(jsonString: string): Result<GleanDataError, SDKValidationError>;

declare function gleanDataErrorToJSON(gleanDataError: GleanDataError): string;

declare class Governance extends ClientSDK {
    private _data?;
    get data(): Data;
    private _documents?;
    get documents(): GovernanceDocuments;
}

declare class GovernanceDocuments extends ClientSDK {
    private _visibilityoverrides?;
    get visibilityoverrides(): Visibilityoverrides;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GrantPermission$ {
    /** @deprecated use `GrantPermission$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GrantPermission, z.ZodTypeDef, unknown>;
    /** @deprecated use `GrantPermission$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GrantPermission$Outbound, z.ZodTypeDef, GrantPermission>;
    /** @deprecated use `GrantPermission$Outbound` instead. */
    type Outbound = GrantPermission$Outbound;
}

/** @internal */
declare const GrantPermission$inboundSchema: z.ZodType<GrantPermission, z.ZodTypeDef, unknown>;

/** @internal */
declare type GrantPermission$Outbound = {
    scopeType?: string | undefined;
};

/** @internal */
declare const GrantPermission$outboundSchema: z.ZodType<GrantPermission$Outbound, z.ZodTypeDef, GrantPermission>;

/**
 * Describes the grant permission level that a user has for a specific feature
 */
declare type GrantPermission = {
    /**
     * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
     */
    scopeType?: ScopeType | undefined;
};

declare function grantPermissionFromJSON(jsonString: string): Result<GrantPermission, SDKValidationError>;

declare function grantPermissionToJSON(grantPermission: GrantPermission): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GrantType$ {
    /** @deprecated use `GrantType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AuthCode: "AUTH_CODE";
        readonly ClientCredentials: "CLIENT_CREDENTIALS";
    }>;
    /** @deprecated use `GrantType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AuthCode: "AUTH_CODE";
        readonly ClientCredentials: "CLIENT_CREDENTIALS";
    }>;
}

/** @internal */
declare const GrantType$inboundSchema: z.ZodNativeEnum<typeof GrantType>;

/** @internal */
declare const GrantType$outboundSchema: z.ZodNativeEnum<typeof GrantType>;

/**
 * The type of grant type being used.
 */
declare const GrantType: {
    readonly AuthCode: "AUTH_CODE";
    readonly ClientCredentials: "CLIENT_CREDENTIALS";
};

/**
 * The type of grant type being used.
 */
declare type GrantType = ClosedEnum<typeof GrantType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GreenlistUsersRequest$ {
    /** @deprecated use `GreenlistUsersRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GreenlistUsersRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GreenlistUsersRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GreenlistUsersRequest$Outbound, z.ZodTypeDef, GreenlistUsersRequest>;
    /** @deprecated use `GreenlistUsersRequest$Outbound` instead. */
    type Outbound = GreenlistUsersRequest$Outbound;
}

/** @internal */
declare const GreenlistUsersRequest$inboundSchema: z.ZodType<GreenlistUsersRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type GreenlistUsersRequest$Outbound = {
    datasource: string;
    emails: Array<string>;
};

/** @internal */
declare const GreenlistUsersRequest$outboundSchema: z.ZodType<GreenlistUsersRequest$Outbound, z.ZodTypeDef, GreenlistUsersRequest>;

/**
 * Describes the request body of the /betausers API call
 */
declare type GreenlistUsersRequest = {
    /**
     * Datasource which needs to be made visible to users specified in the `emails` field.
     */
    datasource: string;
    /**
     * The emails of the beta users
     */
    emails: Array<string>;
};

declare function greenlistUsersRequestFromJSON(jsonString: string): Result<GreenlistUsersRequest, SDKValidationError>;

declare function greenlistUsersRequestToJSON(greenlistUsersRequest: GreenlistUsersRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Group$ {
    /** @deprecated use `Group$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Group, z.ZodTypeDef, unknown>;
    /** @deprecated use `Group$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Group$Outbound, z.ZodTypeDef, Group>;
    /** @deprecated use `Group$Outbound` instead. */
    type Outbound = Group$Outbound;
}

/** @internal */
declare const Group$inboundSchema: z.ZodType<Group, z.ZodTypeDef, unknown>;

/** @internal */
declare type Group$Outbound = {
    type: string;
    id: string;
    name?: string | undefined;
    datasourceInstance?: string | undefined;
    provisioningId?: string | undefined;
};

/** @internal */
declare const Group$outboundSchema: z.ZodType<Group$Outbound, z.ZodTypeDef, Group>;

declare type Group = {
    /**
     * The type of user group
     */
    type: GroupType;
    /**
     * A unique identifier for the group. May be the same as name.
     */
    id: string;
    /**
     * Name of the group.
     */
    name?: string | undefined;
    /**
     * Datasource instance if the group belongs to one e.g. external groups.
     */
    datasourceInstance?: string | undefined;
    /**
     * identifier for greenlist provisioning, aka sciokey
     */
    provisioningId?: string | undefined;
};

declare function groupFromJSON(jsonString: string): Result<Group, SDKValidationError>;

declare function groupToJSON(group: Group): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace GroupType$ {
    /** @deprecated use `GroupType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Department: "DEPARTMENT";
        readonly All: "ALL";
        readonly Team: "TEAM";
        readonly JobTitle: "JOB_TITLE";
        readonly RoleType: "ROLE_TYPE";
        readonly Location: "LOCATION";
        readonly Region: "REGION";
        readonly ExternalGroup: "EXTERNAL_GROUP";
    }>;
    /** @deprecated use `GroupType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Department: "DEPARTMENT";
        readonly All: "ALL";
        readonly Team: "TEAM";
        readonly JobTitle: "JOB_TITLE";
        readonly RoleType: "ROLE_TYPE";
        readonly Location: "LOCATION";
        readonly Region: "REGION";
        readonly ExternalGroup: "EXTERNAL_GROUP";
    }>;
}

/** @internal */
declare const GroupType$inboundSchema: z.ZodNativeEnum<typeof GroupType>;

/** @internal */
declare const GroupType$outboundSchema: z.ZodNativeEnum<typeof GroupType>;

/**
 * The type of user group
 */
declare const GroupType: {
    readonly Department: "DEPARTMENT";
    readonly All: "ALL";
    readonly Team: "TEAM";
    readonly JobTitle: "JOB_TITLE";
    readonly RoleType: "ROLE_TYPE";
    readonly Location: "LOCATION";
    readonly Region: "REGION";
    readonly ExternalGroup: "EXTERNAL_GROUP";
};

/**
 * The type of user group
 */
declare type GroupType = ClosedEnum<typeof GroupType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace HideBuiltInFacet$ {
    /** @deprecated use `HideBuiltInFacet$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Type: "TYPE";
        readonly Tag: "TAG";
        readonly Author: "AUTHOR";
        readonly Owner: "OWNER";
    }>;
    /** @deprecated use `HideBuiltInFacet$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Type: "TYPE";
        readonly Tag: "TAG";
        readonly Author: "AUTHOR";
        readonly Owner: "OWNER";
    }>;
}

/** @internal */
declare const HideBuiltInFacet$inboundSchema: z.ZodNativeEnum<typeof HideBuiltInFacet>;

/** @internal */
declare const HideBuiltInFacet$outboundSchema: z.ZodNativeEnum<typeof HideBuiltInFacet>;

declare const HideBuiltInFacet: {
    readonly Type: "TYPE";
    readonly Tag: "TAG";
    readonly Author: "AUTHOR";
    readonly Owner: "OWNER";
};

declare type HideBuiltInFacet = ClosedEnum<typeof HideBuiltInFacet>;

declare type HookContext = {
    baseURL: string | URL;
    operationID: string;
    oAuth2Scopes: string[] | null;
    securitySource?: any | (() => Promise<any>);
    retryConfig: RetryConfig;
    resolvedSecurity: SecurityState | null;
    options: SDKOptions;
};

declare interface Hooks {
    /** Registers a hook to be used by the SDK for initialization event. */
    registerSDKInitHook(hook: SDKInitHook): void;
    /** Registers a hook to be used by the SDK for to modify `Request` construction. */
    registerBeforeCreateRequestHook(hook: BeforeCreateRequestHook): void;
    /** Registers a hook to be used by the SDK for the before request event. */
    registerBeforeRequestHook(hook: BeforeRequestHook_2): void;
    /** Registers a hook to be used by the SDK for the after success event. */
    registerAfterSuccessHook(hook: AfterSuccessHook): void;
    /** Registers a hook to be used by the SDK for the after error event. */
    registerAfterErrorHook(hook: AfterErrorHook): void;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Hotword$ {
    /** @deprecated use `Hotword$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Hotword, z.ZodTypeDef, unknown>;
    /** @deprecated use `Hotword$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Hotword$Outbound, z.ZodTypeDef, Hotword>;
    /** @deprecated use `Hotword$Outbound` instead. */
    type Outbound = Hotword$Outbound;
}

/** @internal */
declare const Hotword$inboundSchema: z.ZodType<Hotword, z.ZodTypeDef, unknown>;

/** @internal */
declare type Hotword$Outbound = {
    regex?: string | undefined;
    proximity?: HotwordProximity$Outbound | undefined;
};

/** @internal */
declare const Hotword$outboundSchema: z.ZodType<Hotword$Outbound, z.ZodTypeDef, Hotword>;

declare type Hotword = {
    regex?: string | undefined;
    proximity?: HotwordProximity | undefined;
};

declare function hotwordFromJSON(jsonString: string): Result<Hotword, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace HotwordProximity$ {
    /** @deprecated use `HotwordProximity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<HotwordProximity, z.ZodTypeDef, unknown>;
    /** @deprecated use `HotwordProximity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<HotwordProximity$Outbound, z.ZodTypeDef, HotwordProximity>;
    /** @deprecated use `HotwordProximity$Outbound` instead. */
    type Outbound = HotwordProximity$Outbound;
}

/** @internal */
declare const HotwordProximity$inboundSchema: z.ZodType<HotwordProximity, z.ZodTypeDef, unknown>;

/** @internal */
declare type HotwordProximity$Outbound = {
    windowBefore?: number | undefined;
    windowAfter?: number | undefined;
};

/** @internal */
declare const HotwordProximity$outboundSchema: z.ZodType<HotwordProximity$Outbound, z.ZodTypeDef, HotwordProximity>;

declare type HotwordProximity = {
    windowBefore?: number | undefined;
    windowAfter?: number | undefined;
};

declare function hotwordProximityFromJSON(jsonString: string): Result<HotwordProximity, SDKValidationError>;

declare function hotwordProximityToJSON(hotwordProximity: HotwordProximity): string;

declare function hotwordToJSON(hotword: Hotword): string;

export declare class HTTPClient {
    private options;
    private fetcher;
    private requestHooks;
    private requestErrorHooks;
    private responseHooks;
    constructor(options?: HTTPClientOptions);
    request(request: Request): Promise<Response>;
    /**
     * Registers a hook that is called before a request is made. The hook function
     * can mutate the request or return a new request. This may be useful to add
     * additional information to request such as request IDs and tracing headers.
     */
    addHook(hook: "beforeRequest", fn: BeforeRequestHook): this;
    /**
     * Registers a hook that is called when a request cannot be made due to a
     * network error.
     */
    addHook(hook: "requestError", fn: RequestErrorHook): this;
    /**
     * Registers a hook that is called when a response has been received from the
     * server.
     */
    addHook(hook: "response", fn: ResponseHook): this;
    /** Removes a hook that was previously registered with `addHook`. */
    removeHook(hook: "beforeRequest", fn: BeforeRequestHook): this;
    /** Removes a hook that was previously registered with `addHook`. */
    removeHook(hook: "requestError", fn: RequestErrorHook): this;
    /** Removes a hook that was previously registered with `addHook`. */
    removeHook(hook: "response", fn: ResponseHook): this;
    clone(): HTTPClient;
}

/**
 * Base class for all HTTP errors.
 */
declare class HTTPClientError extends Error {
    /** The underlying cause of the error. */
    readonly cause: unknown;
    name: string;
    constructor(message: string, opts?: {
        cause?: unknown;
    });
}

export declare interface HTTPClientOptions {
    fetcher?: Fetcher;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IconConfig$ {
    /** @deprecated use `IconConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IconConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `IconConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IconConfig$Outbound, z.ZodTypeDef, IconConfig>;
    /** @deprecated use `IconConfig$Outbound` instead. */
    type Outbound = IconConfig$Outbound;
}

/** @internal */
declare const IconConfig$inboundSchema: z.ZodType<IconConfig, z.ZodTypeDef, unknown>;

/** @internal */
declare type IconConfig$Outbound = {
    generatedBackgroundColorKey?: string | undefined;
    backgroundColor?: string | undefined;
    color?: string | undefined;
    key?: string | undefined;
    iconType?: string | undefined;
    masked?: boolean | undefined;
    name?: string | undefined;
    url?: string | undefined;
};

/** @internal */
declare const IconConfig$outboundSchema: z.ZodType<IconConfig$Outbound, z.ZodTypeDef, IconConfig>;

/**
 * Defines how to render an icon
 */
declare type IconConfig = {
    generatedBackgroundColorKey?: string | undefined;
    backgroundColor?: string | undefined;
    color?: string | undefined;
    key?: string | undefined;
    iconType?: IconType | undefined;
    /**
     * Whether the icon should be masked based on current theme.
     */
    masked?: boolean | undefined;
    /**
     * The name of the icon if applicable, e.g. the glyph name for `IconType.GLYPH` icons.
     */
    name?: string | undefined;
    /**
     * The URL to an image to be displayed if applicable, e.g. the URL for `iconType.URL` icons.
     */
    url?: string | undefined;
};

declare function iconConfigFromJSON(jsonString: string): Result<IconConfig, SDKValidationError>;

declare function iconConfigToJSON(iconConfig: IconConfig): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IconType$ {
    /** @deprecated use `IconType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Collection: "COLLECTION";
        readonly Custom: "CUSTOM";
        readonly Datasource: "DATASOURCE";
        readonly DatasourceInstance: "DATASOURCE_INSTANCE";
        readonly Favicon: "FAVICON";
        readonly FileType: "FILE_TYPE";
        readonly GeneratedBackground: "GENERATED_BACKGROUND";
        readonly Glyph: "GLYPH";
        readonly MimeType: "MIME_TYPE";
        readonly NoIcon: "NO_ICON";
        readonly Person: "PERSON";
        readonly Reactions: "REACTIONS";
        readonly Url: "URL";
    }>;
    /** @deprecated use `IconType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Collection: "COLLECTION";
        readonly Custom: "CUSTOM";
        readonly Datasource: "DATASOURCE";
        readonly DatasourceInstance: "DATASOURCE_INSTANCE";
        readonly Favicon: "FAVICON";
        readonly FileType: "FILE_TYPE";
        readonly GeneratedBackground: "GENERATED_BACKGROUND";
        readonly Glyph: "GLYPH";
        readonly MimeType: "MIME_TYPE";
        readonly NoIcon: "NO_ICON";
        readonly Person: "PERSON";
        readonly Reactions: "REACTIONS";
        readonly Url: "URL";
    }>;
}

/** @internal */
declare const IconType$inboundSchema: z.ZodNativeEnum<typeof IconType>;

/** @internal */
declare const IconType$outboundSchema: z.ZodNativeEnum<typeof IconType>;

declare const IconType: {
    readonly Collection: "COLLECTION";
    readonly Custom: "CUSTOM";
    readonly Datasource: "DATASOURCE";
    readonly DatasourceInstance: "DATASOURCE_INSTANCE";
    readonly Favicon: "FAVICON";
    readonly FileType: "FILE_TYPE";
    readonly GeneratedBackground: "GENERATED_BACKGROUND";
    readonly Glyph: "GLYPH";
    readonly MimeType: "MIME_TYPE";
    readonly NoIcon: "NO_ICON";
    readonly Person: "PERSON";
    readonly Reactions: "REACTIONS";
    readonly Url: "URL";
};

declare type IconType = ClosedEnum<typeof IconType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Identity$ {
    /** @deprecated use `Identity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Identity, z.ZodTypeDef, unknown>;
    /** @deprecated use `Identity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Identity$Outbound, z.ZodTypeDef, Identity>;
    /** @deprecated use `Identity$Outbound` instead. */
    type Outbound = Identity$Outbound;
}

/** @internal */
declare const Identity$inboundSchema: z.ZodType<Identity, z.ZodTypeDef, unknown>;

/** @internal */
declare type Identity$Outbound = {
    processingHistory?: Array<ProcessingHistoryEvent$Outbound> | undefined;
    users?: DebugDatasourceStatusIdentityResponseComponent$Outbound | undefined;
    groups?: DebugDatasourceStatusIdentityResponseComponent$Outbound | undefined;
    memberships?: DebugDatasourceStatusIdentityResponseComponent$Outbound | undefined;
};

/** @internal */
declare const Identity$outboundSchema: z.ZodType<Identity$Outbound, z.ZodTypeDef, Identity>;

declare type Identity = {
    /**
     * Information about processing history for the datasource
     */
    processingHistory?: Array<ProcessingHistoryEvent> | undefined;
    users?: DebugDatasourceStatusIdentityResponseComponent | undefined;
    groups?: DebugDatasourceStatusIdentityResponseComponent | undefined;
    memberships?: DebugDatasourceStatusIdentityResponseComponent | undefined;
};

declare function identityFromJSON(jsonString: string): Result<Identity, SDKValidationError>;

declare function identityToJSON(identity: Identity): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IdType$ {
    /** @deprecated use `IdType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ChannelName: "CHANNEL_NAME";
        readonly ThreadId: "THREAD_ID";
        readonly ConversationId: "CONVERSATION_ID";
    }>;
    /** @deprecated use `IdType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ChannelName: "CHANNEL_NAME";
        readonly ThreadId: "THREAD_ID";
        readonly ConversationId: "CONVERSATION_ID";
    }>;
}

/** @internal */
declare const IdType$inboundSchema: z.ZodNativeEnum<typeof IdType>;

/** @internal */
declare const IdType$outboundSchema: z.ZodNativeEnum<typeof IdType>;

/**
 * Type of the id in the incoming request.
 */
declare const IdType: {
    readonly ChannelName: "CHANNEL_NAME";
    readonly ThreadId: "THREAD_ID";
    readonly ConversationId: "CONVERSATION_ID";
};

/**
 * Type of the id in the incoming request.
 */
declare type IdType = ClosedEnum<typeof IdType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IncludeType$ {
    /** @deprecated use `IncludeType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly PeopleWithoutManager: "PEOPLE_WITHOUT_MANAGER";
        readonly InvalidEntities: "INVALID_ENTITIES";
    }>;
    /** @deprecated use `IncludeType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly PeopleWithoutManager: "PEOPLE_WITHOUT_MANAGER";
        readonly InvalidEntities: "INVALID_ENTITIES";
    }>;
}

/** @internal */
declare const IncludeType$inboundSchema: z.ZodNativeEnum<typeof IncludeType>;

/** @internal */
declare const IncludeType$outboundSchema: z.ZodNativeEnum<typeof IncludeType>;

declare const IncludeType: {
    readonly PeopleWithoutManager: "PEOPLE_WITHOUT_MANAGER";
    readonly InvalidEntities: "INVALID_ENTITIES";
};

declare type IncludeType = ClosedEnum<typeof IncludeType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IndexDocumentRequest$ {
    /** @deprecated use `IndexDocumentRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IndexDocumentRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `IndexDocumentRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IndexDocumentRequest$Outbound, z.ZodTypeDef, IndexDocumentRequest>;
    /** @deprecated use `IndexDocumentRequest$Outbound` instead. */
    type Outbound = IndexDocumentRequest$Outbound;
}

/** @internal */
declare const IndexDocumentRequest$inboundSchema: z.ZodType<IndexDocumentRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type IndexDocumentRequest$Outbound = {
    version?: number | undefined;
    document: DocumentDefinition$Outbound;
};

/** @internal */
declare const IndexDocumentRequest$outboundSchema: z.ZodType<IndexDocumentRequest$Outbound, z.ZodTypeDef, IndexDocumentRequest>;

/**
 * Describes the request body of the /indexdocument API call
 */
declare type IndexDocumentRequest = {
    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    version?: number | undefined;
    /**
     * Indexable document structure
     */
    document: DocumentDefinition;
};

declare function indexDocumentRequestFromJSON(jsonString: string): Result<IndexDocumentRequest, SDKValidationError>;

declare function indexDocumentRequestToJSON(indexDocumentRequest: IndexDocumentRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IndexDocumentsRequest$ {
    /** @deprecated use `IndexDocumentsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IndexDocumentsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `IndexDocumentsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IndexDocumentsRequest$Outbound, z.ZodTypeDef, IndexDocumentsRequest>;
    /** @deprecated use `IndexDocumentsRequest$Outbound` instead. */
    type Outbound = IndexDocumentsRequest$Outbound;
}

/** @internal */
declare const IndexDocumentsRequest$inboundSchema: z.ZodType<IndexDocumentsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type IndexDocumentsRequest$Outbound = {
    uploadId?: string | undefined;
    datasource: string;
    documents: Array<DocumentDefinition$Outbound>;
};

/** @internal */
declare const IndexDocumentsRequest$outboundSchema: z.ZodType<IndexDocumentsRequest$Outbound, z.ZodTypeDef, IndexDocumentsRequest>;

/**
 * Describes the request body of the /indexdocuments API call
 */
declare type IndexDocumentsRequest = {
    /**
     * Optional id parameter to identify and track a batch of documents.
     */
    uploadId?: string | undefined;
    /**
     * Datasource of the documents
     */
    datasource: string;
    /**
     * Batch of documents being added/updated
     */
    documents: Array<DocumentDefinition>;
};

declare function indexDocumentsRequestFromJSON(jsonString: string): Result<IndexDocumentsRequest, SDKValidationError>;

declare function indexDocumentsRequestToJSON(indexDocumentsRequest: IndexDocumentsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IndexEmployeeRequest$ {
    /** @deprecated use `IndexEmployeeRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IndexEmployeeRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `IndexEmployeeRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IndexEmployeeRequest$Outbound, z.ZodTypeDef, IndexEmployeeRequest>;
    /** @deprecated use `IndexEmployeeRequest$Outbound` instead. */
    type Outbound = IndexEmployeeRequest$Outbound;
}

/** @internal */
declare const IndexEmployeeRequest$inboundSchema: z.ZodType<IndexEmployeeRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type IndexEmployeeRequest$Outbound = {
    employee: EmployeeInfoDefinition$Outbound;
    version?: number | undefined;
};

/** @internal */
declare const IndexEmployeeRequest$outboundSchema: z.ZodType<IndexEmployeeRequest$Outbound, z.ZodTypeDef, IndexEmployeeRequest>;

/**
 * Info about an employee and optional version for that info
 */
declare type IndexEmployeeRequest = {
    /**
     * Describes employee info
     */
    employee: EmployeeInfoDefinition;
    /**
     * Version number for the employee object. If absent or 0 then no version checks are done
     */
    version?: number | undefined;
};

declare function indexEmployeeRequestFromJSON(jsonString: string): Result<IndexEmployeeRequest, SDKValidationError>;

declare function indexEmployeeRequestToJSON(indexEmployeeRequest: IndexEmployeeRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IndexGroupRequest$ {
    /** @deprecated use `IndexGroupRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IndexGroupRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `IndexGroupRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IndexGroupRequest$Outbound, z.ZodTypeDef, IndexGroupRequest>;
    /** @deprecated use `IndexGroupRequest$Outbound` instead. */
    type Outbound = IndexGroupRequest$Outbound;
}

/** @internal */
declare const IndexGroupRequest$inboundSchema: z.ZodType<IndexGroupRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type IndexGroupRequest$Outbound = {
    version?: number | undefined;
    datasource: string;
    group: DatasourceGroupDefinition$Outbound;
};

/** @internal */
declare const IndexGroupRequest$outboundSchema: z.ZodType<IndexGroupRequest$Outbound, z.ZodTypeDef, IndexGroupRequest>;

/**
 * Describes the request body of the /indexgroup API call
 */
declare type IndexGroupRequest = {
    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    version?: number | undefined;
    /**
     * The datasource for which the group is added
     */
    datasource: string;
    /**
     * describes a group in the datasource
     */
    group: DatasourceGroupDefinition;
};

declare function indexGroupRequestFromJSON(jsonString: string): Result<IndexGroupRequest, SDKValidationError>;

declare function indexGroupRequestToJSON(indexGroupRequest: IndexGroupRequest): string;

declare class Indexing extends ClientSDK {
    private _documents?;
    get documents(): IndexingDocuments;
    private _permissions?;
    get permissions(): Permissions_3;
    private _datasource?;
    get datasource(): Datasource_2;
    private _people?;
    get people(): People;
    private _datasources?;
    get datasources(): Datasources;
    private _authentication?;
    get authentication(): IndexingAuthentication;
    private _shortcuts?;
    get shortcuts(): IndexingShortcuts;
}

declare class IndexingAuthentication extends ClientSDK {
    /**
     * Rotate token
     *
     * @remarks
     * Rotates the secret value inside the Indexing API token and returns the new raw secret. All other properties of the token are unchanged. In order to rotate the secret value, include the token as the bearer token in the `/rotatetoken` request. Please refer to [Token rotation](https://developers.glean.com/indexing/authentication/token-rotation) documentation for more information.
     */
    rotateToken(options?: RequestOptions): Promise<components.RotateTokenResponse>;
}

declare class IndexingDocuments extends ClientSDK {
    /**
     * Index document
     *
     * @remarks
     * Adds a document to the index or updates an existing document.
     */
    addOrUpdate(request: components.IndexDocumentRequest, options?: RequestOptions): Promise<void>;
    /**
     * Index documents
     *
     * @remarks
     * Adds or updates multiple documents in the index. Please refer to the [bulk indexing](https://developers.glean.com/indexing/documents/bulk-indexing/choosing-indexdocuments-vs-bulkindexdocuments) documentation for an explanation of when to use this endpoint.
     */
    index(request: components.IndexDocumentsRequest, options?: RequestOptions): Promise<void>;
    /**
     * Bulk index documents
     *
     * @remarks
     * Replaces the documents in a datasource using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/indexing/documents/bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
     */
    bulkIndex(request: components.BulkIndexDocumentsRequest, options?: RequestOptions): Promise<void>;
    /**
     * Schedules the processing of uploaded documents
     *
     * @remarks
     * Schedules the immediate processing of documents uploaded through the indexing API. By default the uploaded documents will be processed asynchronously but this API can be used to schedule processing of all documents on demand.
     *
     * If a `datasource` parameter is specified, processing is limited to that custom datasource. Without it, processing applies to all documents across all custom datasources.
     * #### Rate Limits
     * This endpoint is rate-limited to one usage every 3 hours. Exceeding this limit results in a 429 response code. Here's how the rate limit works:
     * 1. Calling `/processalldocuments` for datasource `foo` prevents another call for `foo` for 3 hours.
     * 2. Calling `/processalldocuments` for datasource `foo` doesn't affect immediate calls for `bar`.
     * 3. Calling `/processalldocuments` for all datasources prevents any datasource calls for 3 hours.
     * 4. Calling `/processalldocuments` for datasource `foo` doesn't affect immediate calls for all datasources.
     *
     * For more frequent document processing, contact Glean support.
     */
    processAll(request?: components.ProcessAllDocumentsRequest | undefined, options?: RequestOptions): Promise<void>;
    /**
     * Delete document
     *
     * @remarks
     * Deletes the specified document from the index. Succeeds if document is not present.
     */
    delete(request: components.DeleteDocumentRequest, options?: RequestOptions): Promise<void>;
    /**
     * Beta: Get document information
     *
     * @remarks
     * Gives various information that would help in debugging related to a particular document. Currently in beta, might undergo breaking changes without prior notice.
     *
     * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/indexing/debugging/datasource-config) for more information.
     */
    debug(debugDocumentRequest: components.DebugDocumentRequest, datasource: string, options?: RequestOptions): Promise<components.DebugDocumentResponse>;
    /**
     * Beta: Get information of a batch of documents
     *
     * @remarks
     * Gives various information that would help in debugging related to a batch of documents. Currently in beta, might undergo breaking changes without prior notice.
     *
     * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/indexing/debugging/datasource-config) for more information.
     */
    debugMany(debugDocumentsRequest: components.DebugDocumentsRequest, datasource: string, options?: RequestOptions): Promise<components.DebugDocumentsResponse>;
    /**
     * Check document access
     *
     * @remarks
     * Check if a given user has access to access a document in a custom datasource
     *
     * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/indexing/debugging/datasource-config) for more information.
     */
    checkAccess(request: components.CheckDocumentAccessRequest, options?: RequestOptions): Promise<components.CheckDocumentAccessResponse>;
    /**
     * Get document upload and indexing status
     *
     * @remarks
     * Intended for debugging/validation. Fetches the current upload and indexing status of documents.
     *
     * Tip: Use [/debug/{datasource}/document](https://developers.glean.com/indexing/debugging/datasource-document) for richer information.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    status(request: components.GetDocumentStatusRequest, options?: RequestOptions): Promise<components.GetDocumentStatusResponse>;
    /**
     * Get document count
     *
     * @remarks
     * Fetches document count for the specified custom datasource.
     *
     * Tip: Use [/debug/{datasource}/status](https://developers.glean.com/indexing/debugging/datasource-status) for richer information.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    count(request: components.GetDocumentCountRequest, options?: RequestOptions): Promise<components.GetDocumentCountResponse>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IndexingShortcut$ {
    /** @deprecated use `IndexingShortcut$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IndexingShortcut, z.ZodTypeDef, unknown>;
    /** @deprecated use `IndexingShortcut$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IndexingShortcut$Outbound, z.ZodTypeDef, IndexingShortcut>;
    /** @deprecated use `IndexingShortcut$Outbound` instead. */
    type Outbound = IndexingShortcut$Outbound;
}

/** @internal */
declare const IndexingShortcut$inboundSchema: z.ZodType<IndexingShortcut, z.ZodTypeDef, unknown>;

/** @internal */
declare type IndexingShortcut$Outbound = {
    inputAlias: string;
    description?: string | undefined;
    destinationUrl: string;
    createdBy: string;
    createTime?: number | undefined;
    updatedBy?: string | undefined;
    updateTime?: number | undefined;
    unlisted?: boolean | undefined;
    urlTemplate?: string | undefined;
};

/** @internal */
declare const IndexingShortcut$outboundSchema: z.ZodType<IndexingShortcut$Outbound, z.ZodTypeDef, IndexingShortcut>;

declare type IndexingShortcut = {
    /**
     * link text following the viewPrefix as entered by the user. For example, if the view prefix is `go/` and the shortened URL is `go/abc`, then `abc` is the inputAlias.
     */
    inputAlias: string;
    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    description?: string | undefined;
    /**
     * destination URL for the shortcut.
     */
    destinationUrl: string;
    /**
     * Email of the user who created this shortcut.
     */
    createdBy: string;
    /**
     * The time the shortcut was created in epoch seconds.
     */
    createTime?: number | undefined;
    /**
     * Email of the user who last updated this shortcut.
     */
    updatedBy?: string | undefined;
    /**
     * The time the shortcut was updated in epoch seconds.
     */
    updateTime?: number | undefined;
    /**
     * Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author and admins only.
     */
    unlisted?: boolean | undefined;
    /**
     * For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
     */
    urlTemplate?: string | undefined;
};

declare function indexingShortcutFromJSON(jsonString: string): Result<IndexingShortcut, SDKValidationError>;

declare class IndexingShortcuts extends ClientSDK {
    /**
     * Bulk index external shortcuts
     *
     * @remarks
     * Replaces all the currently indexed shortcuts using paginated batch API calls. Note that this endpoint is used for indexing shortcuts not hosted by Glean. If you want to upload shortcuts that would be hosted by Glean, please use the `/uploadshortcuts` endpoint. For information on what you can do with Golinks, which are Glean-hosted shortcuts, please refer to [this](https://help.glean.com/en/articles/5628838-how-go-links-work) page.
     */
    bulkIndex(request: components.BulkIndexShortcutsRequest, options?: RequestOptions): Promise<void>;
    /**
     * Upload shortcuts
     *
     * @remarks
     * Creates glean shortcuts for uploaded shortcuts info. Glean would host the shortcuts, and they can be managed in the knowledge tab once uploaded.
     */
    upload(request: components.UploadShortcutsRequest, options?: RequestOptions): Promise<void>;
}

declare function indexingShortcutToJSON(indexingShortcut: IndexingShortcut): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IndexMembershipRequest$ {
    /** @deprecated use `IndexMembershipRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IndexMembershipRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `IndexMembershipRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IndexMembershipRequest$Outbound, z.ZodTypeDef, IndexMembershipRequest>;
    /** @deprecated use `IndexMembershipRequest$Outbound` instead. */
    type Outbound = IndexMembershipRequest$Outbound;
}

/** @internal */
declare const IndexMembershipRequest$inboundSchema: z.ZodType<IndexMembershipRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type IndexMembershipRequest$Outbound = {
    version?: number | undefined;
    datasource: string;
    membership: DatasourceMembershipDefinition$Outbound;
};

/** @internal */
declare const IndexMembershipRequest$outboundSchema: z.ZodType<IndexMembershipRequest$Outbound, z.ZodTypeDef, IndexMembershipRequest>;

/**
 * Describes the request body of the /indexmembership API call
 */
declare type IndexMembershipRequest = {
    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    version?: number | undefined;
    /**
     * The datasource for which the membership is added
     */
    datasource: string;
    /**
     * describes the membership row of a group. Only one of memberUserId and memberGroupName can be specified.
     */
    membership: DatasourceMembershipDefinition;
};

declare function indexMembershipRequestFromJSON(jsonString: string): Result<IndexMembershipRequest, SDKValidationError>;

declare function indexMembershipRequestToJSON(indexMembershipRequest: IndexMembershipRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IndexStatus$ {
    /** @deprecated use `IndexStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IndexStatus, z.ZodTypeDef, unknown>;
    /** @deprecated use `IndexStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IndexStatus$Outbound, z.ZodTypeDef, IndexStatus>;
    /** @deprecated use `IndexStatus$Outbound` instead. */
    type Outbound = IndexStatus$Outbound;
}

/** @internal */
declare const IndexStatus$inboundSchema: z.ZodType<IndexStatus, z.ZodTypeDef, unknown>;

/** @internal */
declare type IndexStatus$Outbound = {
    lastCrawledTime?: string | undefined;
    lastIndexedTime?: string | undefined;
};

/** @internal */
declare const IndexStatus$outboundSchema: z.ZodType<IndexStatus$Outbound, z.ZodTypeDef, IndexStatus>;

declare type IndexStatus = {
    /**
     * When the document was last crawled
     */
    lastCrawledTime?: Date | undefined;
    /**
     * When the document was last indexed
     */
    lastIndexedTime?: Date | undefined;
};

declare function indexStatusFromJSON(jsonString: string): Result<IndexStatus, SDKValidationError>;

declare function indexStatusToJSON(indexStatus: IndexStatus): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IndexTeamRequest$ {
    /** @deprecated use `IndexTeamRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IndexTeamRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `IndexTeamRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IndexTeamRequest$Outbound, z.ZodTypeDef, IndexTeamRequest>;
    /** @deprecated use `IndexTeamRequest$Outbound` instead. */
    type Outbound = IndexTeamRequest$Outbound;
}

/** @internal */
declare const IndexTeamRequest$inboundSchema: z.ZodType<IndexTeamRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type IndexTeamRequest$Outbound = {
    team: TeamInfoDefinition$Outbound;
    version?: number | undefined;
};

/** @internal */
declare const IndexTeamRequest$outboundSchema: z.ZodType<IndexTeamRequest$Outbound, z.ZodTypeDef, IndexTeamRequest>;

/**
 * Info about a team and optional version for that info
 */
declare type IndexTeamRequest = {
    /**
     * Information about an employee's team
     */
    team: TeamInfoDefinition;
    /**
     * Version number for the team object. If absent or 0 then no version checks are done
     */
    version?: number | undefined;
};

declare function indexTeamRequestFromJSON(jsonString: string): Result<IndexTeamRequest, SDKValidationError>;

declare function indexTeamRequestToJSON(indexTeamRequest: IndexTeamRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace IndexUserRequest$ {
    /** @deprecated use `IndexUserRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<IndexUserRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `IndexUserRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<IndexUserRequest$Outbound, z.ZodTypeDef, IndexUserRequest>;
    /** @deprecated use `IndexUserRequest$Outbound` instead. */
    type Outbound = IndexUserRequest$Outbound;
}

/** @internal */
declare const IndexUserRequest$inboundSchema: z.ZodType<IndexUserRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type IndexUserRequest$Outbound = {
    version?: number | undefined;
    datasource: string;
    user: DatasourceUserDefinition$Outbound;
};

/** @internal */
declare const IndexUserRequest$outboundSchema: z.ZodType<IndexUserRequest$Outbound, z.ZodTypeDef, IndexUserRequest>;

/**
 * Describes the request body of the /indexuser API call
 */
declare type IndexUserRequest = {
    /**
     * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
     */
    version?: number | undefined;
    /**
     * The datasource for which the user is added
     */
    datasource: string;
    /**
     * describes a user in the datasource
     */
    user: DatasourceUserDefinition;
};

declare function indexUserRequestFromJSON(jsonString: string): Result<IndexUserRequest, SDKValidationError>;

declare function indexUserRequestToJSON(indexUserRequest: IndexUserRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace InputOptions$ {
    /** @deprecated use `InputOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InputOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `InputOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InputOptions$Outbound, z.ZodTypeDef, InputOptions>;
    /** @deprecated use `InputOptions$Outbound` instead. */
    type Outbound = InputOptions$Outbound;
}

/** @internal */
declare const InputOptions$inboundSchema: z.ZodType<InputOptions, z.ZodTypeDef, unknown>;

/** @internal */
declare type InputOptions$Outbound = {
    urlGreenlist?: Array<string> | undefined;
    datasourcesType?: string | undefined;
    datasources?: Array<string> | undefined;
    datasourceInstances?: Array<string> | undefined;
    timePeriodType?: string | undefined;
    customTimeRange?: TimeRange$Outbound | undefined;
};

/** @internal */
declare const InputOptions$outboundSchema: z.ZodType<InputOptions$Outbound, z.ZodTypeDef, InputOptions>;

/**
 * Controls which data-sources and what time-range to include in scans.
 */
declare type InputOptions = {
    /**
     * list of url regex matching documents excluded from report
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    urlGreenlist?: Array<string> | undefined;
    /**
     * The types of datasource for which to run the report/policy.
     */
    datasourcesType?: DatasourcesType | undefined;
    /**
     * List of datasources to consider for report. DEPRECATED - use datasourceInstances instead.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    datasources?: Array<string> | undefined;
    /**
     * List of datasource instances to consider for report/policy.
     */
    datasourceInstances?: Array<string> | undefined;
    /**
     * Type of time period for which to run the report/policy. PAST_DAY is deprecated.
     */
    timePeriodType?: TimePeriodType | undefined;
    customTimeRange?: TimeRange | undefined;
};

declare function inputOptionsFromJSON(jsonString: string): Result<InputOptions, SDKValidationError>;

declare function inputOptionsToJSON(inputOptions: InputOptions): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace InputSchema$ {
    /** @deprecated use `InputSchema$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InputSchema, z.ZodTypeDef, unknown>;
    /** @deprecated use `InputSchema$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InputSchema$Outbound, z.ZodTypeDef, InputSchema>;
    /** @deprecated use `InputSchema$Outbound` instead. */
    type Outbound = InputSchema$Outbound;
}

/** @internal */
declare const InputSchema$inboundSchema: z.ZodType<InputSchema, z.ZodTypeDef, unknown>;

/** @internal */
declare type InputSchema$Outbound = {};

/** @internal */
declare const InputSchema$outboundSchema: z.ZodType<InputSchema$Outbound, z.ZodTypeDef, InputSchema>;

/**
 * The schema for the agent input. In JSON Schema format.
 */
declare type InputSchema = {};

declare function inputSchemaFromJSON(jsonString: string): Result<InputSchema, SDKValidationError>;

declare function inputSchemaToJSON(inputSchema: InputSchema): string;

declare class Insights extends ClientSDK {
    /**
     * Get insights
     *
     * @remarks
     * Gets the aggregate usage insights data displayed in the Insights Dashboards.
     */
    retrieve(request: components.InsightsRequest, options?: RequestOptions): Promise<components.InsightsResponse>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace InsightsAgentsRequestOptions$ {
    /** @deprecated use `InsightsAgentsRequestOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InsightsAgentsRequestOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `InsightsAgentsRequestOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InsightsAgentsRequestOptions$Outbound, z.ZodTypeDef, InsightsAgentsRequestOptions>;
    /** @deprecated use `InsightsAgentsRequestOptions$Outbound` instead. */
    type Outbound = InsightsAgentsRequestOptions$Outbound;
}

/** @internal */
declare const InsightsAgentsRequestOptions$inboundSchema: z.ZodType<InsightsAgentsRequestOptions, z.ZodTypeDef, unknown>;

/** @internal */
declare type InsightsAgentsRequestOptions$Outbound = {
    agentIds?: Array<string> | undefined;
};

/** @internal */
declare const InsightsAgentsRequestOptions$outboundSchema: z.ZodType<InsightsAgentsRequestOptions$Outbound, z.ZodTypeDef, InsightsAgentsRequestOptions>;

declare type InsightsAgentsRequestOptions = {
    /**
     * IDs of the Agents for which Insights should be returned. An empty array signifies all.
     */
    agentIds?: Array<string> | undefined;
};

declare function insightsAgentsRequestOptionsFromJSON(jsonString: string): Result<InsightsAgentsRequestOptions, SDKValidationError>;

declare function insightsAgentsRequestOptionsToJSON(insightsAgentsRequestOptions: InsightsAgentsRequestOptions): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace InsightsAiAppRequestOptions$ {
    /** @deprecated use `InsightsAiAppRequestOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InsightsAiAppRequestOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `InsightsAiAppRequestOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InsightsAiAppRequestOptions$Outbound, z.ZodTypeDef, InsightsAiAppRequestOptions>;
    /** @deprecated use `InsightsAiAppRequestOptions$Outbound` instead. */
    type Outbound = InsightsAiAppRequestOptions$Outbound;
}

/** @internal */
declare const InsightsAiAppRequestOptions$inboundSchema: z.ZodType<InsightsAiAppRequestOptions, z.ZodTypeDef, unknown>;

/** @internal */
declare type InsightsAiAppRequestOptions$Outbound = {
    aiAppIds?: Array<string> | undefined;
};

/** @internal */
declare const InsightsAiAppRequestOptions$outboundSchema: z.ZodType<InsightsAiAppRequestOptions$Outbound, z.ZodTypeDef, InsightsAiAppRequestOptions>;

declare type InsightsAiAppRequestOptions = {
    /**
     * IDs of the AI Apps for which Insights should be returned. An empty array signifies all.
     */
    aiAppIds?: Array<string> | undefined;
};

declare function insightsAiAppRequestOptionsFromJSON(jsonString: string): Result<InsightsAiAppRequestOptions, SDKValidationError>;

declare function insightsAiAppRequestOptionsToJSON(insightsAiAppRequestOptions: InsightsAiAppRequestOptions): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace InsightsAssistantRequest$ {
    /** @deprecated use `InsightsAssistantRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InsightsAssistantRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `InsightsAssistantRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InsightsAssistantRequest$Outbound, z.ZodTypeDef, InsightsAssistantRequest>;
    /** @deprecated use `InsightsAssistantRequest$Outbound` instead. */
    type Outbound = InsightsAssistantRequest$Outbound;
}

/** @internal */
declare const InsightsAssistantRequest$inboundSchema: z.ZodType<InsightsAssistantRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type InsightsAssistantRequest$Outbound = {
    departments?: Array<string> | undefined;
    dayRange?: Period$Outbound | undefined;
};

/** @internal */
declare const InsightsAssistantRequest$outboundSchema: z.ZodType<InsightsAssistantRequest$Outbound, z.ZodTypeDef, InsightsAssistantRequest>;

declare type InsightsAssistantRequest = {
    /**
     * Departments for which Insights are requested.
     */
    departments?: Array<string> | undefined;
    dayRange?: Period | undefined;
};

declare function insightsAssistantRequestFromJSON(jsonString: string): Result<InsightsAssistantRequest, SDKValidationError>;

declare function insightsAssistantRequestToJSON(insightsAssistantRequest: InsightsAssistantRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace InsightsOverviewRequest$ {
    /** @deprecated use `InsightsOverviewRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InsightsOverviewRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `InsightsOverviewRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InsightsOverviewRequest$Outbound, z.ZodTypeDef, InsightsOverviewRequest>;
    /** @deprecated use `InsightsOverviewRequest$Outbound` instead. */
    type Outbound = InsightsOverviewRequest$Outbound;
}

/** @internal */
declare const InsightsOverviewRequest$inboundSchema: z.ZodType<InsightsOverviewRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type InsightsOverviewRequest$Outbound = {
    departments?: Array<string> | undefined;
    dayRange?: Period$Outbound | undefined;
};

/** @internal */
declare const InsightsOverviewRequest$outboundSchema: z.ZodType<InsightsOverviewRequest$Outbound, z.ZodTypeDef, InsightsOverviewRequest>;

declare type InsightsOverviewRequest = {
    /**
     * Departments for which Insights are requested.
     */
    departments?: Array<string> | undefined;
    dayRange?: Period | undefined;
};

declare function insightsOverviewRequestFromJSON(jsonString: string): Result<InsightsOverviewRequest, SDKValidationError>;

declare function insightsOverviewRequestToJSON(insightsOverviewRequest: InsightsOverviewRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace InsightsRequest$ {
    /** @deprecated use `InsightsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InsightsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `InsightsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InsightsRequest$Outbound, z.ZodTypeDef, InsightsRequest>;
    /** @deprecated use `InsightsRequest$Outbound` instead. */
    type Outbound = InsightsRequest$Outbound;
}

/** @internal */
declare const InsightsRequest$inboundSchema: z.ZodType<InsightsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type InsightsRequest$Outbound = {
    overviewRequest?: InsightsOverviewRequest$Outbound | undefined;
    assistantRequest?: InsightsAssistantRequest$Outbound | undefined;
    agentsRequest?: AgentsInsightsV2Request$Outbound | undefined;
    disablePerUserInsights?: boolean | undefined;
    categories?: Array<string> | undefined;
    departments?: Array<string> | undefined;
    dayRange?: Period$Outbound | undefined;
    aiAppRequestOptions?: InsightsAiAppRequestOptions$Outbound | undefined;
    agentsRequestOptions?: InsightsAgentsRequestOptions$Outbound | undefined;
    assistantActivityTypes?: Array<string> | undefined;
};

/** @internal */
declare const InsightsRequest$outboundSchema: z.ZodType<InsightsRequest$Outbound, z.ZodTypeDef, InsightsRequest>;

declare type InsightsRequest = {
    overviewRequest?: InsightsOverviewRequest | undefined;
    assistantRequest?: InsightsAssistantRequest | undefined;
    agentsRequest?: AgentsInsightsV2Request | undefined;
    /**
     * If true, suppresses the generation of per-user Insights in the response. Default is false.
     */
    disablePerUserInsights?: boolean | undefined;
    /**
     * Categories of data requested. Request can include single or multiple types.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    categories?: Array<InsightsRequestCategory> | undefined;
    /**
     * Departments that the data is requested for. If this is empty, corresponds to whole company.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    departments?: Array<string> | undefined;
    dayRange?: Period | undefined;
    aiAppRequestOptions?: InsightsAiAppRequestOptions | undefined;
    agentsRequestOptions?: InsightsAgentsRequestOptions | undefined;
    /**
     * Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    assistantActivityTypes?: Array<AssistantActivityType> | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace InsightsRequestCategory$ {
    /** @deprecated use `InsightsRequestCategory$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Agents: "AGENTS";
        readonly AgentUsers: "AGENT_USERS";
        readonly TopAgents: "TOP_AGENTS";
        readonly AgentsUsageByDepartment: "AGENTS_USAGE_BY_DEPARTMENT";
        readonly Ai: "AI";
        readonly AiApps: "AI_APPS";
        readonly Announcements: "ANNOUNCEMENTS";
        readonly Answers: "ANSWERS";
        readonly Collections: "COLLECTIONS";
        readonly Content: "CONTENT";
        readonly GleanAssist: "GLEAN_ASSIST";
        readonly Queries: "QUERIES";
        readonly Shortcuts: "SHORTCUTS";
        readonly Users: "USERS";
    }>;
    /** @deprecated use `InsightsRequestCategory$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Agents: "AGENTS";
        readonly AgentUsers: "AGENT_USERS";
        readonly TopAgents: "TOP_AGENTS";
        readonly AgentsUsageByDepartment: "AGENTS_USAGE_BY_DEPARTMENT";
        readonly Ai: "AI";
        readonly AiApps: "AI_APPS";
        readonly Announcements: "ANNOUNCEMENTS";
        readonly Answers: "ANSWERS";
        readonly Collections: "COLLECTIONS";
        readonly Content: "CONTENT";
        readonly GleanAssist: "GLEAN_ASSIST";
        readonly Queries: "QUERIES";
        readonly Shortcuts: "SHORTCUTS";
        readonly Users: "USERS";
    }>;
}

/** @internal */
declare const InsightsRequestCategory$inboundSchema: z.ZodNativeEnum<typeof InsightsRequestCategory>;

/** @internal */
declare const InsightsRequestCategory$outboundSchema: z.ZodNativeEnum<typeof InsightsRequestCategory>;

declare const InsightsRequestCategory: {
    readonly Agents: "AGENTS";
    readonly AgentUsers: "AGENT_USERS";
    readonly TopAgents: "TOP_AGENTS";
    readonly AgentsUsageByDepartment: "AGENTS_USAGE_BY_DEPARTMENT";
    readonly Ai: "AI";
    readonly AiApps: "AI_APPS";
    readonly Announcements: "ANNOUNCEMENTS";
    readonly Answers: "ANSWERS";
    readonly Collections: "COLLECTIONS";
    readonly Content: "CONTENT";
    readonly GleanAssist: "GLEAN_ASSIST";
    readonly Queries: "QUERIES";
    readonly Shortcuts: "SHORTCUTS";
    readonly Users: "USERS";
};

declare type InsightsRequestCategory = ClosedEnum<typeof InsightsRequestCategory>;

declare function insightsRequestFromJSON(jsonString: string): Result<InsightsRequest, SDKValidationError>;

declare function insightsRequestToJSON(insightsRequest: InsightsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace InsightsResponse$ {
    /** @deprecated use `InsightsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InsightsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `InsightsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InsightsResponse$Outbound, z.ZodTypeDef, InsightsResponse>;
    /** @deprecated use `InsightsResponse$Outbound` instead. */
    type Outbound = InsightsResponse$Outbound;
}

/** @internal */
declare const InsightsResponse$inboundSchema: z.ZodType<InsightsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type InsightsResponse$Outbound = {
    timeseries?: Array<LabeledCountInfo$Outbound> | undefined;
    users?: UserInsightsResponse$Outbound | undefined;
    content?: ContentInsightsResponse$Outbound | undefined;
    queries?: QueryInsightsResponse$Outbound | undefined;
    collections?: ContentInsightsResponse$Outbound | undefined;
    collectionsV2?: ContentInsightsResponse$Outbound | undefined;
    shortcuts?: ShortcutInsightsResponse$Outbound | undefined;
    announcements?: ContentInsightsResponse$Outbound | undefined;
    answers?: ContentInsightsResponse$Outbound | undefined;
    ai?: AiInsightsResponse$Outbound | undefined;
    aiApps?: AiAppsInsightsResponse$Outbound | undefined;
    gleanAssist?: GleanAssistInsightsResponse$Outbound | undefined;
    departments?: Array<string> | undefined;
};

/** @internal */
declare const InsightsResponse$outboundSchema: z.ZodType<InsightsResponse$Outbound, z.ZodTypeDef, InsightsResponse>;

declare type InsightsResponse = {
    /**
     * List of timeseries to make charts (if applicable).
     */
    timeseries?: Array<LabeledCountInfo> | undefined;
    users?: UserInsightsResponse | undefined;
    content?: ContentInsightsResponse | undefined;
    queries?: QueryInsightsResponse | undefined;
    collections?: ContentInsightsResponse | undefined;
    collectionsV2?: ContentInsightsResponse | undefined;
    shortcuts?: ShortcutInsightsResponse | undefined;
    announcements?: ContentInsightsResponse | undefined;
    answers?: ContentInsightsResponse | undefined;
    ai?: AiInsightsResponse | undefined;
    aiApps?: AiAppsInsightsResponse | undefined;
    gleanAssist?: GleanAssistInsightsResponse | undefined;
    /**
     * list of all departments.
     */
    departments?: Array<string> | undefined;
};

declare function insightsResponseFromJSON(jsonString: string): Result<InsightsResponse, SDKValidationError>;

declare function insightsResponseToJSON(insightsResponse: InsightsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace InvalidOperatorValueError$ {
    /** @deprecated use `InvalidOperatorValueError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InvalidOperatorValueError, z.ZodTypeDef, unknown>;
    /** @deprecated use `InvalidOperatorValueError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InvalidOperatorValueError$Outbound, z.ZodTypeDef, InvalidOperatorValueError>;
    /** @deprecated use `InvalidOperatorValueError$Outbound` instead. */
    type Outbound = InvalidOperatorValueError$Outbound;
}

/** @internal */
declare const InvalidOperatorValueError$inboundSchema: z.ZodType<InvalidOperatorValueError, z.ZodTypeDef, unknown>;

/** @internal */
declare type InvalidOperatorValueError$Outbound = {
    key?: string | undefined;
    value?: string | undefined;
};

/** @internal */
declare const InvalidOperatorValueError$outboundSchema: z.ZodType<InvalidOperatorValueError$Outbound, z.ZodTypeDef, InvalidOperatorValueError>;

declare type InvalidOperatorValueError = {
    /**
     * The operator key that has an invalid value.
     */
    key?: string | undefined;
    /**
     * The invalid operator value.
     */
    value?: string | undefined;
};

declare function invalidOperatorValueErrorFromJSON(jsonString: string): Result<InvalidOperatorValueError, SDKValidationError>;

declare function invalidOperatorValueErrorToJSON(invalidOperatorValueError: InvalidOperatorValueError): string;

/**
 * An error that is raised when any inputs used to create a request are invalid.
 */
declare class InvalidRequestError extends HTTPClientError {
    name: string;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace InviteInfo$ {
    /** @deprecated use `InviteInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<InviteInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `InviteInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<InviteInfo$Outbound, z.ZodTypeDef, InviteInfo>;
    /** @deprecated use `InviteInfo$Outbound` instead. */
    type Outbound = InviteInfo$Outbound;
}

/** @internal */
declare const InviteInfo$inboundSchema: z.ZodType<InviteInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type InviteInfo$Outbound = {
    signUpTime?: string | undefined;
    invites?: Array<ChannelInviteInfo$Outbound> | undefined;
    inviter?: Person$Outbound | undefined;
    inviteTime?: string | undefined;
    reminderTime?: string | undefined;
};

/** @internal */
declare const InviteInfo$outboundSchema: z.ZodType<InviteInfo$Outbound, z.ZodTypeDef, InviteInfo>;

/**
 * Information regarding the invite status of a person.
 */
declare type InviteInfo = {
    /**
     * The time this person signed up in ISO format (ISO 8601).
     */
    signUpTime?: Date | undefined;
    /**
     * Latest invites received by the user for each channel
     */
    invites?: Array<ChannelInviteInfo> | undefined;
    inviter?: Person | undefined;
    /**
     * The time this person was invited in ISO format (ISO 8601).
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    inviteTime?: Date | undefined;
    /**
     * The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    reminderTime?: Date | undefined;
};

declare function inviteInfoFromJSON(jsonString: string): Result<InviteInfo, SDKValidationError>;

declare function inviteInfoToJSON(inviteInfo: InviteInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Issue$ {
    /** @deprecated use `Issue$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly InaccurateResponse: "INACCURATE_RESPONSE";
        readonly IncompleteOrNoAnswer: "INCOMPLETE_OR_NO_ANSWER";
        readonly IncorrectCitation: "INCORRECT_CITATION";
        readonly MissingCitation: "MISSING_CITATION";
        readonly Other: "OTHER";
        readonly OutdatedResponse: "OUTDATED_RESPONSE";
        readonly ResultMissing: "RESULT_MISSING";
        readonly ResultShouldNotAppear: "RESULT_SHOULD_NOT_APPEAR";
        readonly ResultsHelpful: "RESULTS_HELPFUL";
        readonly ResultsPoorOrder: "RESULTS_POOR_ORDER";
        readonly TooMuchOneKind: "TOO_MUCH_ONE_KIND";
    }>;
    /** @deprecated use `Issue$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly InaccurateResponse: "INACCURATE_RESPONSE";
        readonly IncompleteOrNoAnswer: "INCOMPLETE_OR_NO_ANSWER";
        readonly IncorrectCitation: "INCORRECT_CITATION";
        readonly MissingCitation: "MISSING_CITATION";
        readonly Other: "OTHER";
        readonly OutdatedResponse: "OUTDATED_RESPONSE";
        readonly ResultMissing: "RESULT_MISSING";
        readonly ResultShouldNotAppear: "RESULT_SHOULD_NOT_APPEAR";
        readonly ResultsHelpful: "RESULTS_HELPFUL";
        readonly ResultsPoorOrder: "RESULTS_POOR_ORDER";
        readonly TooMuchOneKind: "TOO_MUCH_ONE_KIND";
    }>;
}

/** @internal */
declare const Issue$inboundSchema: z.ZodNativeEnum<typeof Issue>;

/** @internal */
declare const Issue$outboundSchema: z.ZodNativeEnum<typeof Issue>;

declare const Issue: {
    readonly InaccurateResponse: "INACCURATE_RESPONSE";
    readonly IncompleteOrNoAnswer: "INCOMPLETE_OR_NO_ANSWER";
    readonly IncorrectCitation: "INCORRECT_CITATION";
    readonly MissingCitation: "MISSING_CITATION";
    readonly Other: "OTHER";
    readonly OutdatedResponse: "OUTDATED_RESPONSE";
    readonly ResultMissing: "RESULT_MISSING";
    readonly ResultShouldNotAppear: "RESULT_SHOULD_NOT_APPEAR";
    readonly ResultsHelpful: "RESULTS_HELPFUL";
    readonly ResultsPoorOrder: "RESULTS_POOR_ORDER";
    readonly TooMuchOneKind: "TOO_MUCH_ONE_KIND";
};

declare type Issue = ClosedEnum<typeof Issue>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace JustificationType$ {
    /** @deprecated use `JustificationType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly FrequentlyAccessed: "FREQUENTLY_ACCESSED";
        readonly RecentlyAccessed: "RECENTLY_ACCESSED";
        readonly TrendingDocument: "TRENDING_DOCUMENT";
        readonly VerificationReminder: "VERIFICATION_REMINDER";
        readonly SuggestedDocument: "SUGGESTED_DOCUMENT";
        readonly EmptyStateSuggestion: "EMPTY_STATE_SUGGESTION";
        readonly FrecencyScored: "FRECENCY_SCORED";
        readonly ServerGenerated: "SERVER_GENERATED";
        readonly UseCase: "USE_CASE";
        readonly UpdateSinceLastView: "UPDATE_SINCE_LAST_VIEW";
        readonly RecentlyStarted: "RECENTLY_STARTED";
        readonly Event: "EVENT";
        readonly UserMention: "USER_MENTION";
        readonly Announcement: "ANNOUNCEMENT";
        readonly ExternalAnnouncement: "EXTERNAL_ANNOUNCEMENT";
        readonly PopularityBasedTrending: "POPULARITY_BASED_TRENDING";
        readonly CompanyResource: "COMPANY_RESOURCE";
        readonly EventDocumentFromContent: "EVENT_DOCUMENT_FROM_CONTENT";
        readonly EventDocumentFromSearch: "EVENT_DOCUMENT_FROM_SEARCH";
        readonly VisitAffinityScored: "VISIT_AFFINITY_SCORED";
        readonly SuggestedApp: "SUGGESTED_APP";
        readonly SuggestedPerson: "SUGGESTED_PERSON";
        readonly ActivityHighlight: "ACTIVITY_HIGHLIGHT";
        readonly SavedSearch: "SAVED_SEARCH";
        readonly SuggestedChannel: "SUGGESTED_CHANNEL";
        readonly PeopleCelebrations: "PEOPLE_CELEBRATIONS";
        readonly SocialLink: "SOCIAL_LINK";
        readonly ZeroStateChatSuggestion: "ZERO_STATE_CHAT_SUGGESTION";
        readonly ZeroStateChatToolSuggestion: "ZERO_STATE_CHAT_TOOL_SUGGESTION";
        readonly ZeroStatePromptTemplateSuggestion: "ZERO_STATE_PROMPT_TEMPLATE_SUGGESTION";
        readonly ZeroStateStaticWorkflowSuggestion: "ZERO_STATE_STATIC_WORKFLOW_SUGGESTION";
        readonly ZeroStateAgentSuggestion: "ZERO_STATE_AGENT_SUGGESTION";
        readonly PersonalizedChatSuggestion: "PERSONALIZED_CHAT_SUGGESTION";
        readonly DailyDigest: "DAILY_DIGEST";
    }>;
    /** @deprecated use `JustificationType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly FrequentlyAccessed: "FREQUENTLY_ACCESSED";
        readonly RecentlyAccessed: "RECENTLY_ACCESSED";
        readonly TrendingDocument: "TRENDING_DOCUMENT";
        readonly VerificationReminder: "VERIFICATION_REMINDER";
        readonly SuggestedDocument: "SUGGESTED_DOCUMENT";
        readonly EmptyStateSuggestion: "EMPTY_STATE_SUGGESTION";
        readonly FrecencyScored: "FRECENCY_SCORED";
        readonly ServerGenerated: "SERVER_GENERATED";
        readonly UseCase: "USE_CASE";
        readonly UpdateSinceLastView: "UPDATE_SINCE_LAST_VIEW";
        readonly RecentlyStarted: "RECENTLY_STARTED";
        readonly Event: "EVENT";
        readonly UserMention: "USER_MENTION";
        readonly Announcement: "ANNOUNCEMENT";
        readonly ExternalAnnouncement: "EXTERNAL_ANNOUNCEMENT";
        readonly PopularityBasedTrending: "POPULARITY_BASED_TRENDING";
        readonly CompanyResource: "COMPANY_RESOURCE";
        readonly EventDocumentFromContent: "EVENT_DOCUMENT_FROM_CONTENT";
        readonly EventDocumentFromSearch: "EVENT_DOCUMENT_FROM_SEARCH";
        readonly VisitAffinityScored: "VISIT_AFFINITY_SCORED";
        readonly SuggestedApp: "SUGGESTED_APP";
        readonly SuggestedPerson: "SUGGESTED_PERSON";
        readonly ActivityHighlight: "ACTIVITY_HIGHLIGHT";
        readonly SavedSearch: "SAVED_SEARCH";
        readonly SuggestedChannel: "SUGGESTED_CHANNEL";
        readonly PeopleCelebrations: "PEOPLE_CELEBRATIONS";
        readonly SocialLink: "SOCIAL_LINK";
        readonly ZeroStateChatSuggestion: "ZERO_STATE_CHAT_SUGGESTION";
        readonly ZeroStateChatToolSuggestion: "ZERO_STATE_CHAT_TOOL_SUGGESTION";
        readonly ZeroStatePromptTemplateSuggestion: "ZERO_STATE_PROMPT_TEMPLATE_SUGGESTION";
        readonly ZeroStateStaticWorkflowSuggestion: "ZERO_STATE_STATIC_WORKFLOW_SUGGESTION";
        readonly ZeroStateAgentSuggestion: "ZERO_STATE_AGENT_SUGGESTION";
        readonly PersonalizedChatSuggestion: "PERSONALIZED_CHAT_SUGGESTION";
        readonly DailyDigest: "DAILY_DIGEST";
    }>;
}

/** @internal */
declare const JustificationType$inboundSchema: z.ZodNativeEnum<typeof JustificationType>;

/** @internal */
declare const JustificationType$outboundSchema: z.ZodNativeEnum<typeof JustificationType>;

/**
 * Type of the justification.
 */
declare const JustificationType: {
    readonly FrequentlyAccessed: "FREQUENTLY_ACCESSED";
    readonly RecentlyAccessed: "RECENTLY_ACCESSED";
    readonly TrendingDocument: "TRENDING_DOCUMENT";
    readonly VerificationReminder: "VERIFICATION_REMINDER";
    readonly SuggestedDocument: "SUGGESTED_DOCUMENT";
    readonly EmptyStateSuggestion: "EMPTY_STATE_SUGGESTION";
    readonly FrecencyScored: "FRECENCY_SCORED";
    readonly ServerGenerated: "SERVER_GENERATED";
    readonly UseCase: "USE_CASE";
    readonly UpdateSinceLastView: "UPDATE_SINCE_LAST_VIEW";
    readonly RecentlyStarted: "RECENTLY_STARTED";
    readonly Event: "EVENT";
    readonly UserMention: "USER_MENTION";
    readonly Announcement: "ANNOUNCEMENT";
    readonly ExternalAnnouncement: "EXTERNAL_ANNOUNCEMENT";
    readonly PopularityBasedTrending: "POPULARITY_BASED_TRENDING";
    readonly CompanyResource: "COMPANY_RESOURCE";
    readonly EventDocumentFromContent: "EVENT_DOCUMENT_FROM_CONTENT";
    readonly EventDocumentFromSearch: "EVENT_DOCUMENT_FROM_SEARCH";
    readonly VisitAffinityScored: "VISIT_AFFINITY_SCORED";
    readonly SuggestedApp: "SUGGESTED_APP";
    readonly SuggestedPerson: "SUGGESTED_PERSON";
    readonly ActivityHighlight: "ACTIVITY_HIGHLIGHT";
    readonly SavedSearch: "SAVED_SEARCH";
    readonly SuggestedChannel: "SUGGESTED_CHANNEL";
    readonly PeopleCelebrations: "PEOPLE_CELEBRATIONS";
    readonly SocialLink: "SOCIAL_LINK";
    readonly ZeroStateChatSuggestion: "ZERO_STATE_CHAT_SUGGESTION";
    readonly ZeroStateChatToolSuggestion: "ZERO_STATE_CHAT_TOOL_SUGGESTION";
    readonly ZeroStatePromptTemplateSuggestion: "ZERO_STATE_PROMPT_TEMPLATE_SUGGESTION";
    readonly ZeroStateStaticWorkflowSuggestion: "ZERO_STATE_STATIC_WORKFLOW_SUGGESTION";
    readonly ZeroStateAgentSuggestion: "ZERO_STATE_AGENT_SUGGESTION";
    readonly PersonalizedChatSuggestion: "PERSONALIZED_CHAT_SUGGESTION";
    readonly DailyDigest: "DAILY_DIGEST";
};

/**
 * Type of the justification.
 */
declare type JustificationType = ClosedEnum<typeof JustificationType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace KnowledgeType$ {
    /** @deprecated use `KnowledgeType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly NeutralKnowledge: "NEUTRAL_KNOWLEDGE";
        readonly CompanyKnowledge: "COMPANY_KNOWLEDGE";
        readonly WorldKnowledge: "WORLD_KNOWLEDGE";
    }>;
    /** @deprecated use `KnowledgeType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly NeutralKnowledge: "NEUTRAL_KNOWLEDGE";
        readonly CompanyKnowledge: "COMPANY_KNOWLEDGE";
        readonly WorldKnowledge: "WORLD_KNOWLEDGE";
    }>;
}

/** @internal */
declare const KnowledgeType$inboundSchema: z.ZodNativeEnum<typeof KnowledgeType>;

/** @internal */
declare const KnowledgeType$outboundSchema: z.ZodNativeEnum<typeof KnowledgeType>;

/**
 * Indicates the kind of knowledge a tool would access or modify.
 */
declare const KnowledgeType: {
    readonly NeutralKnowledge: "NEUTRAL_KNOWLEDGE";
    readonly CompanyKnowledge: "COMPANY_KNOWLEDGE";
    readonly WorldKnowledge: "WORLD_KNOWLEDGE";
};

/**
 * Indicates the kind of knowledge a tool would access or modify.
 */
declare type KnowledgeType = ClosedEnum<typeof KnowledgeType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace LabeledCountInfo$ {
    /** @deprecated use `LabeledCountInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LabeledCountInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `LabeledCountInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LabeledCountInfo$Outbound, z.ZodTypeDef, LabeledCountInfo>;
    /** @deprecated use `LabeledCountInfo$Outbound` instead. */
    type Outbound = LabeledCountInfo$Outbound;
}

/** @internal */
declare const LabeledCountInfo$inboundSchema: z.ZodType<LabeledCountInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type LabeledCountInfo$Outbound = {
    label: string;
    countInfo?: Array<CountInfo$Outbound> | undefined;
};

/** @internal */
declare const LabeledCountInfo$outboundSchema: z.ZodType<LabeledCountInfo$Outbound, z.ZodTypeDef, LabeledCountInfo>;

declare type LabeledCountInfo = {
    /**
     * Label for the included count information.
     */
    label: string;
    /**
     * List of data points for counts for a given date period.
     */
    countInfo?: Array<CountInfo> | undefined;
};

declare function labeledCountInfoFromJSON(jsonString: string): Result<LabeledCountInfo, SDKValidationError>;

declare function labeledCountInfoToJSON(labeledCountInfo: LabeledCountInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace LastScanStatus$ {
    /** @deprecated use `LastScanStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pending: "PENDING";
        readonly Success: "SUCCESS";
        readonly Failure: "FAILURE";
        readonly Cancelled: "CANCELLED";
        readonly Cancelling: "CANCELLING";
        readonly Active: "ACTIVE";
    }>;
    /** @deprecated use `LastScanStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pending: "PENDING";
        readonly Success: "SUCCESS";
        readonly Failure: "FAILURE";
        readonly Cancelled: "CANCELLED";
        readonly Cancelling: "CANCELLING";
        readonly Active: "ACTIVE";
    }>;
}

/** @internal */
declare const LastScanStatus$inboundSchema: z.ZodNativeEnum<typeof LastScanStatus>;

/** @internal */
declare const LastScanStatus$outboundSchema: z.ZodNativeEnum<typeof LastScanStatus>;

declare const LastScanStatus: {
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Failure: "FAILURE";
    readonly Cancelled: "CANCELLED";
    readonly Cancelling: "CANCELLING";
    readonly Active: "ACTIVE";
};

declare type LastScanStatus = ClosedEnum<typeof LastScanStatus>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace LikelihoodThreshold$ {
    /** @deprecated use `LikelihoodThreshold$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Likely: "LIKELY";
        readonly VeryLikely: "VERY_LIKELY";
    }>;
    /** @deprecated use `LikelihoodThreshold$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Likely: "LIKELY";
        readonly VeryLikely: "VERY_LIKELY";
    }>;
}

/** @internal */
declare const LikelihoodThreshold$inboundSchema: z.ZodNativeEnum<typeof LikelihoodThreshold>;

/** @internal */
declare const LikelihoodThreshold$outboundSchema: z.ZodNativeEnum<typeof LikelihoodThreshold>;

/**
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
declare const LikelihoodThreshold: {
    readonly Likely: "LIKELY";
    readonly VeryLikely: "VERY_LIKELY";
};

/**
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
declare type LikelihoodThreshold = ClosedEnum<typeof LikelihoodThreshold>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListAnswersRequest$ {
    /** @deprecated use `ListAnswersRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListAnswersRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListAnswersRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListAnswersRequest$Outbound, z.ZodTypeDef, ListAnswersRequest>;
    /** @deprecated use `ListAnswersRequest$Outbound` instead. */
    type Outbound = ListAnswersRequest$Outbound;
}

/** @internal */
declare const ListAnswersRequest$inboundSchema: z.ZodType<ListAnswersRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListAnswersRequest$Outbound = {
    boardId?: number | undefined;
};

/** @internal */
declare const ListAnswersRequest$outboundSchema: z.ZodType<ListAnswersRequest$Outbound, z.ZodTypeDef, ListAnswersRequest>;

declare type ListAnswersRequest = {
    /**
     * The Answer Board Id to list answers on.
     */
    boardId?: number | undefined;
};

declare function listAnswersRequestFromJSON(jsonString: string): Result<ListAnswersRequest, SDKValidationError>;

declare function listAnswersRequestToJSON(listAnswersRequest: ListAnswersRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListAnswersResponse$ {
    /** @deprecated use `ListAnswersResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListAnswersResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListAnswersResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListAnswersResponse$Outbound, z.ZodTypeDef, ListAnswersResponse>;
    /** @deprecated use `ListAnswersResponse$Outbound` instead. */
    type Outbound = ListAnswersResponse$Outbound;
}

/** @internal */
declare const ListAnswersResponse$inboundSchema: z.ZodType<ListAnswersResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListAnswersResponse$Outbound = {
    answerResults: Array<AnswerResult$Outbound>;
};

/** @internal */
declare const ListAnswersResponse$outboundSchema: z.ZodType<ListAnswersResponse$Outbound, z.ZodTypeDef, ListAnswersResponse>;

declare type ListAnswersResponse = {
    /**
     * List of answers with tracking tokens.
     */
    answerResults: Array<AnswerResult>;
};

declare function listAnswersResponseFromJSON(jsonString: string): Result<ListAnswersResponse, SDKValidationError>;

declare function listAnswersResponseToJSON(listAnswersResponse: ListAnswersResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListchatsRequest$ {
    /** @deprecated use `ListchatsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListchatsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListchatsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListchatsRequest$Outbound, z.ZodTypeDef, ListchatsRequest>;
    /** @deprecated use `ListchatsRequest$Outbound` instead. */
    type Outbound = ListchatsRequest$Outbound;
}

/** @internal */
declare const ListchatsRequest$inboundSchema: z.ZodType<ListchatsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListchatsRequest$Outbound = {
    timezoneOffset?: number | undefined;
};

/** @internal */
declare const ListchatsRequest$outboundSchema: z.ZodType<ListchatsRequest$Outbound, z.ZodTypeDef, ListchatsRequest>;

declare type ListchatsRequest = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
};

declare function listchatsRequestFromJSON(jsonString: string): Result<ListchatsRequest, SDKValidationError>;

declare function listchatsRequestToJSON(listchatsRequest: ListchatsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListChatsResponse$ {
    /** @deprecated use `ListChatsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListChatsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListChatsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListChatsResponse$Outbound, z.ZodTypeDef, ListChatsResponse>;
    /** @deprecated use `ListChatsResponse$Outbound` instead. */
    type Outbound = ListChatsResponse$Outbound;
}

/** @internal */
declare const ListChatsResponse$inboundSchema: z.ZodType<ListChatsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListChatsResponse$Outbound = {
    chatResults?: Array<ChatMetadataResult$Outbound> | undefined;
};

/** @internal */
declare const ListChatsResponse$outboundSchema: z.ZodType<ListChatsResponse$Outbound, z.ZodTypeDef, ListChatsResponse>;

declare type ListChatsResponse = {
    chatResults?: Array<ChatMetadataResult> | undefined;
};

declare function listChatsResponseFromJSON(jsonString: string): Result<ListChatsResponse, SDKValidationError>;

declare function listChatsResponseToJSON(listChatsResponse: ListChatsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListCollectionsRequest$ {
    /** @deprecated use `ListCollectionsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListCollectionsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListCollectionsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListCollectionsRequest$Outbound, z.ZodTypeDef, ListCollectionsRequest>;
    /** @deprecated use `ListCollectionsRequest$Outbound` instead. */
    type Outbound = ListCollectionsRequest$Outbound;
}

/** @internal */
declare const ListCollectionsRequest$inboundSchema: z.ZodType<ListCollectionsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListCollectionsRequest$Outbound = {
    includeAudience?: boolean | undefined;
    includeRoles?: boolean | undefined;
    allowedDatasource?: string | undefined;
};

/** @internal */
declare const ListCollectionsRequest$outboundSchema: z.ZodType<ListCollectionsRequest$Outbound, z.ZodTypeDef, ListCollectionsRequest>;

declare type ListCollectionsRequest = {
    /**
     * Whether to include the audience filters with the listed Collections.
     */
    includeAudience?: boolean | undefined;
    /**
     * Whether to include the editor roles with the listed Collections.
     */
    includeRoles?: boolean | undefined;
    /**
     * The datasource type this Collection can hold.
     *
     * @remarks
     * ANSWERS - for Collections representing answer boards
     */
    allowedDatasource?: string | undefined;
};

declare function listCollectionsRequestFromJSON(jsonString: string): Result<ListCollectionsRequest, SDKValidationError>;

declare function listCollectionsRequestToJSON(listCollectionsRequest: ListCollectionsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListCollectionsResponse$ {
    /** @deprecated use `ListCollectionsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListCollectionsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListCollectionsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListCollectionsResponse$Outbound, z.ZodTypeDef, ListCollectionsResponse>;
    /** @deprecated use `ListCollectionsResponse$Outbound` instead. */
    type Outbound = ListCollectionsResponse$Outbound;
}

/** @internal */
declare const ListCollectionsResponse$inboundSchema: z.ZodType<ListCollectionsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListCollectionsResponse$Outbound = {
    collections: Array<Collection$Outbound>;
};

/** @internal */
declare const ListCollectionsResponse$outboundSchema: z.ZodType<ListCollectionsResponse$Outbound, z.ZodTypeDef, ListCollectionsResponse>;

declare type ListCollectionsResponse = {
    /**
     * List of all Collections, no Collection items are fetched.
     */
    collections: Array<Collection>;
};

declare function listCollectionsResponseFromJSON(jsonString: string): Result<ListCollectionsResponse, SDKValidationError>;

declare function listCollectionsResponseToJSON(listCollectionsResponse: ListCollectionsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListDlpReportsResponse$ {
    /** @deprecated use `ListDlpReportsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListDlpReportsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListDlpReportsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListDlpReportsResponse$Outbound, z.ZodTypeDef, ListDlpReportsResponse>;
    /** @deprecated use `ListDlpReportsResponse$Outbound` instead. */
    type Outbound = ListDlpReportsResponse$Outbound;
}

/** @internal */
declare const ListDlpReportsResponse$inboundSchema: z.ZodType<ListDlpReportsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListDlpReportsResponse$Outbound = {
    reports?: Array<DlpReport$Outbound> | undefined;
};

/** @internal */
declare const ListDlpReportsResponse$outboundSchema: z.ZodType<ListDlpReportsResponse$Outbound, z.ZodTypeDef, ListDlpReportsResponse>;

declare type ListDlpReportsResponse = {
    reports?: Array<DlpReport> | undefined;
};

declare function listDlpReportsResponseFromJSON(jsonString: string): Result<ListDlpReportsResponse, SDKValidationError>;

declare function listDlpReportsResponseToJSON(listDlpReportsResponse: ListDlpReportsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListEntitiesRequest$ {
    /** @deprecated use `ListEntitiesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListEntitiesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListEntitiesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListEntitiesRequest$Outbound, z.ZodTypeDef, ListEntitiesRequest>;
    /** @deprecated use `ListEntitiesRequest$Outbound` instead. */
    type Outbound = ListEntitiesRequest$Outbound;
}

/** @internal */
declare const ListEntitiesRequest$inboundSchema: z.ZodType<ListEntitiesRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListEntitiesRequest$Outbound = {
    filter?: Array<FacetFilter$Outbound> | undefined;
    sort?: Array<SortOptions$Outbound> | undefined;
    entityType: string;
    datasource?: string | undefined;
    query?: string | undefined;
    includeFields?: Array<string> | undefined;
    pageSize?: number | undefined;
    cursor?: string | undefined;
    source?: string | undefined;
    requestType: string;
};

/** @internal */
declare const ListEntitiesRequest$outboundSchema: z.ZodType<ListEntitiesRequest$Outbound, z.ZodTypeDef, ListEntitiesRequest>;

declare type ListEntitiesRequest = {
    filter?: Array<FacetFilter> | undefined;
    /**
     * Use EntitiesSortOrder enum for SortOptions.sortBy
     */
    sort?: Array<SortOptions> | undefined;
    entityType?: ListEntitiesRequestEntityType | undefined;
    /**
     * The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES
     */
    datasource?: string | undefined;
    /**
     * A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities.
     */
    query?: string | undefined;
    /**
     * List of entity fields to return (that aren't returned by default)
     */
    includeFields?: Array<ListEntitiesRequestIncludeField> | undefined;
    /**
     * Hint to the server about how many results to send back. Server may return less.
     */
    pageSize?: number | undefined;
    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    cursor?: string | undefined;
    /**
     * A string denoting the search surface from which the endpoint is called.
     */
    source?: string | undefined;
    /**
     * The type of request being made.
     */
    requestType?: RequestType | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListEntitiesRequestEntityType$ {
    /** @deprecated use `ListEntitiesRequestEntityType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly People: "PEOPLE";
        readonly Teams: "TEAMS";
        readonly CustomEntities: "CUSTOM_ENTITIES";
    }>;
    /** @deprecated use `ListEntitiesRequestEntityType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly People: "PEOPLE";
        readonly Teams: "TEAMS";
        readonly CustomEntities: "CUSTOM_ENTITIES";
    }>;
}

/** @internal */
declare const ListEntitiesRequestEntityType$inboundSchema: z.ZodNativeEnum<typeof ListEntitiesRequestEntityType>;

/** @internal */
declare const ListEntitiesRequestEntityType$outboundSchema: z.ZodNativeEnum<typeof ListEntitiesRequestEntityType>;

declare const ListEntitiesRequestEntityType: {
    readonly People: "PEOPLE";
    readonly Teams: "TEAMS";
    readonly CustomEntities: "CUSTOM_ENTITIES";
};

declare type ListEntitiesRequestEntityType = ClosedEnum<typeof ListEntitiesRequestEntityType>;

declare function listEntitiesRequestFromJSON(jsonString: string): Result<ListEntitiesRequest, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListEntitiesRequestIncludeField$ {
    /** @deprecated use `ListEntitiesRequestIncludeField$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly People: "PEOPLE";
        readonly Teams: "TEAMS";
        readonly PeopleDistance: "PEOPLE_DISTANCE";
        readonly Permissions: "PERMISSIONS";
        readonly Facets: "FACETS";
        readonly InviteInfo: "INVITE_INFO";
        readonly LastExtensionUse: "LAST_EXTENSION_USE";
        readonly ManagementDetails: "MANAGEMENT_DETAILS";
        readonly UnprocessedTeams: "UNPROCESSED_TEAMS";
    }>;
    /** @deprecated use `ListEntitiesRequestIncludeField$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly People: "PEOPLE";
        readonly Teams: "TEAMS";
        readonly PeopleDistance: "PEOPLE_DISTANCE";
        readonly Permissions: "PERMISSIONS";
        readonly Facets: "FACETS";
        readonly InviteInfo: "INVITE_INFO";
        readonly LastExtensionUse: "LAST_EXTENSION_USE";
        readonly ManagementDetails: "MANAGEMENT_DETAILS";
        readonly UnprocessedTeams: "UNPROCESSED_TEAMS";
    }>;
}

/** @internal */
declare const ListEntitiesRequestIncludeField$inboundSchema: z.ZodNativeEnum<typeof ListEntitiesRequestIncludeField>;

/** @internal */
declare const ListEntitiesRequestIncludeField$outboundSchema: z.ZodNativeEnum<typeof ListEntitiesRequestIncludeField>;

declare const ListEntitiesRequestIncludeField: {
    readonly People: "PEOPLE";
    readonly Teams: "TEAMS";
    readonly PeopleDistance: "PEOPLE_DISTANCE";
    readonly Permissions: "PERMISSIONS";
    readonly Facets: "FACETS";
    readonly InviteInfo: "INVITE_INFO";
    readonly LastExtensionUse: "LAST_EXTENSION_USE";
    readonly ManagementDetails: "MANAGEMENT_DETAILS";
    readonly UnprocessedTeams: "UNPROCESSED_TEAMS";
};

declare type ListEntitiesRequestIncludeField = ClosedEnum<typeof ListEntitiesRequestIncludeField>;

declare function listEntitiesRequestToJSON(listEntitiesRequest: ListEntitiesRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListEntitiesResponse$ {
    /** @deprecated use `ListEntitiesResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListEntitiesResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListEntitiesResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListEntitiesResponse$Outbound, z.ZodTypeDef, ListEntitiesResponse>;
    /** @deprecated use `ListEntitiesResponse$Outbound` instead. */
    type Outbound = ListEntitiesResponse$Outbound;
}

/** @internal */
declare const ListEntitiesResponse$inboundSchema: z.ZodType<ListEntitiesResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListEntitiesResponse$Outbound = {
    results?: Array<Person$Outbound> | undefined;
    teamResults?: Array<Team$Outbound> | undefined;
    customEntityResults?: Array<CustomEntity$Outbound> | undefined;
    facetResults?: Array<FacetResult$Outbound> | undefined;
    cursor?: string | undefined;
    totalCount?: number | undefined;
    hasMoreResults?: boolean | undefined;
    sortOptions?: Array<string> | undefined;
    customFacetNames?: Array<string> | undefined;
};

/** @internal */
declare const ListEntitiesResponse$outboundSchema: z.ZodType<ListEntitiesResponse$Outbound, z.ZodTypeDef, ListEntitiesResponse>;

declare type ListEntitiesResponse = {
    results?: Array<Person> | undefined;
    teamResults?: Array<Team> | undefined;
    customEntityResults?: Array<CustomEntity> | undefined;
    facetResults?: Array<FacetResult> | undefined;
    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    cursor?: string | undefined;
    /**
     * The total number of entities available
     */
    totalCount?: number | undefined;
    /**
     * Whether or not more entities can be fetched.
     */
    hasMoreResults?: boolean | undefined;
    /**
     * Sort options from EntitiesSortOrder supported for this response. Default is empty list.
     */
    sortOptions?: Array<EntitiesSortOrder> | undefined;
    /**
     * list of Person attributes that are custom setup by deployment
     */
    customFacetNames?: Array<string> | undefined;
};

declare function listEntitiesResponseFromJSON(jsonString: string): Result<ListEntitiesResponse, SDKValidationError>;

declare function listEntitiesResponseToJSON(listEntitiesResponse: ListEntitiesResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListpinsRequest$ {
    /** @deprecated use `ListpinsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListpinsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListpinsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListpinsRequest$Outbound, z.ZodTypeDef, ListpinsRequest>;
    /** @deprecated use `ListpinsRequest$Outbound` instead. */
    type Outbound = ListpinsRequest$Outbound;
}

/** @internal */
declare const ListpinsRequest$inboundSchema: z.ZodType<ListpinsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListpinsRequest$Outbound = {};

/** @internal */
declare const ListpinsRequest$outboundSchema: z.ZodType<ListpinsRequest$Outbound, z.ZodTypeDef, ListpinsRequest>;

/**
 * List pins request
 */
declare type ListpinsRequest = {};

declare function listpinsRequestFromJSON(jsonString: string): Result<ListpinsRequest, SDKValidationError>;

declare function listpinsRequestToJSON(listpinsRequest: ListpinsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListPinsResponse$ {
    /** @deprecated use `ListPinsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListPinsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListPinsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListPinsResponse$Outbound, z.ZodTypeDef, ListPinsResponse>;
    /** @deprecated use `ListPinsResponse$Outbound` instead. */
    type Outbound = ListPinsResponse$Outbound;
}

/** @internal */
declare const ListPinsResponse$inboundSchema: z.ZodType<ListPinsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListPinsResponse$Outbound = {
    pins: Array<PinDocument$Outbound>;
};

/** @internal */
declare const ListPinsResponse$outboundSchema: z.ZodType<ListPinsResponse$Outbound, z.ZodTypeDef, ListPinsResponse>;

declare type ListPinsResponse = {
    /**
     * List of pinned documents.
     */
    pins: Array<PinDocument>;
};

declare function listPinsResponseFromJSON(jsonString: string): Result<ListPinsResponse, SDKValidationError>;

declare function listPinsResponseToJSON(listPinsResponse: ListPinsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListpoliciesRequest$ {
    /** @deprecated use `ListpoliciesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListpoliciesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListpoliciesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListpoliciesRequest$Outbound, z.ZodTypeDef, ListpoliciesRequest>;
    /** @deprecated use `ListpoliciesRequest$Outbound` instead. */
    type Outbound = ListpoliciesRequest$Outbound;
}

/** @internal */
declare const ListpoliciesRequest$inboundSchema: z.ZodType<ListpoliciesRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListpoliciesRequest$Outbound = {
    autoHide?: boolean | undefined;
    frequency?: string | undefined;
};

/** @internal */
declare const ListpoliciesRequest$outboundSchema: z.ZodType<ListpoliciesRequest$Outbound, z.ZodTypeDef, ListpoliciesRequest>;

declare type ListpoliciesRequest = {
    /**
     * Filter to return reports with a given value of auto-hide.
     */
    autoHide?: boolean | undefined;
    /**
     * Filter to return reports with a given frequency.
     */
    frequency?: string | undefined;
};

declare function listpoliciesRequestFromJSON(jsonString: string): Result<ListpoliciesRequest, SDKValidationError>;

declare function listpoliciesRequestToJSON(listpoliciesRequest: ListpoliciesRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListShortcutsPaginatedRequest$ {
    /** @deprecated use `ListShortcutsPaginatedRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListShortcutsPaginatedRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListShortcutsPaginatedRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListShortcutsPaginatedRequest$Outbound, z.ZodTypeDef, ListShortcutsPaginatedRequest>;
    /** @deprecated use `ListShortcutsPaginatedRequest$Outbound` instead. */
    type Outbound = ListShortcutsPaginatedRequest$Outbound;
}

/** @internal */
declare const ListShortcutsPaginatedRequest$inboundSchema: z.ZodType<ListShortcutsPaginatedRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListShortcutsPaginatedRequest$Outbound = {
    includeFields?: Array<string> | undefined;
    pageSize: number;
    cursor?: string | undefined;
    filters?: Array<FacetFilter$Outbound> | undefined;
    sort?: SortOptions$Outbound | undefined;
    query?: string | undefined;
};

/** @internal */
declare const ListShortcutsPaginatedRequest$outboundSchema: z.ZodType<ListShortcutsPaginatedRequest$Outbound, z.ZodTypeDef, ListShortcutsPaginatedRequest>;

declare type ListShortcutsPaginatedRequest = {
    /**
     * Array of fields/data to be included in response that are not included by default
     */
    includeFields?: Array<ListShortcutsPaginatedRequestIncludeField> | undefined;
    pageSize: number;
    /**
     * A token specifying the position in the overall results to start at. Received from the endpoint and iterated back. Currently being used as page no (as we implement offset pagination)
     */
    cursor?: string | undefined;
    /**
     * A list of filters for the query. An AND is assumed between different filters. We support filters on Go Link name, author, department and type.
     */
    filters?: Array<FacetFilter> | undefined;
    sort?: SortOptions | undefined;
    /**
     * Search query that should be a substring in atleast one of the fields (alias , inputAlias, destinationUrl, description). Empty query does not filter shortcuts.
     */
    query?: string | undefined;
};

declare function listShortcutsPaginatedRequestFromJSON(jsonString: string): Result<ListShortcutsPaginatedRequest, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListShortcutsPaginatedRequestIncludeField$ {
    /** @deprecated use `ListShortcutsPaginatedRequestIncludeField$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Facets: "FACETS";
        readonly PeopleDetails: "PEOPLE_DETAILS";
    }>;
    /** @deprecated use `ListShortcutsPaginatedRequestIncludeField$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Facets: "FACETS";
        readonly PeopleDetails: "PEOPLE_DETAILS";
    }>;
}

/** @internal */
declare const ListShortcutsPaginatedRequestIncludeField$inboundSchema: z.ZodNativeEnum<typeof ListShortcutsPaginatedRequestIncludeField>;

/** @internal */
declare const ListShortcutsPaginatedRequestIncludeField$outboundSchema: z.ZodNativeEnum<typeof ListShortcutsPaginatedRequestIncludeField>;

declare const ListShortcutsPaginatedRequestIncludeField: {
    readonly Facets: "FACETS";
    readonly PeopleDetails: "PEOPLE_DETAILS";
};

declare type ListShortcutsPaginatedRequestIncludeField = ClosedEnum<typeof ListShortcutsPaginatedRequestIncludeField>;

declare function listShortcutsPaginatedRequestToJSON(listShortcutsPaginatedRequest: ListShortcutsPaginatedRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListShortcutsPaginatedResponse$ {
    /** @deprecated use `ListShortcutsPaginatedResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListShortcutsPaginatedResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListShortcutsPaginatedResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListShortcutsPaginatedResponse$Outbound, z.ZodTypeDef, ListShortcutsPaginatedResponse>;
    /** @deprecated use `ListShortcutsPaginatedResponse$Outbound` instead. */
    type Outbound = ListShortcutsPaginatedResponse$Outbound;
}

/** @internal */
declare const ListShortcutsPaginatedResponse$inboundSchema: z.ZodType<ListShortcutsPaginatedResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListShortcutsPaginatedResponse$Outbound = {
    shortcuts: Array<Shortcut$Outbound>;
    facetResults?: Array<FacetResult$Outbound> | undefined;
    meta: ShortcutsPaginationMetadata$Outbound;
};

/** @internal */
declare const ListShortcutsPaginatedResponse$outboundSchema: z.ZodType<ListShortcutsPaginatedResponse$Outbound, z.ZodTypeDef, ListShortcutsPaginatedResponse>;

declare type ListShortcutsPaginatedResponse = {
    /**
     * List of all shortcuts accessible to the user
     */
    shortcuts: Array<Shortcut>;
    facetResults?: Array<FacetResult> | undefined;
    meta: ShortcutsPaginationMetadata;
};

declare function listShortcutsPaginatedResponseFromJSON(jsonString: string): Result<ListShortcutsPaginatedResponse, SDKValidationError>;

declare function listShortcutsPaginatedResponseToJSON(listShortcutsPaginatedResponse: ListShortcutsPaginatedResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ListverificationsRequest$ {
    /** @deprecated use `ListverificationsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListverificationsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListverificationsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListverificationsRequest$Outbound, z.ZodTypeDef, ListverificationsRequest>;
    /** @deprecated use `ListverificationsRequest$Outbound` instead. */
    type Outbound = ListverificationsRequest$Outbound;
}

/** @internal */
declare const ListverificationsRequest$inboundSchema: z.ZodType<ListverificationsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ListverificationsRequest$Outbound = {
    count?: number | undefined;
};

/** @internal */
declare const ListverificationsRequest$outboundSchema: z.ZodType<ListverificationsRequest$Outbound, z.ZodTypeDef, ListverificationsRequest>;

declare type ListverificationsRequest = {
    /**
     * Maximum number of documents to return
     */
    count?: number | undefined;
};

declare function listverificationsRequestFromJSON(jsonString: string): Result<ListverificationsRequest, SDKValidationError>;

declare function listverificationsRequestToJSON(listverificationsRequest: ListverificationsRequest): string;

declare interface Logger {
    group(label?: string): void;
    groupEnd(): void;
    log(message: any, ...args: any[]): void;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ManualFeedbackInfo$ {
    /** @deprecated use `ManualFeedbackInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ManualFeedbackInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `ManualFeedbackInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ManualFeedbackInfo$Outbound, z.ZodTypeDef, ManualFeedbackInfo>;
    /** @deprecated use `ManualFeedbackInfo$Outbound` instead. */
    type Outbound = ManualFeedbackInfo$Outbound;
}

/** @internal */
declare const ManualFeedbackInfo$inboundSchema: z.ZodType<ManualFeedbackInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type ManualFeedbackInfo$Outbound = {
    email?: string | undefined;
    source?: string | undefined;
    issue?: string | undefined;
    issues?: Array<string> | undefined;
    imageUrls?: Array<string> | undefined;
    query?: string | undefined;
    obscuredQuery?: string | undefined;
    activeTab?: string | undefined;
    comments?: string | undefined;
    searchResults?: Array<string> | undefined;
    previousMessages?: Array<string> | undefined;
    chatTranscript?: Array<FeedbackChatExchange$Outbound> | undefined;
    numQueriesFromFirstRun?: number | undefined;
    vote?: string | undefined;
    rating?: number | undefined;
    ratingKey?: string | undefined;
    ratingScale?: number | undefined;
};

/** @internal */
declare const ManualFeedbackInfo$outboundSchema: z.ZodType<ManualFeedbackInfo$Outbound, z.ZodTypeDef, ManualFeedbackInfo>;

declare type ManualFeedbackInfo = {
    /**
     * The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    email?: string | undefined;
    /**
     * The source associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    source?: ManualFeedbackInfoSource | undefined;
    /**
     * The issue the user indicated in the feedback.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    issue?: string | undefined;
    /**
     * The issue(s) the user indicated in the feedback.
     */
    issues?: Array<Issue> | undefined;
    /**
     * URLs of images uploaded by user when providing feedback
     */
    imageUrls?: Array<string> | undefined;
    /**
     * The query associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    query?: string | undefined;
    /**
     * The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.
     */
    obscuredQuery?: string | undefined;
    /**
     * Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.
     */
    activeTab?: string | undefined;
    /**
     * The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.
     */
    comments?: string | undefined;
    /**
     * The array of search result Glean Document IDs, ordered by top to bottom result.
     */
    searchResults?: Array<string> | undefined;
    /**
     * The array of previous messages in a chat session, ordered by oldest to newest.
     */
    previousMessages?: Array<string> | undefined;
    /**
     * Array of previous request/response exchanges, ordered by oldest to newest.
     */
    chatTranscript?: Array<FeedbackChatExchange> | undefined;
    /**
     * How many times this query has been run in the past.
     */
    numQueriesFromFirstRun?: number | undefined;
    /**
     * The vote associated with the Feedback.event.MANUAL_FEEDBACK event.
     */
    vote?: ManualFeedbackInfoVote | undefined;
    /**
     * A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.
     */
    rating?: number | undefined;
    /**
     * A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".
     */
    ratingKey?: string | undefined;
    /**
     * The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.
     */
    ratingScale?: number | undefined;
};

declare function manualFeedbackInfoFromJSON(jsonString: string): Result<ManualFeedbackInfo, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ManualFeedbackInfoSource$ {
    /** @deprecated use `ManualFeedbackInfoSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Autocomplete: "AUTOCOMPLETE";
        readonly Calendar: "CALENDAR";
        readonly Chat: "CHAT";
        readonly ChatGeneral: "CHAT_GENERAL";
        readonly ConceptCard: "CONCEPT_CARD";
        readonly DesktopApp: "DESKTOP_APP";
        readonly DisambiguationCard: "DISAMBIGUATION_CARD";
        readonly ExpertDetection: "EXPERT_DETECTION";
        readonly Feed: "FEED";
        readonly GeneratedQAndA: "GENERATED_Q_AND_A";
        readonly InlineMenu: "INLINE_MENU";
        readonly NativeResult: "NATIVE_RESULT";
        readonly QAndA: "Q_AND_A";
        readonly RelatedQuestions: "RELATED_QUESTIONS";
        readonly ReportIssue: "REPORT_ISSUE";
        readonly Sciobot: "SCIOBOT";
        readonly Search: "SEARCH";
        readonly Sidebar: "SIDEBAR";
        readonly Summary: "SUMMARY";
        readonly Tasks: "TASKS";
    }>;
    /** @deprecated use `ManualFeedbackInfoSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Autocomplete: "AUTOCOMPLETE";
        readonly Calendar: "CALENDAR";
        readonly Chat: "CHAT";
        readonly ChatGeneral: "CHAT_GENERAL";
        readonly ConceptCard: "CONCEPT_CARD";
        readonly DesktopApp: "DESKTOP_APP";
        readonly DisambiguationCard: "DISAMBIGUATION_CARD";
        readonly ExpertDetection: "EXPERT_DETECTION";
        readonly Feed: "FEED";
        readonly GeneratedQAndA: "GENERATED_Q_AND_A";
        readonly InlineMenu: "INLINE_MENU";
        readonly NativeResult: "NATIVE_RESULT";
        readonly QAndA: "Q_AND_A";
        readonly RelatedQuestions: "RELATED_QUESTIONS";
        readonly ReportIssue: "REPORT_ISSUE";
        readonly Sciobot: "SCIOBOT";
        readonly Search: "SEARCH";
        readonly Sidebar: "SIDEBAR";
        readonly Summary: "SUMMARY";
        readonly Tasks: "TASKS";
    }>;
}

/** @internal */
declare const ManualFeedbackInfoSource$inboundSchema: z.ZodNativeEnum<typeof ManualFeedbackInfoSource>;

/** @internal */
declare const ManualFeedbackInfoSource$outboundSchema: z.ZodNativeEnum<typeof ManualFeedbackInfoSource>;

/**
 * The source associated with the Feedback.event.MANUAL_FEEDBACK event.
 */
declare const ManualFeedbackInfoSource: {
    readonly Autocomplete: "AUTOCOMPLETE";
    readonly Calendar: "CALENDAR";
    readonly Chat: "CHAT";
    readonly ChatGeneral: "CHAT_GENERAL";
    readonly ConceptCard: "CONCEPT_CARD";
    readonly DesktopApp: "DESKTOP_APP";
    readonly DisambiguationCard: "DISAMBIGUATION_CARD";
    readonly ExpertDetection: "EXPERT_DETECTION";
    readonly Feed: "FEED";
    readonly GeneratedQAndA: "GENERATED_Q_AND_A";
    readonly InlineMenu: "INLINE_MENU";
    readonly NativeResult: "NATIVE_RESULT";
    readonly QAndA: "Q_AND_A";
    readonly RelatedQuestions: "RELATED_QUESTIONS";
    readonly ReportIssue: "REPORT_ISSUE";
    readonly Sciobot: "SCIOBOT";
    readonly Search: "SEARCH";
    readonly Sidebar: "SIDEBAR";
    readonly Summary: "SUMMARY";
    readonly Tasks: "TASKS";
};

/**
 * The source associated with the Feedback.event.MANUAL_FEEDBACK event.
 */
declare type ManualFeedbackInfoSource = ClosedEnum<typeof ManualFeedbackInfoSource>;

declare function manualFeedbackInfoToJSON(manualFeedbackInfo: ManualFeedbackInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ManualFeedbackInfoVote$ {
    /** @deprecated use `ManualFeedbackInfoVote$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Upvote: "UPVOTE";
        readonly Downvote: "DOWNVOTE";
    }>;
    /** @deprecated use `ManualFeedbackInfoVote$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Upvote: "UPVOTE";
        readonly Downvote: "DOWNVOTE";
    }>;
}

/** @internal */
declare const ManualFeedbackInfoVote$inboundSchema: z.ZodNativeEnum<typeof ManualFeedbackInfoVote>;

/** @internal */
declare const ManualFeedbackInfoVote$outboundSchema: z.ZodNativeEnum<typeof ManualFeedbackInfoVote>;

/**
 * The vote associated with the Feedback.event.MANUAL_FEEDBACK event.
 */
declare const ManualFeedbackInfoVote: {
    readonly Upvote: "UPVOTE";
    readonly Downvote: "DOWNVOTE";
};

/**
 * The vote associated with the Feedback.event.MANUAL_FEEDBACK event.
 */
declare type ManualFeedbackInfoVote = ClosedEnum<typeof ManualFeedbackInfoVote>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ManualFeedbackSideBySideInfo$ {
    /** @deprecated use `ManualFeedbackSideBySideInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ManualFeedbackSideBySideInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `ManualFeedbackSideBySideInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ManualFeedbackSideBySideInfo$Outbound, z.ZodTypeDef, ManualFeedbackSideBySideInfo>;
    /** @deprecated use `ManualFeedbackSideBySideInfo$Outbound` instead. */
    type Outbound = ManualFeedbackSideBySideInfo$Outbound;
}

/** @internal */
declare const ManualFeedbackSideBySideInfo$inboundSchema: z.ZodType<ManualFeedbackSideBySideInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type ManualFeedbackSideBySideInfo$Outbound = {
    email?: string | undefined;
    source?: string | undefined;
    query?: string | undefined;
    implementations?: Array<SideBySideImplementation$Outbound> | undefined;
    evaluationSessionId?: string | undefined;
    implementationId?: string | undefined;
    vote?: string | undefined;
    comments?: string | undefined;
};

/** @internal */
declare const ManualFeedbackSideBySideInfo$outboundSchema: z.ZodType<ManualFeedbackSideBySideInfo$Outbound, z.ZodTypeDef, ManualFeedbackSideBySideInfo>;

declare type ManualFeedbackSideBySideInfo = {
    /**
     * The email address of the user who submitted the side-by-side feedback.
     */
    email?: string | undefined;
    /**
     * The source associated with the side-by-side feedback event.
     */
    source?: ManualFeedbackSideBySideInfoSource | undefined;
    /**
     * The query or prompt that was evaluated across multiple implementations.
     */
    query?: string | undefined;
    /**
     * Array of implementations that were compared side-by-side.
     */
    implementations?: Array<SideBySideImplementation> | undefined;
    /**
     * Unique identifier for this evaluation session to group related feedback events.
     */
    evaluationSessionId?: string | undefined;
    /**
     * The ID of the implementation this specific feedback event is for.
     */
    implementationId?: string | undefined;
    /**
     * The vote for this specific implementation.
     */
    vote?: ManualFeedbackSideBySideInfoVote | undefined;
    /**
     * Specific feedback comments for this implementation.
     */
    comments?: string | undefined;
};

declare function manualFeedbackSideBySideInfoFromJSON(jsonString: string): Result<ManualFeedbackSideBySideInfo, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ManualFeedbackSideBySideInfoSource$ {
    /** @deprecated use `ManualFeedbackSideBySideInfoSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly LiveEval: "LIVE_EVAL";
        readonly Chat: "CHAT";
        readonly Search: "SEARCH";
    }>;
    /** @deprecated use `ManualFeedbackSideBySideInfoSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly LiveEval: "LIVE_EVAL";
        readonly Chat: "CHAT";
        readonly Search: "SEARCH";
    }>;
}

/** @internal */
declare const ManualFeedbackSideBySideInfoSource$inboundSchema: z.ZodNativeEnum<typeof ManualFeedbackSideBySideInfoSource>;

/** @internal */
declare const ManualFeedbackSideBySideInfoSource$outboundSchema: z.ZodNativeEnum<typeof ManualFeedbackSideBySideInfoSource>;

/**
 * The source associated with the side-by-side feedback event.
 */
declare const ManualFeedbackSideBySideInfoSource: {
    readonly LiveEval: "LIVE_EVAL";
    readonly Chat: "CHAT";
    readonly Search: "SEARCH";
};

/**
 * The source associated with the side-by-side feedback event.
 */
declare type ManualFeedbackSideBySideInfoSource = ClosedEnum<typeof ManualFeedbackSideBySideInfoSource>;

declare function manualFeedbackSideBySideInfoToJSON(manualFeedbackSideBySideInfo: ManualFeedbackSideBySideInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ManualFeedbackSideBySideInfoVote$ {
    /** @deprecated use `ManualFeedbackSideBySideInfoVote$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Upvote: "UPVOTE";
        readonly Downvote: "DOWNVOTE";
        readonly Neutral: "NEUTRAL";
    }>;
    /** @deprecated use `ManualFeedbackSideBySideInfoVote$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Upvote: "UPVOTE";
        readonly Downvote: "DOWNVOTE";
        readonly Neutral: "NEUTRAL";
    }>;
}

/** @internal */
declare const ManualFeedbackSideBySideInfoVote$inboundSchema: z.ZodNativeEnum<typeof ManualFeedbackSideBySideInfoVote>;

/** @internal */
declare const ManualFeedbackSideBySideInfoVote$outboundSchema: z.ZodNativeEnum<typeof ManualFeedbackSideBySideInfoVote>;

/**
 * The vote for this specific implementation.
 */
declare const ManualFeedbackSideBySideInfoVote: {
    readonly Upvote: "UPVOTE";
    readonly Downvote: "DOWNVOTE";
    readonly Neutral: "NEUTRAL";
};

/**
 * The vote for this specific implementation.
 */
declare type ManualFeedbackSideBySideInfoVote = ClosedEnum<typeof ManualFeedbackSideBySideInfoVote>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Meeting$ {
    /** @deprecated use `Meeting$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Meeting, z.ZodTypeDef, unknown>;
    /** @deprecated use `Meeting$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Meeting$Outbound, z.ZodTypeDef, Meeting>;
    /** @deprecated use `Meeting$Outbound` instead. */
    type Outbound = Meeting$Outbound;
}

/** @internal */
declare const Meeting$inboundSchema: z.ZodType<Meeting, z.ZodTypeDef, unknown>;

/** @internal */
declare type Meeting$Outbound = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    url?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    attendees?: CalendarAttendees$Outbound | undefined;
};

/** @internal */
declare const Meeting$outboundSchema: z.ZodType<Meeting$Outbound, z.ZodTypeDef, Meeting>;

declare type Meeting = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    url?: string | undefined;
    startTime?: Date | undefined;
    endTime?: Date | undefined;
    attendees?: CalendarAttendees | undefined;
};

declare function meetingFromJSON(jsonString: string): Result<Meeting, SDKValidationError>;

declare function meetingToJSON(meeting: Meeting): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Message$ {
    /** @deprecated use `Message$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown>;
    /** @deprecated use `Message$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Message$Outbound, z.ZodTypeDef, Message>;
    /** @deprecated use `Message$Outbound` instead. */
    type Outbound = Message$Outbound;
}

/** @internal */
declare const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown>;

/** @internal */
declare type Message$Outbound = {
    role?: string | undefined;
    content?: Array<MessageTextBlock$Outbound> | undefined;
};

/** @internal */
declare const Message$outboundSchema: z.ZodType<Message$Outbound, z.ZodTypeDef, Message>;

declare type Message = {
    /**
     * The role of the message.
     */
    role?: string | undefined;
    /**
     * The content of the message.
     */
    content?: Array<MessageTextBlock> | undefined;
};

declare function messageFromJSON(jsonString: string): Result<Message, SDKValidationError>;

declare class Messages extends ClientSDK {
    /**
     * Read messages
     *
     * @remarks
     * Retrieves list of messages from messaging/chat datasources (e.g. Slack, Teams).
     */
    retrieve(request: components.MessagesRequest, options?: RequestOptions): Promise<components.MessagesResponse>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace MessagesRequest$ {
    /** @deprecated use `MessagesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MessagesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `MessagesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MessagesRequest$Outbound, z.ZodTypeDef, MessagesRequest>;
    /** @deprecated use `MessagesRequest$Outbound` instead. */
    type Outbound = MessagesRequest$Outbound;
}

/** @internal */
declare const MessagesRequest$inboundSchema: z.ZodType<MessagesRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type MessagesRequest$Outbound = {
    idType: string;
    id: string;
    workspaceId?: string | undefined;
    direction?: string | undefined;
    timestampMillis?: number | undefined;
    includeRootMessage?: boolean | undefined;
    datasource?: string | undefined;
    datasourceInstanceDisplayName?: string | undefined;
};

/** @internal */
declare const MessagesRequest$outboundSchema: z.ZodType<MessagesRequest$Outbound, z.ZodTypeDef, MessagesRequest>;

declare type MessagesRequest = {
    /**
     * Type of the id in the incoming request.
     */
    idType: IdType;
    /**
     * ID corresponding to the requested idType. Note that channel and threads are represented by the underlying datasource's ID and conversations are represented by their document's ID.
     */
    id: string;
    /**
     * Id for the for the workspace in case of multiple workspaces.
     */
    workspaceId?: string | undefined;
    /**
     * The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
     */
    direction?: Direction | undefined;
    /**
     * Timestamp in millis of the reference message. Only applicable when using a message_id.
     */
    timestampMillis?: number | undefined;
    /**
     * Whether to include root message in response.
     */
    includeRootMessage?: boolean | undefined;
    /**
     * The type of the data source. Missing field defaults to SLACK.
     */
    datasource?: Datasource | undefined;
    /**
     * The datasource instance display name from which the document was extracted. This is used for appinstance facet filter for datasources that support multiple instances.
     */
    datasourceInstanceDisplayName?: string | undefined;
};

declare function messagesRequestFromJSON(jsonString: string): Result<MessagesRequest, SDKValidationError>;

declare function messagesRequestToJSON(messagesRequest: MessagesRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace MessagesResponse$ {
    /** @deprecated use `MessagesResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MessagesResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `MessagesResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MessagesResponse$Outbound, z.ZodTypeDef, MessagesResponse>;
    /** @deprecated use `MessagesResponse$Outbound` instead. */
    type Outbound = MessagesResponse$Outbound;
}

/** @internal */
declare const MessagesResponse$inboundSchema: z.ZodType<MessagesResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type MessagesResponse$Outbound = {
    hasMore: boolean;
    searchResponse?: SearchResponse$Outbound | undefined;
    rootMessage?: SearchResult$Outbound | undefined;
};

/** @internal */
declare const MessagesResponse$outboundSchema: z.ZodType<MessagesResponse$Outbound, z.ZodTypeDef, MessagesResponse>;

declare type MessagesResponse = {
    /**
     * Whether there are more results for client to continue requesting.
     */
    hasMore: boolean;
    searchResponse?: SearchResponse | undefined;
    rootMessage?: SearchResult | undefined;
};

declare function messagesResponseFromJSON(jsonString: string): Result<MessagesResponse, SDKValidationError>;

declare function messagesResponseToJSON(messagesResponse: MessagesResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace MessageTextBlock$ {
    /** @deprecated use `MessageTextBlock$inboundSchema` instead. */
    const inboundSchema: z.ZodType<MessageTextBlock, z.ZodTypeDef, unknown>;
    /** @deprecated use `MessageTextBlock$outboundSchema` instead. */
    const outboundSchema: z.ZodType<MessageTextBlock$Outbound, z.ZodTypeDef, MessageTextBlock>;
    /** @deprecated use `MessageTextBlock$Outbound` instead. */
    type Outbound = MessageTextBlock$Outbound;
}

/** @internal */
declare const MessageTextBlock$inboundSchema: z.ZodType<MessageTextBlock, z.ZodTypeDef, unknown>;

/** @internal */
declare type MessageTextBlock$Outbound = {
    text: string;
    type: string;
};

/** @internal */
declare const MessageTextBlock$outboundSchema: z.ZodType<MessageTextBlock$Outbound, z.ZodTypeDef, MessageTextBlock>;

declare type MessageTextBlock = {
    text: string;
    type: ContentType;
};

declare function messageTextBlockFromJSON(jsonString: string): Result<MessageTextBlock, SDKValidationError>;

declare function messageTextBlockToJSON(messageTextBlock: MessageTextBlock): string;

declare function messageToJSON(message: Message): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace MessageType$ {
    /** @deprecated use `MessageType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Update: "UPDATE";
        readonly Content: "CONTENT";
        readonly Context: "CONTEXT";
        readonly Debug: "DEBUG";
        readonly DebugExternal: "DEBUG_EXTERNAL";
        readonly Error: "ERROR";
        readonly Heading: "HEADING";
        readonly Warning: "WARNING";
        readonly ServerTool: "SERVER_TOOL";
    }>;
    /** @deprecated use `MessageType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Update: "UPDATE";
        readonly Content: "CONTENT";
        readonly Context: "CONTEXT";
        readonly Debug: "DEBUG";
        readonly DebugExternal: "DEBUG_EXTERNAL";
        readonly Error: "ERROR";
        readonly Heading: "HEADING";
        readonly Warning: "WARNING";
        readonly ServerTool: "SERVER_TOOL";
    }>;
}

/** @internal */
declare const MessageType$inboundSchema: z.ZodNativeEnum<typeof MessageType>;

/** @internal */
declare const MessageType$outboundSchema: z.ZodNativeEnum<typeof MessageType>;

/**
 * Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
 */
declare const MessageType: {
    readonly Update: "UPDATE";
    readonly Content: "CONTENT";
    readonly Context: "CONTEXT";
    readonly Debug: "DEBUG";
    readonly DebugExternal: "DEBUG_EXTERNAL";
    readonly Error: "ERROR";
    readonly Heading: "HEADING";
    readonly Warning: "WARNING";
    readonly ServerTool: "SERVER_TOOL";
};

/**
 * Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
 */
declare type MessageType = ClosedEnum<typeof MessageType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Mode$ {
    /** @deprecated use `Mode$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Default: "DEFAULT";
        readonly Quick: "QUICK";
    }>;
    /** @deprecated use `Mode$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Default: "DEFAULT";
        readonly Quick: "QUICK";
    }>;
}

/** @internal */
declare const Mode$inboundSchema: z.ZodNativeEnum<typeof Mode>;

/** @internal */
declare const Mode$outboundSchema: z.ZodNativeEnum<typeof Mode>;

/**
 * Top level modes to run GleanChat in.
 */
declare const Mode: {
    readonly Default: "DEFAULT";
    readonly Quick: "QUICK";
};

/**
 * Top level modes to run GleanChat in.
 */
declare type Mode = ClosedEnum<typeof Mode>;

declare type OAuth2PasswordFlow = {
    username: string;
    password: string;
    clientID?: string | undefined;
    clientSecret?: string | undefined;
    tokenURL: string;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ObjectDefinition$ {
    /** @deprecated use `ObjectDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ObjectDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `ObjectDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ObjectDefinition$Outbound, z.ZodTypeDef, ObjectDefinition>;
    /** @deprecated use `ObjectDefinition$Outbound` instead. */
    type Outbound = ObjectDefinition$Outbound;
}

/** @internal */
declare const ObjectDefinition$inboundSchema: z.ZodType<ObjectDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type ObjectDefinition$Outbound = {
    name?: string | undefined;
    displayLabel?: string | undefined;
    docCategory?: string | undefined;
    propertyDefinitions?: Array<PropertyDefinition$Outbound> | undefined;
    propertyGroups?: Array<PropertyGroup$Outbound> | undefined;
    summarizable?: boolean | undefined;
};

/** @internal */
declare const ObjectDefinition$outboundSchema: z.ZodType<ObjectDefinition$Outbound, z.ZodTypeDef, ObjectDefinition>;

/**
 * The definition for an `DocumentMetadata.objectType` within a datasource.
 */
declare type ObjectDefinition = {
    /**
     * Unique identifier for this `DocumentMetadata.objectType`. If omitted, this definition is used as a default for all unmatched `DocumentMetadata.objectType`s in this datasource.
     */
    name?: string | undefined;
    /**
     * The user-friendly name of the object for display.
     */
    displayLabel?: string | undefined;
    /**
     * The document category of this object type.
     */
    docCategory?: DocCategory | undefined;
    propertyDefinitions?: Array<PropertyDefinition_2> | undefined;
    /**
     * A list of `PropertyGroup`s belonging to this object type, which will group properties to be displayed together in the UI.
     */
    propertyGroups?: Array<PropertyGroup> | undefined;
    /**
     * Whether or not the object is summarizable
     */
    summarizable?: boolean | undefined;
};

declare function objectDefinitionFromJSON(jsonString: string): Result<ObjectDefinition, SDKValidationError>;

declare function objectDefinitionToJSON(objectDefinition: ObjectDefinition): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ObjectPermissions$ {
    /** @deprecated use `ObjectPermissions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ObjectPermissions, z.ZodTypeDef, unknown>;
    /** @deprecated use `ObjectPermissions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ObjectPermissions$Outbound, z.ZodTypeDef, ObjectPermissions>;
    /** @deprecated use `ObjectPermissions$Outbound` instead. */
    type Outbound = ObjectPermissions$Outbound;
}

/** @internal */
declare const ObjectPermissions$inboundSchema: z.ZodType<ObjectPermissions, z.ZodTypeDef, unknown>;

/** @internal */
declare type ObjectPermissions$Outbound = {
    write?: WritePermission$Outbound | undefined;
};

/** @internal */
declare const ObjectPermissions$outboundSchema: z.ZodType<ObjectPermissions$Outbound, z.ZodTypeDef, ObjectPermissions>;

declare type ObjectPermissions = {
    /**
     * Describes the write permissions levels that a user has for a specific feature
     */
    write?: WritePermission | undefined;
};

declare function objectPermissionsFromJSON(jsonString: string): Result<ObjectPermissions, SDKValidationError>;

declare function objectPermissionsToJSON(objectPermissions: ObjectPermissions): string;

declare namespace operations {
    export {
        chatRequestToJSON_2 as chatRequestToJSON,
        chatRequestFromJSON_2 as chatRequestFromJSON,
        ChatRequest_2 as ChatRequest,
        ChatRequest$inboundSchema_2 as ChatRequest$inboundSchema,
        ChatRequest$Outbound_2 as ChatRequest$Outbound,
        ChatRequest$outboundSchema_2 as ChatRequest$outboundSchema,
        ChatRequest$_2 as ChatRequest$,
        chatStreamRequestToJSON,
        chatStreamRequestFromJSON,
        ChatStreamRequest,
        ChatStreamRequest$inboundSchema,
        ChatStreamRequest$Outbound,
        ChatStreamRequest$outboundSchema,
        ChatStreamRequest$,
        responseBody2ToJSON,
        responseBody2FromJSON,
        responseBody1ToJSON,
        responseBody1FromJSON,
        createcollectionResponseToJSON,
        createcollectionResponseFromJSON,
        ResponseBody2,
        ResponseBody1,
        CreatecollectionResponse,
        ResponseBody2$inboundSchema,
        ResponseBody2$Outbound,
        ResponseBody2$outboundSchema,
        ResponseBody2$,
        ResponseBody1$inboundSchema,
        ResponseBody1$Outbound,
        ResponseBody1$outboundSchema,
        ResponseBody1$,
        CreatecollectionResponse$inboundSchema,
        CreatecollectionResponse$Outbound,
        CreatecollectionResponse$outboundSchema,
        CreatecollectionResponse$,
        deleteallchatsRequestToJSON,
        deleteallchatsRequestFromJSON,
        DeleteallchatsRequest,
        DeleteallchatsRequest$inboundSchema,
        DeleteallchatsRequest$Outbound,
        DeleteallchatsRequest$outboundSchema,
        DeleteallchatsRequest$,
        deletechatfilesRequestToJSON,
        deletechatfilesRequestFromJSON,
        DeletechatfilesRequest,
        DeletechatfilesRequest$inboundSchema,
        DeletechatfilesRequest$Outbound,
        DeletechatfilesRequest$outboundSchema,
        DeletechatfilesRequest$,
        deletechatsRequestToJSON,
        deletechatsRequestFromJSON,
        DeletechatsRequest,
        DeletechatsRequest$inboundSchema,
        DeletechatsRequest$Outbound,
        DeletechatsRequest$outboundSchema,
        DeletechatsRequest$,
        downloadpolicycsvRequestToJSON,
        downloadpolicycsvRequestFromJSON,
        DownloadpolicycsvRequest,
        DownloadpolicycsvRequest$inboundSchema,
        DownloadpolicycsvRequest$Outbound,
        DownloadpolicycsvRequest$outboundSchema,
        DownloadpolicycsvRequest$,
        downloadreportcsvRequestToJSON,
        downloadreportcsvRequestFromJSON,
        DownloadreportcsvRequest,
        DownloadreportcsvRequest$inboundSchema,
        DownloadreportcsvRequest$Outbound,
        DownloadreportcsvRequest$outboundSchema,
        DownloadreportcsvRequest$,
        feedbackRequestToJSON,
        feedbackRequestFromJSON,
        FeedbackRequest,
        FeedbackRequest$inboundSchema,
        FeedbackRequest$Outbound,
        FeedbackRequest$outboundSchema,
        FeedbackRequest$,
        getAgentRequestToJSON,
        getAgentRequestFromJSON,
        GetAgentRequest,
        GetAgentRequest$inboundSchema,
        GetAgentRequest$Outbound,
        GetAgentRequest$outboundSchema,
        GetAgentRequest$,
        getAgentSchemasRequestToJSON,
        getAgentSchemasRequestFromJSON,
        GetAgentSchemasRequest,
        GetAgentSchemasRequest$inboundSchema,
        GetAgentSchemasRequest$Outbound,
        GetAgentSchemasRequest$outboundSchema,
        GetAgentSchemasRequest$,
        getchatRequestToJSON,
        getchatRequestFromJSON,
        GetchatRequest,
        GetchatRequest$inboundSchema,
        GetchatRequest$Outbound,
        GetchatRequest$outboundSchema,
        GetchatRequest$,
        getchatapplicationRequestToJSON,
        getchatapplicationRequestFromJSON,
        GetchatapplicationRequest,
        GetchatapplicationRequest$inboundSchema,
        GetchatapplicationRequest$Outbound,
        GetchatapplicationRequest$outboundSchema,
        GetchatapplicationRequest$,
        getchatfilesRequestToJSON,
        getchatfilesRequestFromJSON,
        GetchatfilesRequest,
        GetchatfilesRequest$inboundSchema,
        GetchatfilesRequest$Outbound,
        GetchatfilesRequest$outboundSchema,
        GetchatfilesRequest$,
        getdocvisibilityRequestToJSON,
        getdocvisibilityRequestFromJSON,
        GetdocvisibilityRequest,
        GetdocvisibilityRequest$inboundSchema,
        GetdocvisibilityRequest$Outbound,
        GetdocvisibilityRequest$outboundSchema,
        GetdocvisibilityRequest$,
        getpolicyRequestToJSON,
        getpolicyRequestFromJSON,
        GetpolicyRequest,
        GetpolicyRequest$inboundSchema,
        GetpolicyRequest$Outbound,
        GetpolicyRequest$outboundSchema,
        GetpolicyRequest$,
        getreportstatusRequestToJSON,
        getreportstatusRequestFromJSON,
        GetreportstatusRequest,
        GetreportstatusRequest$inboundSchema,
        GetreportstatusRequest$Outbound,
        GetreportstatusRequest$outboundSchema,
        GetreportstatusRequest$,
        getRestApiV1ToolsListRequestToJSON,
        getRestApiV1ToolsListRequestFromJSON,
        GetRestApiV1ToolsListRequest,
        GetRestApiV1ToolsListRequest$inboundSchema,
        GetRestApiV1ToolsListRequest$Outbound,
        GetRestApiV1ToolsListRequest$outboundSchema,
        GetRestApiV1ToolsListRequest$,
        listchatsRequestToJSON,
        listchatsRequestFromJSON,
        ListchatsRequest,
        ListchatsRequest$inboundSchema,
        ListchatsRequest$Outbound,
        ListchatsRequest$outboundSchema,
        ListchatsRequest$,
        listpinsRequestToJSON,
        listpinsRequestFromJSON,
        ListpinsRequest,
        ListpinsRequest$inboundSchema,
        ListpinsRequest$Outbound,
        ListpinsRequest$outboundSchema,
        ListpinsRequest$,
        listpoliciesRequestToJSON,
        listpoliciesRequestFromJSON,
        ListpoliciesRequest,
        ListpoliciesRequest$inboundSchema,
        ListpoliciesRequest$Outbound,
        ListpoliciesRequest$outboundSchema,
        ListpoliciesRequest$,
        listverificationsRequestToJSON,
        listverificationsRequestFromJSON,
        ListverificationsRequest,
        ListverificationsRequest$inboundSchema,
        ListverificationsRequest$Outbound,
        ListverificationsRequest$outboundSchema,
        ListverificationsRequest$,
        postApiIndexV1DebugDatasourceDocumentRequestToJSON,
        postApiIndexV1DebugDatasourceDocumentRequestFromJSON,
        PostApiIndexV1DebugDatasourceDocumentRequest,
        PostApiIndexV1DebugDatasourceDocumentRequest$inboundSchema,
        PostApiIndexV1DebugDatasourceDocumentRequest$Outbound,
        PostApiIndexV1DebugDatasourceDocumentRequest$outboundSchema,
        PostApiIndexV1DebugDatasourceDocumentRequest$,
        postApiIndexV1DebugDatasourceDocumentsRequestToJSON,
        postApiIndexV1DebugDatasourceDocumentsRequestFromJSON,
        PostApiIndexV1DebugDatasourceDocumentsRequest,
        PostApiIndexV1DebugDatasourceDocumentsRequest$inboundSchema,
        PostApiIndexV1DebugDatasourceDocumentsRequest$Outbound,
        PostApiIndexV1DebugDatasourceDocumentsRequest$outboundSchema,
        PostApiIndexV1DebugDatasourceDocumentsRequest$,
        postApiIndexV1DebugDatasourceStatusRequestToJSON,
        postApiIndexV1DebugDatasourceStatusRequestFromJSON,
        PostApiIndexV1DebugDatasourceStatusRequest,
        PostApiIndexV1DebugDatasourceStatusRequest$inboundSchema,
        PostApiIndexV1DebugDatasourceStatusRequest$Outbound,
        PostApiIndexV1DebugDatasourceStatusRequest$outboundSchema,
        PostApiIndexV1DebugDatasourceStatusRequest$,
        postApiIndexV1DebugDatasourceUserRequestToJSON,
        postApiIndexV1DebugDatasourceUserRequestFromJSON,
        PostApiIndexV1DebugDatasourceUserRequest,
        PostApiIndexV1DebugDatasourceUserRequest$inboundSchema,
        PostApiIndexV1DebugDatasourceUserRequest$Outbound,
        PostApiIndexV1DebugDatasourceUserRequest$outboundSchema,
        PostApiIndexV1DebugDatasourceUserRequest$,
        updatepolicyRequestToJSON,
        updatepolicyRequestFromJSON,
        UpdatepolicyRequest,
        UpdatepolicyRequest$inboundSchema,
        UpdatepolicyRequest$Outbound,
        UpdatepolicyRequest$outboundSchema,
        UpdatepolicyRequest$,
        uploadchatfilesRequestToJSON,
        uploadchatfilesRequestFromJSON,
        UploadchatfilesRequest,
        UploadchatfilesRequest$inboundSchema,
        UploadchatfilesRequest$Outbound,
        UploadchatfilesRequest$outboundSchema,
        UploadchatfilesRequest$
    }
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace OperatorMetadata$ {
    /** @deprecated use `OperatorMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OperatorMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `OperatorMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OperatorMetadata$Outbound, z.ZodTypeDef, OperatorMetadata>;
    /** @deprecated use `OperatorMetadata$Outbound` instead. */
    type Outbound = OperatorMetadata$Outbound;
}

/** @internal */
declare const OperatorMetadata$inboundSchema: z.ZodType<OperatorMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type OperatorMetadata$Outbound = {
    name: string;
    isCustom?: boolean | undefined;
    operatorType?: string | undefined;
    helpText?: string | undefined;
    scopes?: Array<OperatorScope$Outbound> | undefined;
    value?: string | undefined;
    displayValue?: string | undefined;
};

/** @internal */
declare const OperatorMetadata$outboundSchema: z.ZodType<OperatorMetadata$Outbound, z.ZodTypeDef, OperatorMetadata>;

declare type OperatorMetadata = {
    name: string;
    /**
     * Whether this operator is supported by default or something that was created within a workplace app (e.g. custom jira field).
     */
    isCustom?: boolean | undefined;
    operatorType?: OperatorType | undefined;
    helpText?: string | undefined;
    scopes?: Array<OperatorScope> | undefined;
    /**
     * Raw/canonical value of the operator. Only applies when result is an operator value.
     */
    value?: string | undefined;
    /**
     * Human readable value of the operator that can be shown to the user. Only applies when result is an operator value.
     */
    displayValue?: string | undefined;
};

declare function operatorMetadataFromJSON(jsonString: string): Result<OperatorMetadata, SDKValidationError>;

declare function operatorMetadataToJSON(operatorMetadata: OperatorMetadata): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace OperatorScope$ {
    /** @deprecated use `OperatorScope$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OperatorScope, z.ZodTypeDef, unknown>;
    /** @deprecated use `OperatorScope$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OperatorScope$Outbound, z.ZodTypeDef, OperatorScope>;
    /** @deprecated use `OperatorScope$Outbound` instead. */
    type Outbound = OperatorScope$Outbound;
}

/** @internal */
declare const OperatorScope$inboundSchema: z.ZodType<OperatorScope, z.ZodTypeDef, unknown>;

/** @internal */
declare type OperatorScope$Outbound = {
    datasource?: string | undefined;
    docType?: string | undefined;
};

/** @internal */
declare const OperatorScope$outboundSchema: z.ZodType<OperatorScope$Outbound, z.ZodTypeDef, OperatorScope>;

declare type OperatorScope = {
    datasource?: string | undefined;
    docType?: string | undefined;
};

declare function operatorScopeFromJSON(jsonString: string): Result<OperatorScope, SDKValidationError>;

declare function operatorScopeToJSON(operatorScope: OperatorScope): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace OperatorType$ {
    /** @deprecated use `OperatorType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Text: "TEXT";
        readonly Double: "DOUBLE";
        readonly Date: "DATE";
        readonly User: "USER";
    }>;
    /** @deprecated use `OperatorType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Text: "TEXT";
        readonly Double: "DOUBLE";
        readonly Date: "DATE";
        readonly User: "USER";
    }>;
}

/** @internal */
declare const OperatorType$inboundSchema: z.ZodNativeEnum<typeof OperatorType>;

/** @internal */
declare const OperatorType$outboundSchema: z.ZodNativeEnum<typeof OperatorType>;

declare const OperatorType: {
    readonly Text: "TEXT";
    readonly Double: "DOUBLE";
    readonly Date: "DATE";
    readonly User: "USER";
};

declare type OperatorType = ClosedEnum<typeof OperatorType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace OrderBy$ {
    /** @deprecated use `OrderBy$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Asc: "ASC";
        readonly Desc: "DESC";
    }>;
    /** @deprecated use `OrderBy$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Asc: "ASC";
        readonly Desc: "DESC";
    }>;
}

/** @internal */
declare const OrderBy$inboundSchema: z.ZodNativeEnum<typeof OrderBy>;

/** @internal */
declare const OrderBy$outboundSchema: z.ZodNativeEnum<typeof OrderBy>;

declare const OrderBy: {
    readonly Asc: "ASC";
    readonly Desc: "DESC";
};

declare type OrderBy = ClosedEnum<typeof OrderBy>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace OutputSchema$ {
    /** @deprecated use `OutputSchema$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OutputSchema, z.ZodTypeDef, unknown>;
    /** @deprecated use `OutputSchema$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OutputSchema$Outbound, z.ZodTypeDef, OutputSchema>;
    /** @deprecated use `OutputSchema$Outbound` instead. */
    type Outbound = OutputSchema$Outbound;
}

/** @internal */
declare const OutputSchema$inboundSchema: z.ZodType<OutputSchema, z.ZodTypeDef, unknown>;

/** @internal */
declare type OutputSchema$Outbound = {};

/** @internal */
declare const OutputSchema$outboundSchema: z.ZodType<OutputSchema$Outbound, z.ZodTypeDef, OutputSchema>;

/**
 * The schema for the agent output. In JSON Schema format.
 */
declare type OutputSchema = {};

declare function outputSchemaFromJSON(jsonString: string): Result<OutputSchema, SDKValidationError>;

declare function outputSchemaToJSON(outputSchema: OutputSchema): string;

declare class People extends ClientSDK {
    /**
     * Beta: Get user information
     *
     * @remarks
     * Gives various information that would help in debugging related to a particular user. Currently in beta, might undergo breaking changes without prior notice.
     *
     * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/indexing/debugging/datasource-config) for more information.
     */
    debug(debugUserRequest: components.DebugUserRequest, datasource: string, options?: RequestOptions): Promise<components.DebugUserResponse>;
    /**
     * Get user count
     *
     * @remarks
     * Fetches user count for the specified custom datasource.
     *
     * Tip: Use [/debug/{datasource}/status](https://developers.glean.com/indexing/debugging/datasource-status) for richer information.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    count(request: components.GetUserCountRequest, options?: RequestOptions): Promise<components.GetUserCountResponse>;
    /**
     * Index employee
     *
     * @remarks
     * Adds an employee or updates information about an employee
     */
    index(request: components.IndexEmployeeRequest, options?: RequestOptions): Promise<void>;
    /**
     * Bulk index employees
     *
     * @remarks
     * Replaces all the currently indexed employees using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/indexing/documents/bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
     */
    bulkIndex(request: components.BulkIndexEmployeesRequest, options?: RequestOptions): Promise<void>;
    /**
     * Schedules the processing of uploaded employees and teams
     *
     * @remarks
     * Schedules the immediate processing of employees and teams uploaded through the indexing API. By default all uploaded people data will be processed asynchronously but this API can be used to schedule its processing on demand.
     */
    processAllEmployeesAndTeams(options?: RequestOptions): Promise<void>;
    /**
     * Delete employee
     *
     * @remarks
     * Delete an employee. Silently succeeds if employee is not present.
     */
    delete(request: components.DeleteEmployeeRequest, options?: RequestOptions): Promise<void>;
    /**
     * Index team
     *
     * @remarks
     * Adds a team or updates information about a team
     */
    indexTeam(request: components.IndexTeamRequest, options?: RequestOptions): Promise<void>;
    /**
     * Delete team
     *
     * @remarks
     * Delete a team based on provided id.
     */
    deleteTeam(request: components.DeleteTeamRequest, options?: RequestOptions): Promise<void>;
    /**
     * Bulk index teams
     *
     * @remarks
     * Replaces all the currently indexed teams using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/indexing/documents/bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
     */
    bulkIndexTeams(request: components.BulkIndexTeamsRequest, options?: RequestOptions): Promise<void>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PeopleRequest$ {
    /** @deprecated use `PeopleRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PeopleRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `PeopleRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PeopleRequest$Outbound, z.ZodTypeDef, PeopleRequest>;
    /** @deprecated use `PeopleRequest$Outbound` instead. */
    type Outbound = PeopleRequest$Outbound;
}

/** @internal */
declare const PeopleRequest$inboundSchema: z.ZodType<PeopleRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type PeopleRequest$Outbound = {
    timezoneOffset?: number | undefined;
    obfuscatedIds?: Array<string> | undefined;
    emailIds?: Array<string> | undefined;
    includeFields?: Array<string> | undefined;
    includeTypes?: Array<string> | undefined;
    source?: string | undefined;
};

/** @internal */
declare const PeopleRequest$outboundSchema: z.ZodType<PeopleRequest$Outbound, z.ZodTypeDef, PeopleRequest>;

declare type PeopleRequest = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    /**
     * The Person IDs to retrieve. If no IDs are requested, the current user's details are returned.
     */
    obfuscatedIds?: Array<string> | undefined;
    /**
     * The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds.
     */
    emailIds?: Array<string> | undefined;
    /**
     * List of PersonMetadata fields to return (that aren't returned by default)
     */
    includeFields?: Array<PeopleRequestIncludeField> | undefined;
    /**
     * The types of people entities to include in the response in addition to those returned by default.
     */
    includeTypes?: Array<IncludeType> | undefined;
    /**
     * A string denoting the search surface from which the endpoint is called.
     */
    source?: string | undefined;
};

declare function peopleRequestFromJSON(jsonString: string): Result<PeopleRequest, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PeopleRequestIncludeField$ {
    /** @deprecated use `PeopleRequestIncludeField$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Badges: "BADGES";
        readonly BusyEvents: "BUSY_EVENTS";
        readonly DocumentActivity: "DOCUMENT_ACTIVITY";
        readonly InviteInfo: "INVITE_INFO";
        readonly PeopleDistance: "PEOPLE_DISTANCE";
        readonly Permissions: "PERMISSIONS";
        readonly PeopleDetails: "PEOPLE_DETAILS";
        readonly ManagementDetails: "MANAGEMENT_DETAILS";
        readonly PeopleProfileSettings: "PEOPLE_PROFILE_SETTINGS";
        readonly PeopleWithoutManager: "PEOPLE_WITHOUT_MANAGER";
    }>;
    /** @deprecated use `PeopleRequestIncludeField$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Badges: "BADGES";
        readonly BusyEvents: "BUSY_EVENTS";
        readonly DocumentActivity: "DOCUMENT_ACTIVITY";
        readonly InviteInfo: "INVITE_INFO";
        readonly PeopleDistance: "PEOPLE_DISTANCE";
        readonly Permissions: "PERMISSIONS";
        readonly PeopleDetails: "PEOPLE_DETAILS";
        readonly ManagementDetails: "MANAGEMENT_DETAILS";
        readonly PeopleProfileSettings: "PEOPLE_PROFILE_SETTINGS";
        readonly PeopleWithoutManager: "PEOPLE_WITHOUT_MANAGER";
    }>;
}

/** @internal */
declare const PeopleRequestIncludeField$inboundSchema: z.ZodNativeEnum<typeof PeopleRequestIncludeField>;

/** @internal */
declare const PeopleRequestIncludeField$outboundSchema: z.ZodNativeEnum<typeof PeopleRequestIncludeField>;

declare const PeopleRequestIncludeField: {
    readonly Badges: "BADGES";
    readonly BusyEvents: "BUSY_EVENTS";
    readonly DocumentActivity: "DOCUMENT_ACTIVITY";
    readonly InviteInfo: "INVITE_INFO";
    readonly PeopleDistance: "PEOPLE_DISTANCE";
    readonly Permissions: "PERMISSIONS";
    readonly PeopleDetails: "PEOPLE_DETAILS";
    readonly ManagementDetails: "MANAGEMENT_DETAILS";
    readonly PeopleProfileSettings: "PEOPLE_PROFILE_SETTINGS";
    readonly PeopleWithoutManager: "PEOPLE_WITHOUT_MANAGER";
};

declare type PeopleRequestIncludeField = ClosedEnum<typeof PeopleRequestIncludeField>;

declare function peopleRequestToJSON(peopleRequest: PeopleRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PeopleResponse$ {
    /** @deprecated use `PeopleResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PeopleResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `PeopleResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PeopleResponse$Outbound, z.ZodTypeDef, PeopleResponse>;
    /** @deprecated use `PeopleResponse$Outbound` instead. */
    type Outbound = PeopleResponse$Outbound;
}

/** @internal */
declare const PeopleResponse$inboundSchema: z.ZodType<PeopleResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type PeopleResponse$Outbound = {
    results?: Array<Person$Outbound> | undefined;
    relatedDocuments?: Array<RelatedDocuments$Outbound> | undefined;
    errors?: Array<string> | undefined;
};

/** @internal */
declare const PeopleResponse$outboundSchema: z.ZodType<PeopleResponse$Outbound, z.ZodTypeDef, PeopleResponse>;

declare type PeopleResponse = {
    /**
     * A Person for each ID in the request, each with PersonMetadata populated.
     */
    results?: Array<Person> | undefined;
    /**
     * A list of documents related to this people response. This is only included if DOCUMENT_ACTIVITY is requested and only 1 person is included in the request.
     */
    relatedDocuments?: Array<RelatedDocuments> | undefined;
    /**
     * A list of IDs that could not be found.
     */
    errors?: Array<string> | undefined;
};

declare function peopleResponseFromJSON(jsonString: string): Result<PeopleResponse, SDKValidationError>;

declare function peopleResponseToJSON(peopleResponse: PeopleResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Period$ {
    /** @deprecated use `Period$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Period, z.ZodTypeDef, unknown>;
    /** @deprecated use `Period$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Period$Outbound, z.ZodTypeDef, Period>;
    /** @deprecated use `Period$Outbound` instead. */
    type Outbound = Period$Outbound;
}

/** @internal */
declare const Period$inboundSchema: z.ZodType<Period, z.ZodTypeDef, unknown>;

/** @internal */
declare type Period$Outbound = {
    minDaysFromNow?: number | undefined;
    maxDaysFromNow?: number | undefined;
    start?: TimePoint$Outbound | undefined;
    end?: TimePoint$Outbound | undefined;
};

/** @internal */
declare const Period$outboundSchema: z.ZodType<Period$Outbound, z.ZodTypeDef, Period>;

declare type Period = {
    /**
     * DEPRECATED - The number of days from now in the past to define upper boundary of time period.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    minDaysFromNow?: number | undefined;
    /**
     * DEPRECATED - The number of days from now in the past to define lower boundary of time period.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    maxDaysFromNow?: number | undefined;
    start?: TimePoint | undefined;
    end?: TimePoint | undefined;
};

declare function periodFromJSON(jsonString: string): Result<Period, SDKValidationError>;

declare function periodToJSON(period: Period): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Permissions$ {
    /** @deprecated use `Permissions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Permissions_2, z.ZodTypeDef, unknown>;
    /** @deprecated use `Permissions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Permissions$Outbound, z.ZodTypeDef, Permissions_2>;
    /** @deprecated use `Permissions$Outbound` instead. */
    type Outbound = Permissions$Outbound;
}

/** @internal */
declare const Permissions$inboundSchema: z.ZodType<Permissions_2, z.ZodTypeDef, unknown>;

/** @internal */
declare type Permissions$Outbound = {
    canAdminSearch?: boolean | undefined;
    canAdminClientApiGlobalTokens?: boolean | undefined;
    canDlp?: boolean | undefined;
    read?: {
        [k: string]: Array<ReadPermission$Outbound>;
    } | undefined;
    write?: {
        [k: string]: Array<WritePermission$Outbound>;
    } | undefined;
    grant?: {
        [k: string]: Array<GrantPermission$Outbound>;
    } | undefined;
    role?: string | undefined;
    roles?: Array<string> | undefined;
};

/** @internal */
declare const Permissions$outboundSchema: z.ZodType<Permissions$Outbound, z.ZodTypeDef, Permissions_2>;

/**
 * Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
 *
 * @remarks
 * When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
 */
declare type Permissions_2 = {
    /**
     * TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch
     */
    canAdminSearch?: boolean | undefined;
    /**
     * TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope
     */
    canAdminClientApiGlobalTokens?: boolean | undefined;
    /**
     * TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features
     */
    canDlp?: boolean | undefined;
    /**
     * Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    read?: {
        [k: string]: Array<ReadPermission>;
    } | undefined;
    /**
     * Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    write?: {
        [k: string]: Array<WritePermission>;
    } | undefined;
    /**
     * Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
     */
    grant?: {
        [k: string]: Array<GrantPermission>;
    } | undefined;
    /**
     * The roleId of the canonical role a user has. The displayName is equal to the roleId.
     */
    role?: string | undefined;
    /**
     * The roleIds of the roles a user has.
     */
    roles?: Array<string> | undefined;
};

declare class Permissions_3 extends ClientSDK {
    /**
     * Update document permissions
     *
     * @remarks
     * Updates the permissions for a given document without modifying document content.
     */
    updatePermissions(request: components.UpdatePermissionsRequest, options?: RequestOptions): Promise<void>;
    /**
     * Index user
     *
     * @remarks
     * Adds a datasource user or updates an existing user.
     */
    indexUser(request: components.IndexUserRequest, options?: RequestOptions): Promise<void>;
    /**
     * Bulk index users
     *
     * @remarks
     * Replaces the users in a datasource using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/indexing/documents/bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
     */
    bulkIndexUsers(request: components.BulkIndexUsersRequest, options?: RequestOptions): Promise<void>;
    /**
     * Index group
     *
     * @remarks
     * Add or update a group in the datasource.
     */
    indexGroup(request: components.IndexGroupRequest, options?: RequestOptions): Promise<void>;
    /**
     * Bulk index groups
     *
     * @remarks
     * Replaces the groups in a datasource using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/indexing/documents/bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
     */
    bulkIndexGroups(request: components.BulkIndexGroupsRequest, options?: RequestOptions): Promise<void>;
    /**
     * Index membership
     *
     * @remarks
     * Add the memberships of a group in the datasource.
     */
    indexMembership(request: components.IndexMembershipRequest, options?: RequestOptions): Promise<void>;
    /**
     * Bulk index memberships for a group
     *
     * @remarks
     * Replaces the memberships for a group in a datasource using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/indexing/documents/bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
     */
    bulkIndexMemberships(request: components.BulkIndexMembershipsRequest, options?: RequestOptions): Promise<void>;
    /**
     * Schedules the processing of group memberships
     *
     * @remarks
     * Schedules the immediate processing of all group memberships uploaded through the indexing API. By default the uploaded group memberships will be processed asynchronously but this API can be used to schedule processing of all memberships on demand.
     */
    processMemberships(request?: components.ProcessAllMembershipsRequest | undefined, options?: RequestOptions): Promise<void>;
    /**
     * Delete user
     *
     * @remarks
     * Delete the user from the datasource. Silently succeeds if user is not present.
     */
    deleteUser(request: components.DeleteUserRequest, options?: RequestOptions): Promise<void>;
    /**
     * Delete group
     *
     * @remarks
     * Delete group from the datasource. Silently succeeds if group is not present.
     */
    deleteGroup(request: components.DeleteGroupRequest, options?: RequestOptions): Promise<void>;
    /**
     * Delete membership
     *
     * @remarks
     * Delete membership to a group in the specified datasource. Silently succeeds if membership is not present.
     */
    deleteMembership(request: components.DeleteMembershipRequest, options?: RequestOptions): Promise<void>;
    /**
     * Beta users
     *
     * @remarks
     * Allow the datasource be visible to the specified beta users. The default behaviour is datasource being visible to all users if it is enabled and not visible to any user if it is not enabled.
     */
    authorizeBetaUsers(request: components.GreenlistUsersRequest, options?: RequestOptions): Promise<void>;
}

declare function permissionsFromJSON(jsonString: string): Result<Permissions_2, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PermissionsGroupIntersectionDefinition$ {
    /** @deprecated use `PermissionsGroupIntersectionDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PermissionsGroupIntersectionDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `PermissionsGroupIntersectionDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PermissionsGroupIntersectionDefinition$Outbound, z.ZodTypeDef, PermissionsGroupIntersectionDefinition>;
    /** @deprecated use `PermissionsGroupIntersectionDefinition$Outbound` instead. */
    type Outbound = PermissionsGroupIntersectionDefinition$Outbound;
}

/** @internal */
declare const PermissionsGroupIntersectionDefinition$inboundSchema: z.ZodType<PermissionsGroupIntersectionDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type PermissionsGroupIntersectionDefinition$Outbound = {
    requiredGroups?: Array<string> | undefined;
};

/** @internal */
declare const PermissionsGroupIntersectionDefinition$outboundSchema: z.ZodType<PermissionsGroupIntersectionDefinition$Outbound, z.ZodTypeDef, PermissionsGroupIntersectionDefinition>;

/**
 * describes a list of groups that are all required in a permissions constraint
 */
declare type PermissionsGroupIntersectionDefinition = {
    requiredGroups?: Array<string> | undefined;
};

declare function permissionsGroupIntersectionDefinitionFromJSON(jsonString: string): Result<PermissionsGroupIntersectionDefinition, SDKValidationError>;

declare function permissionsGroupIntersectionDefinitionToJSON(permissionsGroupIntersectionDefinition: PermissionsGroupIntersectionDefinition): string;

declare function permissionsToJSON(permissions: Permissions_2): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Person$ {
    /** @deprecated use `Person$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Person, z.ZodTypeDef, unknown>;
    /** @deprecated use `Person$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Person$Outbound, z.ZodTypeDef, Person>;
    /** @deprecated use `Person$Outbound` instead. */
    type Outbound = Person$Outbound;
}

/** @internal */
declare const Person$inboundSchema: z.ZodType<Person, z.ZodTypeDef, unknown>;

/** @internal */
declare type Person$Outbound = {
    name: string;
    obfuscatedId: string;
    relatedDocuments?: Array<RelatedDocuments$Outbound> | undefined;
    metadata?: PersonMetadata$Outbound | undefined;
};

/** @internal */
declare const Person$outboundSchema: z.ZodType<Person$Outbound, z.ZodTypeDef, Person>;

declare type Person = {
    /**
     * The display name.
     */
    name: string;
    /**
     * An opaque identifier that can be used to request metadata for a Person.
     */
    obfuscatedId: string;
    /**
     * A list of documents related to this person.
     */
    relatedDocuments?: Array<RelatedDocuments> | undefined;
    metadata?: PersonMetadata | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PersonDistance$ {
    /** @deprecated use `PersonDistance$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PersonDistance, z.ZodTypeDef, unknown>;
    /** @deprecated use `PersonDistance$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PersonDistance$Outbound, z.ZodTypeDef, PersonDistance>;
    /** @deprecated use `PersonDistance$Outbound` instead. */
    type Outbound = PersonDistance$Outbound;
}

/** @internal */
declare const PersonDistance$inboundSchema: z.ZodType<PersonDistance, z.ZodTypeDef, unknown>;

/** @internal */
declare type PersonDistance$Outbound = {
    name: string;
    obfuscatedId: string;
    distance: number;
};

/** @internal */
declare const PersonDistance$outboundSchema: z.ZodType<PersonDistance$Outbound, z.ZodTypeDef, PersonDistance>;

declare type PersonDistance = {
    /**
     * The display name.
     */
    name: string;
    /**
     * An opaque identifier that can be used to request metadata for a Person.
     */
    obfuscatedId: string;
    /**
     * Distance to person, refer to PeopleDistance pipeline on interpretation of the value.
     */
    distance: number;
};

declare function personDistanceFromJSON(jsonString: string): Result<PersonDistance, SDKValidationError>;

declare function personDistanceToJSON(personDistance: PersonDistance): string;

declare function personFromJSON(jsonString: string): Result<Person, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PersonMetadata$ {
    /** @deprecated use `PersonMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PersonMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `PersonMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PersonMetadata$Outbound, z.ZodTypeDef, PersonMetadata>;
    /** @deprecated use `PersonMetadata$Outbound` instead. */
    type Outbound = PersonMetadata$Outbound;
}

/** @internal */
declare const PersonMetadata$inboundSchema: z.ZodType<PersonMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type PersonMetadata$Outbound = {
    type?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    title?: string | undefined;
    businessUnit?: string | undefined;
    department?: string | undefined;
    teams?: Array<PersonTeam$Outbound> | undefined;
    departmentCount?: number | undefined;
    email?: string | undefined;
    aliasEmails?: Array<string> | undefined;
    location?: string | undefined;
    structuredLocation?: StructuredLocation$Outbound | undefined;
    externalProfileLink?: string | undefined;
    manager?: Person$Outbound | undefined;
    managementChain?: Array<Person$Outbound> | undefined;
    phone?: string | undefined;
    timezone?: string | undefined;
    timezoneOffset?: number | undefined;
    photoUrl?: string | undefined;
    uneditedPhotoUrl?: string | undefined;
    bannerUrl?: string | undefined;
    reports?: Array<Person$Outbound> | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    bio?: string | undefined;
    pronoun?: string | undefined;
    orgSizeCount?: number | undefined;
    directReportsCount?: number | undefined;
    preferredName?: string | undefined;
    socialNetwork?: Array<SocialNetwork$Outbound> | undefined;
    datasourceProfile?: Array<DatasourceProfile$Outbound> | undefined;
    querySuggestions?: QuerySuggestionList$Outbound | undefined;
    peopleDistance?: Array<PersonDistance$Outbound> | undefined;
    inviteInfo?: InviteInfo$Outbound | undefined;
    isSignedUp?: boolean | undefined;
    lastExtensionUse?: string | undefined;
    permissions?: Permissions$Outbound | undefined;
    customFields?: Array<CustomFieldData$Outbound> | undefined;
    loggingId?: string | undefined;
    startDatePercentile?: number | undefined;
    busyEvents?: Array<AnonymousEvent$Outbound> | undefined;
    profileBoolSettings?: {
        [k: string]: boolean;
    } | undefined;
    badges?: Array<Badge$Outbound> | undefined;
    isOrgRoot?: boolean | undefined;
};

/** @internal */
declare const PersonMetadata$outboundSchema: z.ZodType<PersonMetadata$Outbound, z.ZodTypeDef, PersonMetadata>;

declare type PersonMetadata = {
    type?: PersonMetadataType | undefined;
    /**
     * The first name of the person
     */
    firstName?: string | undefined;
    /**
     * The last name of the person
     */
    lastName?: string | undefined;
    /**
     * Job title.
     */
    title?: string | undefined;
    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    businessUnit?: string | undefined;
    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    department?: string | undefined;
    /**
     * Info about the employee's team(s).
     */
    teams?: Array<PersonTeam> | undefined;
    /**
     * The number of people in this person's department.
     */
    departmentCount?: number | undefined;
    /**
     * The user's primary email address
     */
    email?: string | undefined;
    /**
     * Additional email addresses of this user beyond the primary, if any.
     */
    aliasEmails?: Array<string> | undefined;
    /**
     * User facing string representing the person's location.
     */
    location?: string | undefined;
    /**
     * Detailed location with information about country, state, city etc.
     */
    structuredLocation?: StructuredLocation | undefined;
    /**
     * Link to a customer's internal profile page. This is set to '#' when no link is desired.
     */
    externalProfileLink?: string | undefined;
    manager?: Person | undefined;
    /**
     * The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager.
     */
    managementChain?: Array<Person> | undefined;
    /**
     * Phone number as a number string.
     */
    phone?: string | undefined;
    /**
     * The timezone of the person. E.g. "Pacific Daylight Time".
     */
    timezone?: string | undefined;
    /**
     * The offset of the person's timezone in seconds from UTC.
     */
    timezoneOffset?: number | undefined;
    /**
     * The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
     */
    photoUrl?: string | undefined;
    /**
     * The original photo URL of the person's avatar before any edits they made are applied
     */
    uneditedPhotoUrl?: string | undefined;
    /**
     * The URL of the person's banner photo.
     */
    bannerUrl?: string | undefined;
    reports?: Array<Person> | undefined;
    /**
     * The date when the employee started.
     */
    startDate?: RFCDate | undefined;
    /**
     * If a former employee, the last date of employment.
     */
    endDate?: RFCDate | undefined;
    /**
     * Short biography or mission statement of the employee.
     */
    bio?: string | undefined;
    /**
     * She/her, He/his or other pronoun.
     */
    pronoun?: string | undefined;
    /**
     * The total recursive size of the people reporting to this person, or 1
     */
    orgSizeCount?: number | undefined;
    /**
     * The total number of people who directly report to this person, or 0
     */
    directReportsCount?: number | undefined;
    /**
     * The preferred name of the person, or a nickname.
     */
    preferredName?: string | undefined;
    /**
     * List of social network profiles.
     */
    socialNetwork?: Array<SocialNetwork> | undefined;
    /**
     * List of profiles this user has in different datasources / tools that they use.
     */
    datasourceProfile?: Array<DatasourceProfile> | undefined;
    querySuggestions?: QuerySuggestionList | undefined;
    /**
     * List of people and distances to those people from this person. Optionally with metadata.
     */
    peopleDistance?: Array<PersonDistance> | undefined;
    /**
     * Information regarding the invite status of a person.
     */
    inviteInfo?: InviteInfo | undefined;
    /**
     * Whether the user has signed into Glean at least once.
     */
    isSignedUp?: boolean | undefined;
    /**
     * The last time the user has used the Glean extension in ISO 8601 format.
     */
    lastExtensionUse?: Date | undefined;
    /**
     * Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
     *
     * @remarks
     * When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
     */
    permissions?: Permissions_2 | undefined;
    /**
     * User customizable fields for additional people information.
     */
    customFields?: Array<CustomFieldData> | undefined;
    /**
     * The logging id of the person used in scrubbed logs, tracking GA metrics.
     */
    loggingId?: string | undefined;
    /**
     * Percentage of the company that started strictly after this person. Between [0,100).
     */
    startDatePercentile?: number | undefined;
    /**
     * Intervals of busy time for this person, along with the type of event they're busy with.
     */
    busyEvents?: Array<AnonymousEvent> | undefined;
    /**
     * flag settings to indicate user profile settings for certain items
     */
    profileBoolSettings?: {
        [k: string]: boolean;
    } | undefined;
    /**
     * The badges that a user has earned over their lifetime.
     */
    badges?: Array<Badge> | undefined;
    /**
     * Whether this person is a "root" node in their organization's hierarchy.
     */
    isOrgRoot?: boolean | undefined;
};

declare function personMetadataFromJSON(jsonString: string): Result<PersonMetadata, SDKValidationError>;

declare function personMetadataToJSON(personMetadata: PersonMetadata): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PersonMetadataType$ {
    /** @deprecated use `PersonMetadataType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly FullTime: "FULL_TIME";
        readonly Contractor: "CONTRACTOR";
        readonly NonEmployee: "NON_EMPLOYEE";
        readonly FormerEmployee: "FORMER_EMPLOYEE";
    }>;
    /** @deprecated use `PersonMetadataType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly FullTime: "FULL_TIME";
        readonly Contractor: "CONTRACTOR";
        readonly NonEmployee: "NON_EMPLOYEE";
        readonly FormerEmployee: "FORMER_EMPLOYEE";
    }>;
}

/** @internal */
declare const PersonMetadataType$inboundSchema: z.ZodNativeEnum<typeof PersonMetadataType>;

/** @internal */
declare const PersonMetadataType$outboundSchema: z.ZodNativeEnum<typeof PersonMetadataType>;

declare const PersonMetadataType: {
    readonly FullTime: "FULL_TIME";
    readonly Contractor: "CONTRACTOR";
    readonly NonEmployee: "NON_EMPLOYEE";
    readonly FormerEmployee: "FORMER_EMPLOYEE";
};

declare type PersonMetadataType = ClosedEnum<typeof PersonMetadataType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PersonObject$ {
    /** @deprecated use `PersonObject$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PersonObject, z.ZodTypeDef, unknown>;
    /** @deprecated use `PersonObject$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PersonObject$Outbound, z.ZodTypeDef, PersonObject>;
    /** @deprecated use `PersonObject$Outbound` instead. */
    type Outbound = PersonObject$Outbound;
}

/** @internal */
declare const PersonObject$inboundSchema: z.ZodType<PersonObject, z.ZodTypeDef, unknown>;

/** @internal */
declare type PersonObject$Outbound = {
    name: string;
    obfuscatedId: string;
};

/** @internal */
declare const PersonObject$outboundSchema: z.ZodType<PersonObject$Outbound, z.ZodTypeDef, PersonObject>;

declare type PersonObject = {
    /**
     * The display name.
     */
    name: string;
    /**
     * An opaque identifier that can be used to request metadata for a Person.
     */
    obfuscatedId: string;
};

declare function personObjectFromJSON(jsonString: string): Result<PersonObject, SDKValidationError>;

declare function personObjectToJSON(personObject: PersonObject): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PersonTeam$ {
    /** @deprecated use `PersonTeam$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PersonTeam, z.ZodTypeDef, unknown>;
    /** @deprecated use `PersonTeam$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PersonTeam$Outbound, z.ZodTypeDef, PersonTeam>;
    /** @deprecated use `PersonTeam$Outbound` instead. */
    type Outbound = PersonTeam$Outbound;
}

/** @internal */
declare const PersonTeam$inboundSchema: z.ZodType<PersonTeam, z.ZodTypeDef, unknown>;

/** @internal */
declare type PersonTeam$Outbound = {
    id?: string | undefined;
    name?: string | undefined;
    externalLink?: string | undefined;
    relationship: string;
    joinDate?: string | undefined;
};

/** @internal */
declare const PersonTeam$outboundSchema: z.ZodType<PersonTeam$Outbound, z.ZodTypeDef, PersonTeam>;

/**
 * Use `id` if you index teams via Glean, and use `name` and `externalLink` if you want to use your own team pages
 */
declare type PersonTeam = {
    /**
     * Unique identifier
     */
    id?: string | undefined;
    /**
     * Team name
     */
    name?: string | undefined;
    /**
     * Link to a team page on the internet or your company's intranet
     */
    externalLink?: string | undefined;
    /**
     * The team member's relationship to the team. This defaults to MEMBER if not set.
     */
    relationship?: PersonTeamRelationship | undefined;
    /**
     * The team member's start date
     */
    joinDate?: Date | undefined;
};

declare function personTeamFromJSON(jsonString: string): Result<PersonTeam, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PersonTeamRelationship$ {
    /** @deprecated use `PersonTeamRelationship$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Member: "MEMBER";
        readonly Manager: "MANAGER";
        readonly Lead: "LEAD";
        readonly PointOfContact: "POINT_OF_CONTACT";
        readonly Other: "OTHER";
    }>;
    /** @deprecated use `PersonTeamRelationship$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Member: "MEMBER";
        readonly Manager: "MANAGER";
        readonly Lead: "LEAD";
        readonly PointOfContact: "POINT_OF_CONTACT";
        readonly Other: "OTHER";
    }>;
}

/** @internal */
declare const PersonTeamRelationship$inboundSchema: z.ZodNativeEnum<typeof PersonTeamRelationship>;

/** @internal */
declare const PersonTeamRelationship$outboundSchema: z.ZodNativeEnum<typeof PersonTeamRelationship>;

/**
 * The team member's relationship to the team. This defaults to MEMBER if not set.
 */
declare const PersonTeamRelationship: {
    readonly Member: "MEMBER";
    readonly Manager: "MANAGER";
    readonly Lead: "LEAD";
    readonly PointOfContact: "POINT_OF_CONTACT";
    readonly Other: "OTHER";
};

/**
 * The team member's relationship to the team. This defaults to MEMBER if not set.
 */
declare type PersonTeamRelationship = ClosedEnum<typeof PersonTeamRelationship>;

declare function personTeamToJSON(personTeam: PersonTeam): string;

declare function personToJSON(person: Person): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PersonToTeamRelationship$ {
    /** @deprecated use `PersonToTeamRelationship$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PersonToTeamRelationship, z.ZodTypeDef, unknown>;
    /** @deprecated use `PersonToTeamRelationship$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PersonToTeamRelationship$Outbound, z.ZodTypeDef, PersonToTeamRelationship>;
    /** @deprecated use `PersonToTeamRelationship$Outbound` instead. */
    type Outbound = PersonToTeamRelationship$Outbound;
}

/** @internal */
declare const PersonToTeamRelationship$inboundSchema: z.ZodType<PersonToTeamRelationship, z.ZodTypeDef, unknown>;

/** @internal */
declare type PersonToTeamRelationship$Outbound = {
    person: Person$Outbound;
    relationship: string;
    customRelationshipStr?: string | undefined;
    joinDate?: string | undefined;
};

/** @internal */
declare const PersonToTeamRelationship$outboundSchema: z.ZodType<PersonToTeamRelationship$Outbound, z.ZodTypeDef, PersonToTeamRelationship>;

/**
 * Metadata about the relationship of a person to a team.
 */
declare type PersonToTeamRelationship = {
    person: Person;
    /**
     * The team member's relationship to the team. This defaults to MEMBER if not set.
     */
    relationship?: PersonToTeamRelationshipRelationship | undefined;
    /**
     * Displayed name for the relationship if relationship is set to `OTHER`.
     */
    customRelationshipStr?: string | undefined;
    /**
     * The team member's start date
     */
    joinDate?: Date | undefined;
};

declare function personToTeamRelationshipFromJSON(jsonString: string): Result<PersonToTeamRelationship, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PersonToTeamRelationshipRelationship$ {
    /** @deprecated use `PersonToTeamRelationshipRelationship$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Member: "MEMBER";
        readonly Manager: "MANAGER";
        readonly Lead: "LEAD";
        readonly PointOfContact: "POINT_OF_CONTACT";
        readonly Other: "OTHER";
    }>;
    /** @deprecated use `PersonToTeamRelationshipRelationship$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Member: "MEMBER";
        readonly Manager: "MANAGER";
        readonly Lead: "LEAD";
        readonly PointOfContact: "POINT_OF_CONTACT";
        readonly Other: "OTHER";
    }>;
}

/** @internal */
declare const PersonToTeamRelationshipRelationship$inboundSchema: z.ZodNativeEnum<typeof PersonToTeamRelationshipRelationship>;

/** @internal */
declare const PersonToTeamRelationshipRelationship$outboundSchema: z.ZodNativeEnum<typeof PersonToTeamRelationshipRelationship>;

/**
 * The team member's relationship to the team. This defaults to MEMBER if not set.
 */
declare const PersonToTeamRelationshipRelationship: {
    readonly Member: "MEMBER";
    readonly Manager: "MANAGER";
    readonly Lead: "LEAD";
    readonly PointOfContact: "POINT_OF_CONTACT";
    readonly Other: "OTHER";
};

/**
 * The team member's relationship to the team. This defaults to MEMBER if not set.
 */
declare type PersonToTeamRelationshipRelationship = ClosedEnum<typeof PersonToTeamRelationshipRelationship>;

declare function personToTeamRelationshipToJSON(personToTeamRelationship: PersonToTeamRelationship): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PinDocument$ {
    /** @deprecated use `PinDocument$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PinDocument, z.ZodTypeDef, unknown>;
    /** @deprecated use `PinDocument$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PinDocument$Outbound, z.ZodTypeDef, PinDocument>;
    /** @deprecated use `PinDocument$Outbound` instead. */
    type Outbound = PinDocument$Outbound;
}

/** @internal */
declare const PinDocument$inboundSchema: z.ZodType<PinDocument, z.ZodTypeDef, unknown>;

/** @internal */
declare type PinDocument$Outbound = {
    queries?: Array<string> | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    id?: string | undefined;
    documentId: string;
    attribution?: Person$Outbound | undefined;
    updatedBy?: Person$Outbound | undefined;
    createTime?: string | undefined;
    updateTime?: string | undefined;
};

/** @internal */
declare const PinDocument$outboundSchema: z.ZodType<PinDocument$Outbound, z.ZodTypeDef, PinDocument>;

declare type PinDocument = {
    /**
     * The query strings for which the pinned result will show.
     */
    queries?: Array<string> | undefined;
    /**
     * Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * The opaque id of the pin.
     */
    id?: string | undefined;
    /**
     * The document which should be a pinned result.
     */
    documentId: string;
    attribution?: Person | undefined;
    updatedBy?: Person | undefined;
    createTime?: Date | undefined;
    updateTime?: Date | undefined;
};

declare function pinDocumentFromJSON(jsonString: string): Result<PinDocument, SDKValidationError>;

declare function pinDocumentToJSON(pinDocument: PinDocument): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PinRequest$ {
    /** @deprecated use `PinRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PinRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `PinRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PinRequest$Outbound, z.ZodTypeDef, PinRequest>;
    /** @deprecated use `PinRequest$Outbound` instead. */
    type Outbound = PinRequest$Outbound;
}

/** @internal */
declare const PinRequest$inboundSchema: z.ZodType<PinRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type PinRequest$Outbound = {
    queries?: Array<string> | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    documentId?: string | undefined;
};

/** @internal */
declare const PinRequest$outboundSchema: z.ZodType<PinRequest$Outbound, z.ZodTypeDef, PinRequest>;

declare type PinRequest = {
    /**
     * The query strings for which the pinned result will show.
     */
    queries?: Array<string> | undefined;
    /**
     * Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * The document to be pinned.
     */
    documentId?: string | undefined;
};

declare function pinRequestFromJSON(jsonString: string): Result<PinRequest, SDKValidationError>;

declare function pinRequestToJSON(pinRequest: PinRequest): string;

declare class Pins extends ClientSDK {
    /**
     * Update pin
     *
     * @remarks
     * Update an existing user-generated pin.
     */
    update(request: components.EditPinRequest, options?: RequestOptions): Promise<components.PinDocument>;
    /**
     * Read pin
     *
     * @remarks
     * Read pin details given its ID.
     */
    retrieve(request: components.GetPinRequest, options?: RequestOptions): Promise<components.GetPinResponse>;
    /**
     * List pins
     *
     * @remarks
     * Lists all pins.
     */
    list(request: operations.ListpinsRequest, options?: RequestOptions): Promise<components.ListPinsResponse>;
    /**
     * Create pin
     *
     * @remarks
     * Pin a document as a result for a given search query.Pin results that are known to be a good match.
     */
    create(request: components.PinRequest, options?: RequestOptions): Promise<components.PinDocument>;
    /**
     * Delete pin
     *
     * @remarks
     * Unpin a previously pinned result.
     */
    remove(request: components.Unpin, options?: RequestOptions): Promise<void>;
}

declare class Policies extends ClientSDK {
    /**
     * Gets specified policy
     *
     * @remarks
     * Fetches the specified policy version, or the latest if no version is provided.
     */
    retrieve(id: string, version?: number | undefined, options?: RequestOptions): Promise<components.GetDlpReportResponse>;
    /**
     * Updates an existing policy
     *
     * @remarks
     * Updates an existing policy.
     */
    update(updateDlpReportRequest: components.UpdateDlpReportRequest, id: string, options?: RequestOptions): Promise<components.UpdateDlpReportResponse>;
    /**
     * Lists policies
     *
     * @remarks
     * Lists policies with filtering.
     */
    list(autoHide?: boolean | undefined, frequency?: string | undefined, options?: RequestOptions): Promise<components.ListDlpReportsResponse>;
    /**
     * Creates new policy
     *
     * @remarks
     * Creates a new policy with specified specifications and returns its id.
     */
    create(request: components.CreateDlpReportRequest, options?: RequestOptions): Promise<components.CreateDlpReportResponse>;
    /**
     * Downloads violations CSV for policy
     *
     * @remarks
     * Downloads CSV violations report for a specific policy id. This does not support continuous policies.
     */
    download(id: string, options?: RequestOptions): Promise<string>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PossibleValue$ {
    /** @deprecated use `PossibleValue$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PossibleValue, z.ZodTypeDef, unknown>;
    /** @deprecated use `PossibleValue$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PossibleValue$Outbound, z.ZodTypeDef, PossibleValue>;
    /** @deprecated use `PossibleValue$Outbound` instead. */
    type Outbound = PossibleValue$Outbound;
}

/** @internal */
declare const PossibleValue$inboundSchema: z.ZodType<PossibleValue, z.ZodTypeDef, unknown>;

/** @internal */
declare type PossibleValue$Outbound = {
    value?: string | undefined;
    label?: string | undefined;
};

/** @internal */
declare const PossibleValue$outboundSchema: z.ZodType<PossibleValue$Outbound, z.ZodTypeDef, PossibleValue>;

/**
 * Possible value of a specific parameter
 */
declare type PossibleValue = {
    /**
     * Possible value
     */
    value?: string | undefined;
    /**
     * User-friendly label associated with the value
     */
    label?: string | undefined;
};

declare function possibleValueFromJSON(jsonString: string): Result<PossibleValue, SDKValidationError>;

declare function possibleValueToJSON(possibleValue: PossibleValue): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PostApiIndexV1DebugDatasourceDocumentRequest$ {
    /** @deprecated use `PostApiIndexV1DebugDatasourceDocumentRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceDocumentRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `PostApiIndexV1DebugDatasourceDocumentRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceDocumentRequest$Outbound, z.ZodTypeDef, PostApiIndexV1DebugDatasourceDocumentRequest>;
    /** @deprecated use `PostApiIndexV1DebugDatasourceDocumentRequest$Outbound` instead. */
    type Outbound = PostApiIndexV1DebugDatasourceDocumentRequest$Outbound;
}

/** @internal */
declare const PostApiIndexV1DebugDatasourceDocumentRequest$inboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceDocumentRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type PostApiIndexV1DebugDatasourceDocumentRequest$Outbound = {
    datasource: string;
    DebugDocumentRequest: components.DebugDocumentRequest$Outbound;
};

/** @internal */
declare const PostApiIndexV1DebugDatasourceDocumentRequest$outboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceDocumentRequest$Outbound, z.ZodTypeDef, PostApiIndexV1DebugDatasourceDocumentRequest>;

declare type PostApiIndexV1DebugDatasourceDocumentRequest = {
    /**
     * The datasource to which the document belongs
     */
    datasource: string;
    debugDocumentRequest: components.DebugDocumentRequest;
};

declare function postApiIndexV1DebugDatasourceDocumentRequestFromJSON(jsonString: string): Result<PostApiIndexV1DebugDatasourceDocumentRequest, SDKValidationError>;

declare function postApiIndexV1DebugDatasourceDocumentRequestToJSON(postApiIndexV1DebugDatasourceDocumentRequest: PostApiIndexV1DebugDatasourceDocumentRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PostApiIndexV1DebugDatasourceDocumentsRequest$ {
    /** @deprecated use `PostApiIndexV1DebugDatasourceDocumentsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceDocumentsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `PostApiIndexV1DebugDatasourceDocumentsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceDocumentsRequest$Outbound, z.ZodTypeDef, PostApiIndexV1DebugDatasourceDocumentsRequest>;
    /** @deprecated use `PostApiIndexV1DebugDatasourceDocumentsRequest$Outbound` instead. */
    type Outbound = PostApiIndexV1DebugDatasourceDocumentsRequest$Outbound;
}

/** @internal */
declare const PostApiIndexV1DebugDatasourceDocumentsRequest$inboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceDocumentsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type PostApiIndexV1DebugDatasourceDocumentsRequest$Outbound = {
    datasource: string;
    DebugDocumentsRequest: components.DebugDocumentsRequest$Outbound;
};

/** @internal */
declare const PostApiIndexV1DebugDatasourceDocumentsRequest$outboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceDocumentsRequest$Outbound, z.ZodTypeDef, PostApiIndexV1DebugDatasourceDocumentsRequest>;

declare type PostApiIndexV1DebugDatasourceDocumentsRequest = {
    /**
     * The datasource to which the document belongs
     */
    datasource: string;
    debugDocumentsRequest: components.DebugDocumentsRequest;
};

declare function postApiIndexV1DebugDatasourceDocumentsRequestFromJSON(jsonString: string): Result<PostApiIndexV1DebugDatasourceDocumentsRequest, SDKValidationError>;

declare function postApiIndexV1DebugDatasourceDocumentsRequestToJSON(postApiIndexV1DebugDatasourceDocumentsRequest: PostApiIndexV1DebugDatasourceDocumentsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PostApiIndexV1DebugDatasourceStatusRequest$ {
    /** @deprecated use `PostApiIndexV1DebugDatasourceStatusRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceStatusRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `PostApiIndexV1DebugDatasourceStatusRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceStatusRequest$Outbound, z.ZodTypeDef, PostApiIndexV1DebugDatasourceStatusRequest>;
    /** @deprecated use `PostApiIndexV1DebugDatasourceStatusRequest$Outbound` instead. */
    type Outbound = PostApiIndexV1DebugDatasourceStatusRequest$Outbound;
}

/** @internal */
declare const PostApiIndexV1DebugDatasourceStatusRequest$inboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceStatusRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type PostApiIndexV1DebugDatasourceStatusRequest$Outbound = {
    datasource: string;
};

/** @internal */
declare const PostApiIndexV1DebugDatasourceStatusRequest$outboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceStatusRequest$Outbound, z.ZodTypeDef, PostApiIndexV1DebugDatasourceStatusRequest>;

declare type PostApiIndexV1DebugDatasourceStatusRequest = {
    /**
     * The datasource to get debug status for.
     */
    datasource: string;
};

declare function postApiIndexV1DebugDatasourceStatusRequestFromJSON(jsonString: string): Result<PostApiIndexV1DebugDatasourceStatusRequest, SDKValidationError>;

declare function postApiIndexV1DebugDatasourceStatusRequestToJSON(postApiIndexV1DebugDatasourceStatusRequest: PostApiIndexV1DebugDatasourceStatusRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PostApiIndexV1DebugDatasourceUserRequest$ {
    /** @deprecated use `PostApiIndexV1DebugDatasourceUserRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceUserRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `PostApiIndexV1DebugDatasourceUserRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceUserRequest$Outbound, z.ZodTypeDef, PostApiIndexV1DebugDatasourceUserRequest>;
    /** @deprecated use `PostApiIndexV1DebugDatasourceUserRequest$Outbound` instead. */
    type Outbound = PostApiIndexV1DebugDatasourceUserRequest$Outbound;
}

/** @internal */
declare const PostApiIndexV1DebugDatasourceUserRequest$inboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceUserRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type PostApiIndexV1DebugDatasourceUserRequest$Outbound = {
    datasource: string;
    DebugUserRequest: components.DebugUserRequest$Outbound;
};

/** @internal */
declare const PostApiIndexV1DebugDatasourceUserRequest$outboundSchema: z.ZodType<PostApiIndexV1DebugDatasourceUserRequest$Outbound, z.ZodTypeDef, PostApiIndexV1DebugDatasourceUserRequest>;

declare type PostApiIndexV1DebugDatasourceUserRequest = {
    /**
     * The datasource to which the user belongs
     */
    datasource: string;
    debugUserRequest: components.DebugUserRequest;
};

declare function postApiIndexV1DebugDatasourceUserRequestFromJSON(jsonString: string): Result<PostApiIndexV1DebugDatasourceUserRequest, SDKValidationError>;

declare function postApiIndexV1DebugDatasourceUserRequestToJSON(postApiIndexV1DebugDatasourceUserRequest: PostApiIndexV1DebugDatasourceUserRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ProcessAllDocumentsRequest$ {
    /** @deprecated use `ProcessAllDocumentsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProcessAllDocumentsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProcessAllDocumentsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProcessAllDocumentsRequest$Outbound, z.ZodTypeDef, ProcessAllDocumentsRequest>;
    /** @deprecated use `ProcessAllDocumentsRequest$Outbound` instead. */
    type Outbound = ProcessAllDocumentsRequest$Outbound;
}

/** @internal */
declare const ProcessAllDocumentsRequest$inboundSchema: z.ZodType<ProcessAllDocumentsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ProcessAllDocumentsRequest$Outbound = {
    datasource?: string | undefined;
};

/** @internal */
declare const ProcessAllDocumentsRequest$outboundSchema: z.ZodType<ProcessAllDocumentsRequest$Outbound, z.ZodTypeDef, ProcessAllDocumentsRequest>;

/**
 * Describes the request body of the /processalldocuments API call
 */
declare type ProcessAllDocumentsRequest = {
    /**
     * If provided, process documents only for this custom datasource. Otherwise all uploaded documents are processed.
     */
    datasource?: string | undefined;
};

declare function processAllDocumentsRequestFromJSON(jsonString: string): Result<ProcessAllDocumentsRequest, SDKValidationError>;

declare function processAllDocumentsRequestToJSON(processAllDocumentsRequest: ProcessAllDocumentsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ProcessAllMembershipsRequest$ {
    /** @deprecated use `ProcessAllMembershipsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProcessAllMembershipsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProcessAllMembershipsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProcessAllMembershipsRequest$Outbound, z.ZodTypeDef, ProcessAllMembershipsRequest>;
    /** @deprecated use `ProcessAllMembershipsRequest$Outbound` instead. */
    type Outbound = ProcessAllMembershipsRequest$Outbound;
}

/** @internal */
declare const ProcessAllMembershipsRequest$inboundSchema: z.ZodType<ProcessAllMembershipsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ProcessAllMembershipsRequest$Outbound = {
    datasource?: string | undefined;
};

/** @internal */
declare const ProcessAllMembershipsRequest$outboundSchema: z.ZodType<ProcessAllMembershipsRequest$Outbound, z.ZodTypeDef, ProcessAllMembershipsRequest>;

/**
 * Describes the request body of the /processallmemberships API call
 */
declare type ProcessAllMembershipsRequest = {
    /**
     * If provided, process group memberships only for this custom datasource. Otherwise all uploaded memberships are processed.
     */
    datasource?: string | undefined;
};

declare function processAllMembershipsRequestFromJSON(jsonString: string): Result<ProcessAllMembershipsRequest, SDKValidationError>;

declare function processAllMembershipsRequestToJSON(processAllMembershipsRequest: ProcessAllMembershipsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ProcessingHistoryEvent$ {
    /** @deprecated use `ProcessingHistoryEvent$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProcessingHistoryEvent, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProcessingHistoryEvent$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProcessingHistoryEvent$Outbound, z.ZodTypeDef, ProcessingHistoryEvent>;
    /** @deprecated use `ProcessingHistoryEvent$Outbound` instead. */
    type Outbound = ProcessingHistoryEvent$Outbound;
}

/** @internal */
declare const ProcessingHistoryEvent$inboundSchema: z.ZodType<ProcessingHistoryEvent, z.ZodTypeDef, unknown>;

/** @internal */
declare type ProcessingHistoryEvent$Outbound = {
    startTime?: string | undefined;
    endTime?: string | undefined;
};

/** @internal */
declare const ProcessingHistoryEvent$outboundSchema: z.ZodType<ProcessingHistoryEvent$Outbound, z.ZodTypeDef, ProcessingHistoryEvent>;

/**
 * Processing history event for a datasource
 */
declare type ProcessingHistoryEvent = {
    /**
     * The start time of the processing in ISO 8601 format
     */
    startTime?: string | undefined;
    /**
     * The end time of the processing in ISO 8601 format, 'NA' if still in progress
     */
    endTime?: string | undefined;
};

declare function processingHistoryEventFromJSON(jsonString: string): Result<ProcessingHistoryEvent, SDKValidationError>;

declare function processingHistoryEventToJSON(processingHistoryEvent: ProcessingHistoryEvent): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ProcessingState$ {
    /** @deprecated use `ProcessingState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Unavailable: "UNAVAILABLE";
        readonly UploadStarted: "UPLOAD STARTED";
        readonly UploadInProgress: "UPLOAD IN PROGRESS";
        readonly UploadCompleted: "UPLOAD COMPLETED";
        readonly DeletionPaused: "DELETION PAUSED";
        readonly IndexingCompleted: "INDEXING COMPLETED";
    }>;
    /** @deprecated use `ProcessingState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Unavailable: "UNAVAILABLE";
        readonly UploadStarted: "UPLOAD STARTED";
        readonly UploadInProgress: "UPLOAD IN PROGRESS";
        readonly UploadCompleted: "UPLOAD COMPLETED";
        readonly DeletionPaused: "DELETION PAUSED";
        readonly IndexingCompleted: "INDEXING COMPLETED";
    }>;
}

/** @internal */
declare const ProcessingState$inboundSchema: z.ZodNativeEnum<typeof ProcessingState>;

/** @internal */
declare const ProcessingState$outboundSchema: z.ZodNativeEnum<typeof ProcessingState>;

/**
 * The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
 */
declare const ProcessingState: {
    readonly Unavailable: "UNAVAILABLE";
    readonly UploadStarted: "UPLOAD STARTED";
    readonly UploadInProgress: "UPLOAD IN PROGRESS";
    readonly UploadCompleted: "UPLOAD COMPLETED";
    readonly DeletionPaused: "DELETION PAUSED";
    readonly IndexingCompleted: "INDEXING COMPLETED";
};

/**
 * The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
 */
declare type ProcessingState = ClosedEnum<typeof ProcessingState>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Prominence$ {
    /** @deprecated use `Prominence$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Hero: "HERO";
        readonly Promoted: "PROMOTED";
        readonly Standard: "STANDARD";
    }>;
    /** @deprecated use `Prominence$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Hero: "HERO";
        readonly Promoted: "PROMOTED";
        readonly Standard: "STANDARD";
    }>;
}

/** @internal */
declare const Prominence$inboundSchema: z.ZodNativeEnum<typeof Prominence>;

/** @internal */
declare const Prominence$outboundSchema: z.ZodNativeEnum<typeof Prominence>;

/**
 * The level of visual distinction that should be given to a result.
 */
declare const Prominence: {
    readonly Hero: "HERO";
    readonly Promoted: "PROMOTED";
    readonly Standard: "STANDARD";
};

/**
 * The level of visual distinction that should be given to a result.
 */
declare type Prominence = ClosedEnum<typeof Prominence>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PromptTemplate$ {
    /** @deprecated use `PromptTemplate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PromptTemplate, z.ZodTypeDef, unknown>;
    /** @deprecated use `PromptTemplate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PromptTemplate$Outbound, z.ZodTypeDef, PromptTemplate>;
    /** @deprecated use `PromptTemplate$Outbound` instead. */
    type Outbound = PromptTemplate$Outbound;
}

/** @internal */
declare const PromptTemplate$inboundSchema: z.ZodType<PromptTemplate, z.ZodTypeDef, unknown>;

/** @internal */
declare type PromptTemplate$Outbound = {
    name?: string | undefined;
    template: string;
    applicationId?: string | undefined;
    inclusions?: ChatRestrictionFilters$Outbound | undefined;
    addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    permissions?: ObjectPermissions$Outbound | undefined;
    id?: string | undefined;
    author?: Person$Outbound | undefined;
    createTimestamp?: number | undefined;
    lastUpdateTimestamp?: number | undefined;
    lastUpdatedBy?: Person$Outbound | undefined;
    roles?: Array<UserRoleSpecification$Outbound> | undefined;
};

/** @internal */
declare const PromptTemplate$outboundSchema: z.ZodType<PromptTemplate$Outbound, z.ZodTypeDef, PromptTemplate>;

declare type PromptTemplate = {
    /**
     * The user-given identifier for this prompt template.
     */
    name?: string | undefined;
    /**
     * The actual template string.
     */
    template: string;
    /**
     * The Application Id the prompt template should be created under. Empty for default assistant.
     */
    applicationId?: string | undefined;
    inclusions?: ChatRestrictionFilters | undefined;
    /**
     * A list of added user roles for the Workflow.
     */
    addedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of removed user roles for the Workflow.
     */
    removedRoles?: Array<UserRoleSpecification> | undefined;
    permissions?: ObjectPermissions | undefined;
    /**
     * Opaque id for this prompt template
     */
    id?: string | undefined;
    author?: Person | undefined;
    /**
     * Server Unix timestamp of the creation time.
     */
    createTimestamp?: number | undefined;
    /**
     * Server Unix timestamp of the last update time.
     */
    lastUpdateTimestamp?: number | undefined;
    lastUpdatedBy?: Person | undefined;
    /**
     * A list of roles for this prompt template explicitly granted.
     */
    roles?: Array<UserRoleSpecification> | undefined;
};

declare function promptTemplateFromJSON(jsonString: string): Result<PromptTemplate, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PromptTemplateResult$ {
    /** @deprecated use `PromptTemplateResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PromptTemplateResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `PromptTemplateResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PromptTemplateResult$Outbound, z.ZodTypeDef, PromptTemplateResult>;
    /** @deprecated use `PromptTemplateResult$Outbound` instead. */
    type Outbound = PromptTemplateResult$Outbound;
}

/** @internal */
declare const PromptTemplateResult$inboundSchema: z.ZodType<PromptTemplateResult, z.ZodTypeDef, unknown>;

/** @internal */
declare type PromptTemplateResult$Outbound = {
    promptTemplate?: PromptTemplate$Outbound | undefined;
    trackingToken?: string | undefined;
    favoriteInfo?: FavoriteInfo$Outbound | undefined;
    runCount?: CountInfo$Outbound | undefined;
};

/** @internal */
declare const PromptTemplateResult$outboundSchema: z.ZodType<PromptTemplateResult$Outbound, z.ZodTypeDef, PromptTemplateResult>;

declare type PromptTemplateResult = {
    promptTemplate?: PromptTemplate | undefined;
    /**
     * An opaque token that represents this prompt template
     */
    trackingToken?: string | undefined;
    favoriteInfo?: FavoriteInfo | undefined;
    runCount?: CountInfo | undefined;
};

declare function promptTemplateResultFromJSON(jsonString: string): Result<PromptTemplateResult, SDKValidationError>;

declare function promptTemplateResultToJSON(promptTemplateResult: PromptTemplateResult): string;

declare function promptTemplateToJSON(promptTemplate: PromptTemplate): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PropertyDefinition$ {
    /** @deprecated use `PropertyDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PropertyDefinition_2, z.ZodTypeDef, unknown>;
    /** @deprecated use `PropertyDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PropertyDefinition$Outbound, z.ZodTypeDef, PropertyDefinition_2>;
    /** @deprecated use `PropertyDefinition$Outbound` instead. */
    type Outbound = PropertyDefinition$Outbound;
}

/** @internal */
declare const PropertyDefinition$inboundSchema: z.ZodType<PropertyDefinition_2, z.ZodTypeDef, unknown>;

/** @internal */
declare type PropertyDefinition$Outbound = {
    name?: string | undefined;
    displayLabel?: string | undefined;
    displayLabelPlural?: string | undefined;
    propertyType?: string | undefined;
    uiOptions?: string | undefined;
    hideUiFacet?: boolean | undefined;
    uiFacetOrder?: number | undefined;
    skipIndexing?: boolean | undefined;
    group?: string | undefined;
};

/** @internal */
declare const PropertyDefinition$outboundSchema: z.ZodType<PropertyDefinition$Outbound, z.ZodTypeDef, PropertyDefinition_2>;

declare type PropertyDefinition_2 = {
    /**
     * The name of the property in the `DocumentMetadata` (e.g. 'createTime', 'updateTime', 'author', 'container'). In the future, this will support custom properties too.
     */
    name?: string | undefined;
    /**
     * The user friendly label for the property.
     */
    displayLabel?: string | undefined;
    /**
     * The user friendly label for the property that will be used if a plural context.
     */
    displayLabelPlural?: string | undefined;
    /**
     * The type of custom property - this governs the search and faceting behavior. Note that MULTIPICKLIST is not yet supported.
     */
    propertyType?: PropertyType | undefined;
    uiOptions?: UiOptions | undefined;
    /**
     * If true then the property will not show up as a facet in the UI.
     */
    hideUiFacet?: boolean | undefined;
    /**
     * Will be used to set the order of facets in the UI, if present. If set for one facet, must be set for all non-hidden UI facets. Must take on an integer value from 1 (shown at the top) to N (shown last), where N is the number of non-hidden UI facets. These facets will be ordered below the built-in "Type" and "Tag" operators.
     */
    uiFacetOrder?: number | undefined;
    /**
     * If true then the property will not be indexed for retrieval and ranking.
     */
    skipIndexing?: boolean | undefined;
    /**
     * The unique identifier of the `PropertyGroup` to which this property belongs.
     */
    group?: string | undefined;
};

declare function propertyDefinitionFromJSON(jsonString: string): Result<PropertyDefinition_2, SDKValidationError>;

declare function propertyDefinitionToJSON(propertyDefinition: PropertyDefinition_2): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PropertyGroup$ {
    /** @deprecated use `PropertyGroup$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PropertyGroup, z.ZodTypeDef, unknown>;
    /** @deprecated use `PropertyGroup$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PropertyGroup$Outbound, z.ZodTypeDef, PropertyGroup>;
    /** @deprecated use `PropertyGroup$Outbound` instead. */
    type Outbound = PropertyGroup$Outbound;
}

/** @internal */
declare const PropertyGroup$inboundSchema: z.ZodType<PropertyGroup, z.ZodTypeDef, unknown>;

/** @internal */
declare type PropertyGroup$Outbound = {
    name?: string | undefined;
    displayLabel?: string | undefined;
};

/** @internal */
declare const PropertyGroup$outboundSchema: z.ZodType<PropertyGroup$Outbound, z.ZodTypeDef, PropertyGroup>;

/**
 * A grouping for multiple PropertyDefinition. Grouped properties will be displayed together in the UI.
 */
declare type PropertyGroup = {
    /**
     * The unique identifier of the group.
     */
    name?: string | undefined;
    /**
     * The user-friendly group label to display.
     */
    displayLabel?: string | undefined;
};

declare function propertyGroupFromJSON(jsonString: string): Result<PropertyGroup, SDKValidationError>;

declare function propertyGroupToJSON(propertyGroup: PropertyGroup): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace PropertyType$ {
    /** @deprecated use `PropertyType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Text: "TEXT";
        readonly Date: "DATE";
        readonly Int: "INT";
        readonly Userid: "USERID";
        readonly Picklist: "PICKLIST";
        readonly Textlist: "TEXTLIST";
        readonly Multipicklist: "MULTIPICKLIST";
    }>;
    /** @deprecated use `PropertyType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Text: "TEXT";
        readonly Date: "DATE";
        readonly Int: "INT";
        readonly Userid: "USERID";
        readonly Picklist: "PICKLIST";
        readonly Textlist: "TEXTLIST";
        readonly Multipicklist: "MULTIPICKLIST";
    }>;
}

/** @internal */
declare const PropertyType$inboundSchema: z.ZodNativeEnum<typeof PropertyType>;

/** @internal */
declare const PropertyType$outboundSchema: z.ZodNativeEnum<typeof PropertyType>;

/**
 * The type of custom property - this governs the search and faceting behavior. Note that MULTIPICKLIST is not yet supported.
 */
declare const PropertyType: {
    readonly Text: "TEXT";
    readonly Date: "DATE";
    readonly Int: "INT";
    readonly Userid: "USERID";
    readonly Picklist: "PICKLIST";
    readonly Textlist: "TEXTLIST";
    readonly Multipicklist: "MULTIPICKLIST";
};

/**
 * The type of custom property - this governs the search and faceting behavior. Note that MULTIPICKLIST is not yet supported.
 */
declare type PropertyType = ClosedEnum<typeof PropertyType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Provider$ {
    /** @deprecated use `Provider$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Zoom: "ZOOM";
        readonly Hangouts: "HANGOUTS";
    }>;
    /** @deprecated use `Provider$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Zoom: "ZOOM";
        readonly Hangouts: "HANGOUTS";
    }>;
}

/** @internal */
declare const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider>;

/** @internal */
declare const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider>;

declare const Provider: {
    readonly Zoom: "ZOOM";
    readonly Hangouts: "HANGOUTS";
};

declare type Provider = ClosedEnum<typeof Provider>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace QueryInsight$ {
    /** @deprecated use `QueryInsight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryInsight, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryInsight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryInsight$Outbound, z.ZodTypeDef, QueryInsight>;
    /** @deprecated use `QueryInsight$Outbound` instead. */
    type Outbound = QueryInsight$Outbound;
}

/** @internal */
declare const QueryInsight$inboundSchema: z.ZodType<QueryInsight, z.ZodTypeDef, unknown>;

/** @internal */
declare type QueryInsight$Outbound = {
    query: string;
    searchCount?: CountInfo$Outbound | undefined;
    searchorCount?: CountInfo$Outbound | undefined;
    searchWithClickCount?: CountInfo$Outbound | undefined;
    clickCount?: CountInfo$Outbound | undefined;
    similarQueries?: Array<QueryInsight$Outbound> | undefined;
};

/** @internal */
declare const QueryInsight$outboundSchema: z.ZodType<QueryInsight$Outbound, z.ZodTypeDef, QueryInsight>;

declare type QueryInsight = {
    /**
     * The query string the information is about.
     */
    query: string;
    searchCount?: CountInfo | undefined;
    searchorCount?: CountInfo | undefined;
    searchWithClickCount?: CountInfo | undefined;
    clickCount?: CountInfo | undefined;
    /**
     * list of similar queries to current one.
     */
    similarQueries?: Array<QueryInsight> | undefined;
};

declare function queryInsightFromJSON(jsonString: string): Result<QueryInsight, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace QueryInsightsResponse$ {
    /** @deprecated use `QueryInsightsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QueryInsightsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `QueryInsightsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QueryInsightsResponse$Outbound, z.ZodTypeDef, QueryInsightsResponse>;
    /** @deprecated use `QueryInsightsResponse$Outbound` instead. */
    type Outbound = QueryInsightsResponse$Outbound;
}

/** @internal */
declare const QueryInsightsResponse$inboundSchema: z.ZodType<QueryInsightsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type QueryInsightsResponse$Outbound = {
    lastLogTimestamp?: number | undefined;
    queryInsights?: Array<QueryInsight$Outbound> | undefined;
    lowPerformingQueryInsights?: Array<QueryInsight$Outbound> | undefined;
    departments?: Array<string> | undefined;
    minVisitorThreshold?: number | undefined;
};

/** @internal */
declare const QueryInsightsResponse$outboundSchema: z.ZodType<QueryInsightsResponse$Outbound, z.ZodTypeDef, QueryInsightsResponse>;

declare type QueryInsightsResponse = {
    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    lastLogTimestamp?: number | undefined;
    /**
     * Insights for queries.
     */
    queryInsights?: Array<QueryInsight> | undefined;
    /**
     * Insights for low performing queries without good results.
     */
    lowPerformingQueryInsights?: Array<QueryInsight> | undefined;
    /**
     * list of departments applicable for queries tab.
     */
    departments?: Array<string> | undefined;
    /**
     * Min threshold in number of visitors while populating results, otherwise 0.
     */
    minVisitorThreshold?: number | undefined;
};

declare function queryInsightsResponseFromJSON(jsonString: string): Result<QueryInsightsResponse, SDKValidationError>;

declare function queryInsightsResponseToJSON(queryInsightsResponse: QueryInsightsResponse): string;

declare function queryInsightToJSON(queryInsight: QueryInsight): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace QuerySuggestion$ {
    /** @deprecated use `QuerySuggestion$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QuerySuggestion, z.ZodTypeDef, unknown>;
    /** @deprecated use `QuerySuggestion$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QuerySuggestion$Outbound, z.ZodTypeDef, QuerySuggestion>;
    /** @deprecated use `QuerySuggestion$Outbound` instead. */
    type Outbound = QuerySuggestion$Outbound;
}

/** @internal */
declare const QuerySuggestion$inboundSchema: z.ZodType<QuerySuggestion, z.ZodTypeDef, unknown>;

/** @internal */
declare type QuerySuggestion$Outbound = {
    missingTerm?: string | undefined;
    query: string;
    searchProviderInfo?: SearchProviderInfo$Outbound | undefined;
    label?: string | undefined;
    datasource?: string | undefined;
    requestOptions?: SearchRequestOptions$Outbound | undefined;
    ranges?: Array<TextRange$Outbound> | undefined;
    inputDetails?: SearchRequestInputDetails$Outbound | undefined;
};

/** @internal */
declare const QuerySuggestion$outboundSchema: z.ZodType<QuerySuggestion$Outbound, z.ZodTypeDef, QuerySuggestion>;

declare type QuerySuggestion = {
    /**
     * A query term missing from the original query on which this suggestion is based.
     */
    missingTerm?: string | undefined;
    /**
     * The query being suggested (e.g. enforcing the missing term from the original query).
     */
    query: string;
    searchProviderInfo?: SearchProviderInfo | undefined;
    /**
     * A user-facing description to display for the suggestion.
     */
    label?: string | undefined;
    /**
     * The datasource associated with the suggestion.
     */
    datasource?: string | undefined;
    requestOptions?: SearchRequestOptions | undefined;
    /**
     * The bolded ranges within the query of the QuerySuggestion.
     */
    ranges?: Array<TextRange> | undefined;
    inputDetails?: SearchRequestInputDetails | undefined;
};

declare function querySuggestionFromJSON(jsonString: string): Result<QuerySuggestion, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace QuerySuggestionList$ {
    /** @deprecated use `QuerySuggestionList$inboundSchema` instead. */
    const inboundSchema: z.ZodType<QuerySuggestionList, z.ZodTypeDef, unknown>;
    /** @deprecated use `QuerySuggestionList$outboundSchema` instead. */
    const outboundSchema: z.ZodType<QuerySuggestionList$Outbound, z.ZodTypeDef, QuerySuggestionList>;
    /** @deprecated use `QuerySuggestionList$Outbound` instead. */
    type Outbound = QuerySuggestionList$Outbound;
}

/** @internal */
declare const QuerySuggestionList$inboundSchema: z.ZodType<QuerySuggestionList, z.ZodTypeDef, unknown>;

/** @internal */
declare type QuerySuggestionList$Outbound = {
    suggestions?: Array<QuerySuggestion$Outbound> | undefined;
    person?: Person$Outbound | undefined;
};

/** @internal */
declare const QuerySuggestionList$outboundSchema: z.ZodType<QuerySuggestionList$Outbound, z.ZodTypeDef, QuerySuggestionList>;

declare type QuerySuggestionList = {
    suggestions?: Array<QuerySuggestion> | undefined;
    person?: Person | undefined;
};

declare function querySuggestionListFromJSON(jsonString: string): Result<QuerySuggestionList, SDKValidationError>;

declare function querySuggestionListToJSON(querySuggestionList: QuerySuggestionList): string;

declare function querySuggestionToJSON(querySuggestion: QuerySuggestion): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Quicklink$ {
    /** @deprecated use `Quicklink$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Quicklink, z.ZodTypeDef, unknown>;
    /** @deprecated use `Quicklink$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Quicklink$Outbound, z.ZodTypeDef, Quicklink>;
    /** @deprecated use `Quicklink$Outbound` instead. */
    type Outbound = Quicklink$Outbound;
}

/** @internal */
declare const Quicklink$inboundSchema: z.ZodType<Quicklink, z.ZodTypeDef, unknown>;

/** @internal */
declare type Quicklink$Outbound = {
    name?: string | undefined;
    shortName?: string | undefined;
    url?: string | undefined;
    iconConfig?: IconConfig$Outbound | undefined;
    id?: string | undefined;
    scopes?: Array<string> | undefined;
};

/** @internal */
declare const Quicklink$outboundSchema: z.ZodType<Quicklink$Outbound, z.ZodTypeDef, Quicklink>;

/**
 * An action for a specific datasource that will show up in autocomplete and app card, e.g. "Create new issue" for jira.
 */
declare type Quicklink = {
    /**
     * Full action name. Used in autocomplete.
     */
    name?: string | undefined;
    /**
     * Shortened name. Used in app cards.
     */
    shortName?: string | undefined;
    /**
     * The URL of the action.
     */
    url?: string | undefined;
    /**
     * Defines how to render an icon
     */
    iconConfig?: IconConfig | undefined;
    /**
     * Unique identifier of this quicklink
     */
    id?: string | undefined;
    /**
     * The scopes for which this quicklink is applicable
     */
    scopes?: Array<Scope> | undefined;
};

declare function quicklinkFromJSON(jsonString: string): Result<Quicklink, SDKValidationError>;

declare function quicklinkToJSON(quicklink: Quicklink): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Reaction$ {
    /** @deprecated use `Reaction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Reaction, z.ZodTypeDef, unknown>;
    /** @deprecated use `Reaction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Reaction$Outbound, z.ZodTypeDef, Reaction>;
    /** @deprecated use `Reaction$Outbound` instead. */
    type Outbound = Reaction$Outbound;
}

/** @internal */
declare const Reaction$inboundSchema: z.ZodType<Reaction, z.ZodTypeDef, unknown>;

/** @internal */
declare type Reaction$Outbound = {
    type?: string | undefined;
    count?: number | undefined;
    reactors?: Array<Person$Outbound> | undefined;
    reactedByViewer?: boolean | undefined;
};

/** @internal */
declare const Reaction$outboundSchema: z.ZodType<Reaction$Outbound, z.ZodTypeDef, Reaction>;

declare type Reaction = {
    type?: string | undefined;
    /**
     * The count of the reaction type on the document.
     */
    count?: number | undefined;
    reactors?: Array<Person> | undefined;
    /**
     * Whether the user in context reacted with this type to the document.
     */
    reactedByViewer?: boolean | undefined;
};

declare function reactionFromJSON(jsonString: string): Result<Reaction, SDKValidationError>;

declare function reactionToJSON(reaction: Reaction): string;

/**
 * Consumes a stream and returns a concatenated array buffer. Useful in
 * situations where we need to read the whole file because it forms part of a
 * larger payload containing other fields, and we can't modify the underlying
 * request structure.
 */
declare function readableStreamToArrayBuffer(readable: ReadableStream<Uint8Array>): Promise<ArrayBuffer>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ReadPermission$ {
    /** @deprecated use `ReadPermission$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ReadPermission, z.ZodTypeDef, unknown>;
    /** @deprecated use `ReadPermission$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ReadPermission$Outbound, z.ZodTypeDef, ReadPermission>;
    /** @deprecated use `ReadPermission$Outbound` instead. */
    type Outbound = ReadPermission$Outbound;
}

/** @internal */
declare const ReadPermission$inboundSchema: z.ZodType<ReadPermission, z.ZodTypeDef, unknown>;

/** @internal */
declare type ReadPermission$Outbound = {
    scopeType?: string | undefined;
};

/** @internal */
declare const ReadPermission$outboundSchema: z.ZodType<ReadPermission$Outbound, z.ZodTypeDef, ReadPermission>;

/**
 * Describes the read permission level that a user has for a specific feature
 */
declare type ReadPermission = {
    /**
     * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
     */
    scopeType?: ScopeType | undefined;
};

declare function readPermissionFromJSON(jsonString: string): Result<ReadPermission, SDKValidationError>;

declare function readPermissionToJSON(readPermission: ReadPermission): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace RecommendationsRequest$ {
    /** @deprecated use `RecommendationsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RecommendationsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `RecommendationsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RecommendationsRequest$Outbound, z.ZodTypeDef, RecommendationsRequest>;
    /** @deprecated use `RecommendationsRequest$Outbound` instead. */
    type Outbound = RecommendationsRequest$Outbound;
}

/** @internal */
declare const RecommendationsRequest$inboundSchema: z.ZodType<RecommendationsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type RecommendationsRequest$Outbound = {
    timestamp?: string | undefined;
    trackingToken?: string | undefined;
    sessionInfo?: SessionInfo$Outbound | undefined;
    sourceDocument?: Document$Outbound | undefined;
    pageSize?: number | undefined;
    maxSnippetSize?: number | undefined;
    recommendationDocumentSpec?: DocumentSpecUnion$Outbound | undefined;
    requestOptions?: RecommendationsRequestOptions$Outbound | undefined;
};

/** @internal */
declare const RecommendationsRequest$outboundSchema: z.ZodType<RecommendationsRequest$Outbound, z.ZodTypeDef, RecommendationsRequest>;

declare type RecommendationsRequest = {
    /**
     * The ISO 8601 timestamp associated with the client request.
     */
    timestamp?: Date | undefined;
    /**
     * A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
     */
    trackingToken?: string | undefined;
    sessionInfo?: SessionInfo | undefined;
    sourceDocument?: Document_2 | undefined;
    /**
     * Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
     */
    pageSize?: number | undefined;
    /**
     * Hint to the server about how many characters long a snippet may be. Server may return less or more.
     */
    maxSnippetSize?: number | undefined;
    recommendationDocumentSpec?: DocumentSpecUnion | undefined;
    requestOptions?: RecommendationsRequestOptions | undefined;
};

declare function recommendationsRequestFromJSON(jsonString: string): Result<RecommendationsRequest, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace RecommendationsRequestOptions$ {
    /** @deprecated use `RecommendationsRequestOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RecommendationsRequestOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `RecommendationsRequestOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RecommendationsRequestOptions$Outbound, z.ZodTypeDef, RecommendationsRequestOptions>;
    /** @deprecated use `RecommendationsRequestOptions$Outbound` instead. */
    type Outbound = RecommendationsRequestOptions$Outbound;
}

/** @internal */
declare const RecommendationsRequestOptions$inboundSchema: z.ZodType<RecommendationsRequestOptions, z.ZodTypeDef, unknown>;

/** @internal */
declare type RecommendationsRequestOptions$Outbound = {
    datasourceFilter?: string | undefined;
    datasourcesFilter?: Array<string> | undefined;
    facetFilterSets?: Array<FacetFilterSet$Outbound> | undefined;
    context?: Document$Outbound | undefined;
    resultProminence?: Array<string> | undefined;
};

/** @internal */
declare const RecommendationsRequestOptions$outboundSchema: z.ZodType<RecommendationsRequestOptions$Outbound, z.ZodTypeDef, RecommendationsRequestOptions>;

declare type RecommendationsRequestOptions = {
    /**
     * Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
     */
    datasourceFilter?: string | undefined;
    /**
     * Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). All results are returned if missing.
     */
    datasourcesFilter?: Array<string> | undefined;
    /**
     * A list of facet filter sets that will be OR'ed together.
     */
    facetFilterSets?: Array<FacetFilterSet> | undefined;
    context?: Document_2 | undefined;
    /**
     * The types of prominence wanted in results returned. Default is any type.
     */
    resultProminence?: Array<SearchResultProminenceEnum> | undefined;
};

declare function recommendationsRequestOptionsFromJSON(jsonString: string): Result<RecommendationsRequestOptions, SDKValidationError>;

declare function recommendationsRequestOptionsToJSON(recommendationsRequestOptions: RecommendationsRequestOptions): string;

declare function recommendationsRequestToJSON(recommendationsRequest: RecommendationsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ReferenceRange$ {
    /** @deprecated use `ReferenceRange$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ReferenceRange, z.ZodTypeDef, unknown>;
    /** @deprecated use `ReferenceRange$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ReferenceRange$Outbound, z.ZodTypeDef, ReferenceRange>;
    /** @deprecated use `ReferenceRange$Outbound` instead. */
    type Outbound = ReferenceRange$Outbound;
}

/** @internal */
declare const ReferenceRange$inboundSchema: z.ZodType<ReferenceRange, z.ZodTypeDef, unknown>;

/** @internal */
declare type ReferenceRange$Outbound = {
    textRange?: TextRange$Outbound | undefined;
    snippets?: Array<SearchResultSnippet$Outbound> | undefined;
};

/** @internal */
declare const ReferenceRange$outboundSchema: z.ZodType<ReferenceRange$Outbound, z.ZodTypeDef, ReferenceRange>;

/**
 * Each text range from the response can correspond to an array of snippets from the citation source.
 */
declare type ReferenceRange = {
    /**
     * A subsection of a given string to which some special formatting should be applied.
     */
    textRange?: TextRange | undefined;
    snippets?: Array<SearchResultSnippet> | undefined;
};

declare function referenceRangeFromJSON(jsonString: string): Result<ReferenceRange, SDKValidationError>;

declare function referenceRangeToJSON(referenceRange: ReferenceRange): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace RelatedDocuments$ {
    /** @deprecated use `RelatedDocuments$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RelatedDocuments, z.ZodTypeDef, unknown>;
    /** @deprecated use `RelatedDocuments$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RelatedDocuments$Outbound, z.ZodTypeDef, RelatedDocuments>;
    /** @deprecated use `RelatedDocuments$Outbound` instead. */
    type Outbound = RelatedDocuments$Outbound;
}

/** @internal */
declare const RelatedDocuments$inboundSchema: z.ZodType<RelatedDocuments, z.ZodTypeDef, unknown>;

/** @internal */
declare type RelatedDocuments$Outbound = {
    relation?: string | undefined;
    associatedEntityId?: string | undefined;
    querySuggestion?: QuerySuggestion$Outbound | undefined;
    documents?: Array<Document$Outbound> | undefined;
    results?: Array<SearchResult$Outbound> | undefined;
};

/** @internal */
declare const RelatedDocuments$outboundSchema: z.ZodType<RelatedDocuments$Outbound, z.ZodTypeDef, RelatedDocuments>;

declare type RelatedDocuments = {
    /**
     * How this document relates to the including entity.
     */
    relation?: Relation | undefined;
    /**
     * Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)
     */
    associatedEntityId?: string | undefined;
    querySuggestion?: QuerySuggestion | undefined;
    /**
     * A truncated list of documents with this relation. TO BE DEPRECATED.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    documents?: Array<Document_2> | undefined;
    /**
     * A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.
     */
    results?: Array<SearchResult> | undefined;
};

declare function relatedDocumentsFromJSON(jsonString: string): Result<RelatedDocuments, SDKValidationError>;

declare function relatedDocumentsToJSON(relatedDocuments: RelatedDocuments): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace RelatedObject$ {
    /** @deprecated use `RelatedObject$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RelatedObject, z.ZodTypeDef, unknown>;
    /** @deprecated use `RelatedObject$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RelatedObject$Outbound, z.ZodTypeDef, RelatedObject>;
    /** @deprecated use `RelatedObject$Outbound` instead. */
    type Outbound = RelatedObject$Outbound;
}

/** @internal */
declare const RelatedObject$inboundSchema: z.ZodType<RelatedObject, z.ZodTypeDef, unknown>;

/** @internal */
declare type RelatedObject$Outbound = {
    id: string;
    metadata?: RelatedObjectMetadata$Outbound | undefined;
};

/** @internal */
declare const RelatedObject$outboundSchema: z.ZodType<RelatedObject$Outbound, z.ZodTypeDef, RelatedObject>;

declare type RelatedObject = {
    /**
     * The ID of the related object
     */
    id: string;
    /**
     * Some metadata of the object which can be displayed, while not having the actual object.
     */
    metadata?: RelatedObjectMetadata | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace RelatedObjectEdge$ {
    /** @deprecated use `RelatedObjectEdge$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RelatedObjectEdge, z.ZodTypeDef, unknown>;
    /** @deprecated use `RelatedObjectEdge$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RelatedObjectEdge$Outbound, z.ZodTypeDef, RelatedObjectEdge>;
    /** @deprecated use `RelatedObjectEdge$Outbound` instead. */
    type Outbound = RelatedObjectEdge$Outbound;
}

/** @internal */
declare const RelatedObjectEdge$inboundSchema: z.ZodType<RelatedObjectEdge, z.ZodTypeDef, unknown>;

/** @internal */
declare type RelatedObjectEdge$Outbound = {
    objects?: Array<RelatedObject$Outbound> | undefined;
};

/** @internal */
declare const RelatedObjectEdge$outboundSchema: z.ZodType<RelatedObjectEdge$Outbound, z.ZodTypeDef, RelatedObjectEdge>;

declare type RelatedObjectEdge = {
    objects?: Array<RelatedObject> | undefined;
};

declare function relatedObjectEdgeFromJSON(jsonString: string): Result<RelatedObjectEdge, SDKValidationError>;

declare function relatedObjectEdgeToJSON(relatedObjectEdge: RelatedObjectEdge): string;

declare function relatedObjectFromJSON(jsonString: string): Result<RelatedObject, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace RelatedObjectMetadata$ {
    /** @deprecated use `RelatedObjectMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RelatedObjectMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `RelatedObjectMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RelatedObjectMetadata$Outbound, z.ZodTypeDef, RelatedObjectMetadata>;
    /** @deprecated use `RelatedObjectMetadata$Outbound` instead. */
    type Outbound = RelatedObjectMetadata$Outbound;
}

/** @internal */
declare const RelatedObjectMetadata$inboundSchema: z.ZodType<RelatedObjectMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type RelatedObjectMetadata$Outbound = {
    name?: string | undefined;
};

/** @internal */
declare const RelatedObjectMetadata$outboundSchema: z.ZodType<RelatedObjectMetadata$Outbound, z.ZodTypeDef, RelatedObjectMetadata>;

/**
 * Some metadata of the object which can be displayed, while not having the actual object.
 */
declare type RelatedObjectMetadata = {
    /**
     * Placeholder name of the object, not the relationship.
     */
    name?: string | undefined;
};

declare function relatedObjectMetadataFromJSON(jsonString: string): Result<RelatedObjectMetadata, SDKValidationError>;

declare function relatedObjectMetadataToJSON(relatedObjectMetadata: RelatedObjectMetadata): string;

declare function relatedObjectToJSON(relatedObject: RelatedObject): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace RelatedQuestion$ {
    /** @deprecated use `RelatedQuestion$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RelatedQuestion, z.ZodTypeDef, unknown>;
    /** @deprecated use `RelatedQuestion$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RelatedQuestion$Outbound, z.ZodTypeDef, RelatedQuestion>;
    /** @deprecated use `RelatedQuestion$Outbound` instead. */
    type Outbound = RelatedQuestion$Outbound;
}

/** @internal */
declare const RelatedQuestion$inboundSchema: z.ZodType<RelatedQuestion, z.ZodTypeDef, unknown>;

/** @internal */
declare type RelatedQuestion$Outbound = {
    question?: string | undefined;
    answer?: string | undefined;
    ranges?: Array<TextRange$Outbound> | undefined;
};

/** @internal */
declare const RelatedQuestion$outboundSchema: z.ZodType<RelatedQuestion$Outbound, z.ZodTypeDef, RelatedQuestion>;

declare type RelatedQuestion = {
    /**
     * The text of the related question
     */
    question?: string | undefined;
    /**
     * The answer for the related question
     */
    answer?: string | undefined;
    /**
     * Subsections of the answer string to which some special formatting should be applied (eg. bold)
     */
    ranges?: Array<TextRange> | undefined;
};

declare function relatedQuestionFromJSON(jsonString: string): Result<RelatedQuestion, SDKValidationError>;

declare function relatedQuestionToJSON(relatedQuestion: RelatedQuestion): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Relation$ {
    /** @deprecated use `Relation$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Attachment: "ATTACHMENT";
        readonly Canonical: "CANONICAL";
        readonly Case: "CASE";
        readonly ContactLower: "contact";
        readonly ContactUpper: "CONTACT";
        readonly ConversationMessages: "CONVERSATION_MESSAGES";
        readonly Expert: "EXPERT";
        readonly From: "FROM";
        readonly Highlight: "HIGHLIGHT";
        readonly OpportunityLower: "opportunity";
        readonly OpportunityUpper: "OPPORTUNITY";
        readonly Recent: "RECENT";
        readonly Source: "SOURCE";
        readonly Ticket: "TICKET";
        readonly Transcript: "TRANSCRIPT";
        readonly With: "WITH";
    }>;
    /** @deprecated use `Relation$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Attachment: "ATTACHMENT";
        readonly Canonical: "CANONICAL";
        readonly Case: "CASE";
        readonly ContactLower: "contact";
        readonly ContactUpper: "CONTACT";
        readonly ConversationMessages: "CONVERSATION_MESSAGES";
        readonly Expert: "EXPERT";
        readonly From: "FROM";
        readonly Highlight: "HIGHLIGHT";
        readonly OpportunityLower: "opportunity";
        readonly OpportunityUpper: "OPPORTUNITY";
        readonly Recent: "RECENT";
        readonly Source: "SOURCE";
        readonly Ticket: "TICKET";
        readonly Transcript: "TRANSCRIPT";
        readonly With: "WITH";
    }>;
}

/** @internal */
declare const Relation$inboundSchema: z.ZodNativeEnum<typeof Relation>;

/** @internal */
declare const Relation$outboundSchema: z.ZodNativeEnum<typeof Relation>;

/**
 * How this document relates to the including entity.
 */
declare const Relation: {
    readonly Attachment: "ATTACHMENT";
    readonly Canonical: "CANONICAL";
    readonly Case: "CASE";
    readonly ContactLower: "contact";
    readonly ContactUpper: "CONTACT";
    readonly ConversationMessages: "CONVERSATION_MESSAGES";
    readonly Expert: "EXPERT";
    readonly From: "FROM";
    readonly Highlight: "HIGHLIGHT";
    readonly OpportunityLower: "opportunity";
    readonly OpportunityUpper: "OPPORTUNITY";
    readonly Recent: "RECENT";
    readonly Source: "SOURCE";
    readonly Ticket: "TICKET";
    readonly Transcript: "TRANSCRIPT";
    readonly With: "WITH";
};

/**
 * How this document relates to the including entity.
 */
declare type Relation = ClosedEnum<typeof Relation>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace RelationType$ {
    /** @deprecated use `RelationType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Equals: "EQUALS";
        readonly IdEquals: "ID_EQUALS";
        readonly Lt: "LT";
        readonly Gt: "GT";
        readonly NotEquals: "NOT_EQUALS";
    }>;
    /** @deprecated use `RelationType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Equals: "EQUALS";
        readonly IdEquals: "ID_EQUALS";
        readonly Lt: "LT";
        readonly Gt: "GT";
        readonly NotEquals: "NOT_EQUALS";
    }>;
}

/** @internal */
declare const RelationType$inboundSchema: z.ZodNativeEnum<typeof RelationType>;

/** @internal */
declare const RelationType$outboundSchema: z.ZodNativeEnum<typeof RelationType>;

declare const RelationType: {
    readonly Equals: "EQUALS";
    readonly IdEquals: "ID_EQUALS";
    readonly Lt: "LT";
    readonly Gt: "GT";
    readonly NotEquals: "NOT_EQUALS";
};

declare type RelationType = ClosedEnum<typeof RelationType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Reminder$ {
    /** @deprecated use `Reminder$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Reminder, z.ZodTypeDef, unknown>;
    /** @deprecated use `Reminder$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Reminder$Outbound, z.ZodTypeDef, Reminder>;
    /** @deprecated use `Reminder$Outbound` instead. */
    type Outbound = Reminder$Outbound;
}

/** @internal */
declare const Reminder$inboundSchema: z.ZodType<Reminder, z.ZodTypeDef, unknown>;

/** @internal */
declare type Reminder$Outbound = {
    assignee: Person$Outbound;
    requestor?: Person$Outbound | undefined;
    remindAt: number;
    createdAt?: number | undefined;
    reason?: string | undefined;
};

/** @internal */
declare const Reminder$outboundSchema: z.ZodType<Reminder$Outbound, z.ZodTypeDef, Reminder>;

declare type Reminder = {
    assignee: Person;
    requestor?: Person | undefined;
    /**
     * Unix timestamp for when the reminder should trigger (in seconds since epoch UTC).
     */
    remindAt: number;
    /**
     * Unix timestamp for when the reminder was first created (in seconds since epoch UTC).
     */
    createdAt?: number | undefined;
    /**
     * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
     */
    reason?: string | undefined;
};

declare function reminderFromJSON(jsonString: string): Result<Reminder, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ReminderRequest$ {
    /** @deprecated use `ReminderRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ReminderRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ReminderRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ReminderRequest$Outbound, z.ZodTypeDef, ReminderRequest>;
    /** @deprecated use `ReminderRequest$Outbound` instead. */
    type Outbound = ReminderRequest$Outbound;
}

/** @internal */
declare const ReminderRequest$inboundSchema: z.ZodType<ReminderRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ReminderRequest$Outbound = {
    documentId: string;
    assignee?: string | undefined;
    remindInDays?: number | undefined;
    reason?: string | undefined;
};

/** @internal */
declare const ReminderRequest$outboundSchema: z.ZodType<ReminderRequest$Outbound, z.ZodTypeDef, ReminderRequest>;

declare type ReminderRequest = {
    /**
     * The document which the verification is for new reminders and/or update.
     */
    documentId: string;
    /**
     * The obfuscated id of the person this verification is assigned to.
     */
    assignee?: string | undefined;
    /**
     * Reminder for the next verifications in terms of days. For deletion, this will be omitted.
     */
    remindInDays?: number | undefined;
    /**
     * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
     */
    reason?: string | undefined;
};

declare function reminderRequestFromJSON(jsonString: string): Result<ReminderRequest, SDKValidationError>;

declare function reminderRequestToJSON(reminderRequest: ReminderRequest): string;

declare function reminderToJSON(reminder: Reminder): string;

declare class Reports extends ClientSDK {
    /**
     * Creates new one-time report
     *
     * @remarks
     * Creates a new one-time report and executes its batch job.
     */
    create(request: components.UpdateDlpConfigRequest, options?: RequestOptions): Promise<components.UpdateDlpConfigResponse>;
    /**
     * Downloads violations CSV for report
     *
     * @remarks
     * Downloads CSV violations report for a specific report id.
     */
    download(id: string, options?: RequestOptions): Promise<string>;
    /**
     * Fetches report run status
     *
     * @remarks
     * Fetches the status of the run corresponding to the report-id.
     */
    status(id: string, options?: RequestOptions): Promise<components.ReportStatusResponse>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ReportStatusResponse$ {
    /** @deprecated use `ReportStatusResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ReportStatusResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ReportStatusResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ReportStatusResponse$Outbound, z.ZodTypeDef, ReportStatusResponse>;
    /** @deprecated use `ReportStatusResponse$Outbound` instead. */
    type Outbound = ReportStatusResponse$Outbound;
}

/** @internal */
declare const ReportStatusResponse$inboundSchema: z.ZodType<ReportStatusResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ReportStatusResponse$Outbound = {
    status?: string | undefined;
    startTime?: string | undefined;
};

/** @internal */
declare const ReportStatusResponse$outboundSchema: z.ZodType<ReportStatusResponse$Outbound, z.ZodTypeDef, ReportStatusResponse>;

declare type ReportStatusResponse = {
    status?: ReportStatusResponseStatus | undefined;
    /**
     * The timestamp at which the report's run/scan began.
     */
    startTime?: string | undefined;
};

declare function reportStatusResponseFromJSON(jsonString: string): Result<ReportStatusResponse, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ReportStatusResponseStatus$ {
    /** @deprecated use `ReportStatusResponseStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pending: "PENDING";
        readonly Success: "SUCCESS";
        readonly Failure: "FAILURE";
        readonly Cancelled: "CANCELLED";
        readonly Cancelling: "CANCELLING";
        readonly Active: "ACTIVE";
    }>;
    /** @deprecated use `ReportStatusResponseStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pending: "PENDING";
        readonly Success: "SUCCESS";
        readonly Failure: "FAILURE";
        readonly Cancelled: "CANCELLED";
        readonly Cancelling: "CANCELLING";
        readonly Active: "ACTIVE";
    }>;
}

/** @internal */
declare const ReportStatusResponseStatus$inboundSchema: z.ZodNativeEnum<typeof ReportStatusResponseStatus>;

/** @internal */
declare const ReportStatusResponseStatus$outboundSchema: z.ZodNativeEnum<typeof ReportStatusResponseStatus>;

declare const ReportStatusResponseStatus: {
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Failure: "FAILURE";
    readonly Cancelled: "CANCELLED";
    readonly Cancelling: "CANCELLING";
    readonly Active: "ACTIVE";
};

declare type ReportStatusResponseStatus = ClosedEnum<typeof ReportStatusResponseStatus>;

declare function reportStatusResponseToJSON(reportStatusResponse: ReportStatusResponse): string;

/**
 * An error that is raised when a HTTP request was aborted by the client error.
 */
declare class RequestAbortedError extends HTTPClientError {
    readonly name = "RequestAbortedError";
}

declare type RequestConfig = {
    method: string;
    path: string;
    baseURL?: string | URL | undefined;
    query?: string;
    body?: RequestInit["body"];
    headers?: HeadersInit;
    security?: SecurityState | null;
    uaHeader?: string;
    userAgent?: string | undefined;
    timeoutMs?: number;
};

declare type RequestErrorHook = (err: unknown, req: Request) => Awaitable<void>;

declare type RequestInput = {
    /**
     * The URL the request will use.
     */
    url: URL;
    /**
     * Options used to create a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request/Request).
     */
    options?: RequestInit | undefined;
};

declare type RequestOptions = {
    /**
     * Sets a timeout, in milliseconds, on HTTP requests made by an SDK method. If
     * `fetchOptions.signal` is set then it will take precedence over this option.
     */
    timeoutMs?: number;
    /**
     * Set or override a retry policy on HTTP calls.
     */
    retries?: RetryConfig;
    /**
     * Specifies the status codes which should be retried using the given retry policy.
     */
    retryCodes?: string[];
    /**
     * Overrides the base server URL that will be used by an operation.
     */
    serverURL?: string | URL;
    /**
     * @deprecated `fetchOptions` has been flattened into `RequestOptions`.
     *
     * Sets various request options on the `fetch` call made by an SDK method.
     *
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Request/Request#options|Request}
     */
    fetchOptions?: Omit<RequestInit, "method" | "body">;
} & Omit<RequestInit, "method" | "body">;

/**
 * An error that is raised when a HTTP request timed out due to an AbortSignal
 * signal timeout.
 */
declare class RequestTimeoutError extends HTTPClientError {
    readonly name = "RequestTimeoutError";
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace RequestType$ {
    /** @deprecated use `RequestType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Standard: "STANDARD";
        readonly FullDirectory: "FULL_DIRECTORY";
    }>;
    /** @deprecated use `RequestType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Standard: "STANDARD";
        readonly FullDirectory: "FULL_DIRECTORY";
    }>;
}

/** @internal */
declare const RequestType$inboundSchema: z.ZodNativeEnum<typeof RequestType>;

/** @internal */
declare const RequestType$outboundSchema: z.ZodNativeEnum<typeof RequestType>;

/**
 * The type of request being made.
 */
declare const RequestType: {
    readonly Standard: "STANDARD";
    readonly FullDirectory: "FULL_DIRECTORY";
};

/**
 * The type of request being made.
 */
declare type RequestType = ClosedEnum<typeof RequestType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ResponseBody1$ {
    /** @deprecated use `ResponseBody1$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBody1, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBody1$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBody1$Outbound, z.ZodTypeDef, ResponseBody1>;
    /** @deprecated use `ResponseBody1$Outbound` instead. */
    type Outbound = ResponseBody1$Outbound;
}

/** @internal */
declare const ResponseBody1$inboundSchema: z.ZodType<ResponseBody1, z.ZodTypeDef, unknown>;

/** @internal */
declare type ResponseBody1$Outbound = {
    collection: components.Collection$Outbound;
    error?: components.CollectionError$Outbound | undefined;
};

/** @internal */
declare const ResponseBody1$outboundSchema: z.ZodType<ResponseBody1$Outbound, z.ZodTypeDef, ResponseBody1>;

declare type ResponseBody1 = {
    collection: components.Collection;
    error?: components.CollectionError | undefined;
};

declare function responseBody1FromJSON(jsonString: string): Result<ResponseBody1, SDKValidationError>;

declare function responseBody1ToJSON(responseBody1: ResponseBody1): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ResponseBody2$ {
    /** @deprecated use `ResponseBody2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseBody2, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseBody2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseBody2$Outbound, z.ZodTypeDef, ResponseBody2>;
    /** @deprecated use `ResponseBody2$Outbound` instead. */
    type Outbound = ResponseBody2$Outbound;
}

/** @internal */
declare const ResponseBody2$inboundSchema: z.ZodType<ResponseBody2, z.ZodTypeDef, unknown>;

/** @internal */
declare type ResponseBody2$Outbound = {
    collection?: components.Collection$Outbound | undefined;
    error: components.CollectionError$Outbound;
};

/** @internal */
declare const ResponseBody2$outboundSchema: z.ZodType<ResponseBody2$Outbound, z.ZodTypeDef, ResponseBody2>;

declare type ResponseBody2 = {
    collection?: components.Collection | undefined;
    error: components.CollectionError;
};

declare function responseBody2FromJSON(jsonString: string): Result<ResponseBody2, SDKValidationError>;

declare function responseBody2ToJSON(responseBody2: ResponseBody2): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ResponseHint$ {
    /** @deprecated use `ResponseHint$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AllResultCounts: "ALL_RESULT_COUNTS";
        readonly FacetResults: "FACET_RESULTS";
        readonly QueryMetadata: "QUERY_METADATA";
        readonly Results: "RESULTS";
        readonly SpellcheckMetadata: "SPELLCHECK_METADATA";
    }>;
    /** @deprecated use `ResponseHint$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AllResultCounts: "ALL_RESULT_COUNTS";
        readonly FacetResults: "FACET_RESULTS";
        readonly QueryMetadata: "QUERY_METADATA";
        readonly Results: "RESULTS";
        readonly SpellcheckMetadata: "SPELLCHECK_METADATA";
    }>;
}

/** @internal */
declare const ResponseHint$inboundSchema: z.ZodNativeEnum<typeof ResponseHint>;

/** @internal */
declare const ResponseHint$outboundSchema: z.ZodNativeEnum<typeof ResponseHint>;

/**
 * Hints for the response content.
 */
declare const ResponseHint: {
    readonly AllResultCounts: "ALL_RESULT_COUNTS";
    readonly FacetResults: "FACET_RESULTS";
    readonly QueryMetadata: "QUERY_METADATA";
    readonly Results: "RESULTS";
    readonly SpellcheckMetadata: "SPELLCHECK_METADATA";
};

/**
 * Hints for the response content.
 */
declare type ResponseHint = ClosedEnum<typeof ResponseHint>;

declare type ResponseHook = (res: Response, req: Request) => Awaitable<void>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ResponseMetadata$ {
    /** @deprecated use `ResponseMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseMetadata$Outbound, z.ZodTypeDef, ResponseMetadata>;
    /** @deprecated use `ResponseMetadata$Outbound` instead. */
    type Outbound = ResponseMetadata$Outbound;
}

/** @internal */
declare const ResponseMetadata$inboundSchema: z.ZodType<ResponseMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type ResponseMetadata$Outbound = {
    latencyMs?: number | undefined;
    tokenCount?: number | undefined;
    modelUsed?: string | undefined;
};

/** @internal */
declare const ResponseMetadata$outboundSchema: z.ZodType<ResponseMetadata$Outbound, z.ZodTypeDef, ResponseMetadata>;

/**
 * Metadata about the response (e.g., latency, token count).
 */
declare type ResponseMetadata = {
    /**
     * Time taken to generate the response in milliseconds.
     */
    latencyMs?: number | undefined;
    /**
     * Number of tokens in the response.
     */
    tokenCount?: number | undefined;
    /**
     * The specific model version used.
     */
    modelUsed?: string | undefined;
};

declare function responseMetadataFromJSON(jsonString: string): Result<ResponseMetadata, SDKValidationError>;

declare function responseMetadataToJSON(responseMetadata: ResponseMetadata): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ResponseStatus$ {
    /** @deprecated use `ResponseStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Accepted: "ACCEPTED";
        readonly Declined: "DECLINED";
        readonly NoResponse: "NO_RESPONSE";
        readonly Tentative: "TENTATIVE";
    }>;
    /** @deprecated use `ResponseStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Accepted: "ACCEPTED";
        readonly Declined: "DECLINED";
        readonly NoResponse: "NO_RESPONSE";
        readonly Tentative: "TENTATIVE";
    }>;
}

/** @internal */
declare const ResponseStatus$inboundSchema: z.ZodNativeEnum<typeof ResponseStatus>;

/** @internal */
declare const ResponseStatus$outboundSchema: z.ZodNativeEnum<typeof ResponseStatus>;

declare const ResponseStatus: {
    readonly Accepted: "ACCEPTED";
    readonly Declined: "DECLINED";
    readonly NoResponse: "NO_RESPONSE";
    readonly Tentative: "TENTATIVE";
};

declare type ResponseStatus = ClosedEnum<typeof ResponseStatus>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace RestrictionFilters$ {
    /** @deprecated use `RestrictionFilters$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RestrictionFilters, z.ZodTypeDef, unknown>;
    /** @deprecated use `RestrictionFilters$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RestrictionFilters$Outbound, z.ZodTypeDef, RestrictionFilters>;
    /** @deprecated use `RestrictionFilters$Outbound` instead. */
    type Outbound = RestrictionFilters$Outbound;
}

/** @internal */
declare const RestrictionFilters$inboundSchema: z.ZodType<RestrictionFilters, z.ZodTypeDef, unknown>;

/** @internal */
declare type RestrictionFilters$Outbound = {
    containerSpecs?: Array<DocumentSpecUnion$Outbound> | undefined;
};

/** @internal */
declare const RestrictionFilters$outboundSchema: z.ZodType<RestrictionFilters$Outbound, z.ZodTypeDef, RestrictionFilters>;

declare type RestrictionFilters = {
    /**
     * Specifications for containers that should be used as part of the restriction (include/exclude). Memberships are recursively defined for a subset of datasources (currently: SharePoint, OneDrive, Google Drive, and Confluence). Please contact the Glean team to enable this for more datasources. Recursive memberships do not apply for Collections.
     */
    containerSpecs?: Array<DocumentSpecUnion> | undefined;
};

declare function restrictionFiltersFromJSON(jsonString: string): Result<RestrictionFilters, SDKValidationError>;

declare function restrictionFiltersToJSON(restrictionFilters: RestrictionFilters): string;

/**
 * A monad that captures the result of a function call or an error if it was not
 * successful. Railway programming, enabled by this type, can be a nicer
 * alternative to traditional exception throwing because it allows functions to
 * declare all _known_ errors with static types and then check for them
 * exhaustively in application code. Thrown exception have a type of `unknown`
 * and break out of regular control flow of programs making them harder to
 * inspect and more verbose work with due to try-catch blocks.
 */
declare type Result<T, E = unknown> = {
    ok: true;
    value: T;
    error?: never;
} | {
    ok: false;
    value?: never;
    error: E;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ResultDocument$ {
    /** @deprecated use `ResultDocument$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResultDocument, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResultDocument$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResultDocument$Outbound, z.ZodTypeDef, ResultDocument>;
    /** @deprecated use `ResultDocument$Outbound` instead. */
    type Outbound = ResultDocument$Outbound;
}

/** @internal */
declare const ResultDocument$inboundSchema: z.ZodType<ResultDocument, z.ZodTypeDef, unknown>;

/** @internal */
declare type ResultDocument$Outbound = {
    title?: string | undefined;
    url?: string | undefined;
};

/** @internal */
declare const ResultDocument$outboundSchema: z.ZodType<ResultDocument$Outbound, z.ZodTypeDef, ResultDocument>;

declare type ResultDocument = {
    title?: string | undefined;
    url?: string | undefined;
};

declare function resultDocumentFromJSON(jsonString: string): Result<ResultDocument, SDKValidationError>;

declare function resultDocumentToJSON(resultDocument: ResultDocument): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ResultsDescription$ {
    /** @deprecated use `ResultsDescription$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResultsDescription, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResultsDescription$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResultsDescription$Outbound, z.ZodTypeDef, ResultsDescription>;
    /** @deprecated use `ResultsDescription$Outbound` instead. */
    type Outbound = ResultsDescription$Outbound;
}

/** @internal */
declare const ResultsDescription$inboundSchema: z.ZodType<ResultsDescription, z.ZodTypeDef, unknown>;

/** @internal */
declare type ResultsDescription$Outbound = {
    text?: string | undefined;
    iconConfig?: IconConfig$Outbound | undefined;
};

/** @internal */
declare const ResultsDescription$outboundSchema: z.ZodType<ResultsDescription$Outbound, z.ZodTypeDef, ResultsDescription>;

declare type ResultsDescription = {
    /**
     * Textual description of the results. Can be shown at the top of SERP, e.g. 'People who write about this topic' for experts in people tab.
     */
    text?: string | undefined;
    /**
     * Defines how to render an icon
     */
    iconConfig?: IconConfig | undefined;
};

declare function resultsDescriptionFromJSON(jsonString: string): Result<ResultsDescription, SDKValidationError>;

declare function resultsDescriptionToJSON(resultsDescription: ResultsDescription): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ResultsResponse$ {
    /** @deprecated use `ResultsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResultsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResultsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResultsResponse$Outbound, z.ZodTypeDef, ResultsResponse>;
    /** @deprecated use `ResultsResponse$Outbound` instead. */
    type Outbound = ResultsResponse$Outbound;
}

/** @internal */
declare const ResultsResponse$inboundSchema: z.ZodType<ResultsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ResultsResponse$Outbound = {
    trackingToken?: string | undefined;
    sessionInfo?: SessionInfo$Outbound | undefined;
    results?: Array<SearchResult$Outbound> | undefined;
    structuredResults?: Array<StructuredResult$Outbound> | undefined;
    generatedQnaResult?: GeneratedQna$Outbound | undefined;
    errorInfo?: GleanDataError$Outbound | undefined;
    requestID?: string | undefined;
    backendTimeMillis?: number | undefined;
};

/** @internal */
declare const ResultsResponse$outboundSchema: z.ZodType<ResultsResponse$Outbound, z.ZodTypeDef, ResultsResponse>;

declare type ResultsResponse = {
    /**
     * A token that should be passed for additional requests related to this request (such as more results requests).
     */
    trackingToken?: string | undefined;
    sessionInfo?: SessionInfo | undefined;
    results?: Array<SearchResult> | undefined;
    structuredResults?: Array<StructuredResult> | undefined;
    generatedQnaResult?: GeneratedQna | undefined;
    gleanDataError?: GleanDataError | undefined;
    /**
     * A platform-generated request ID to correlate backend logs.
     */
    requestID?: string | undefined;
    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    backendTimeMillis?: number | undefined;
};

declare function resultsResponseFromJSON(jsonString: string): Result<ResultsResponse, SDKValidationError>;

declare function resultsResponseToJSON(resultsResponse: ResultsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ResultTab$ {
    /** @deprecated use `ResultTab$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResultTab, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResultTab$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResultTab$Outbound, z.ZodTypeDef, ResultTab>;
    /** @deprecated use `ResultTab$Outbound` instead. */
    type Outbound = ResultTab$Outbound;
}

/** @internal */
declare const ResultTab$inboundSchema: z.ZodType<ResultTab, z.ZodTypeDef, unknown>;

/** @internal */
declare type ResultTab$Outbound = {
    id?: string | undefined;
    count?: number | undefined;
    datasource?: string | undefined;
    datasourceInstance?: string | undefined;
};

/** @internal */
declare const ResultTab$outboundSchema: z.ZodType<ResultTab$Outbound, z.ZodTypeDef, ResultTab>;

declare type ResultTab = {
    /**
     * The unique ID of the tab. Can be passed in a search request to get results for that tab.
     */
    id?: string | undefined;
    /**
     * The number of results in this tab for the current query.
     */
    count?: number | undefined;
    /**
     * The datasource associated with the tab, if any.
     */
    datasource?: string | undefined;
    /**
     * The datasource instance associated with the tab, if any.
     */
    datasourceInstance?: string | undefined;
};

declare function resultTabFromJSON(jsonString: string): Result<ResultTab, SDKValidationError>;

declare function resultTabToJSON(resultTab: ResultTab): string;

declare type RetryConfig = {
    strategy: "none";
} | {
    strategy: "backoff";
    backoff?: BackoffStrategy;
    retryConnectionErrors?: boolean;
};

declare class RFCDate {
    private serialized;
    /**
     * Creates a new RFCDate instance using today's date.
     */
    static today(): RFCDate;
    /**
     * Creates a new RFCDate instance using the provided input.
     * If a string is used then in must be in the format YYYY-MM-DD.
     *
     * @param date A Date object or a date string in YYYY-MM-DD format
     * @example
     * new RFCDate("2022-01-01")
     * @example
     * new RFCDate(new Date())
     */
    constructor(date: Date | string);
    toJSON(): string;
    toString(): string;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Role$ {
    /** @deprecated use `Role$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AnswerModerator: "ANSWER_MODERATOR";
        readonly Owner: "OWNER";
        readonly Viewer: "VIEWER";
    }>;
    /** @deprecated use `Role$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AnswerModerator: "ANSWER_MODERATOR";
        readonly Owner: "OWNER";
        readonly Viewer: "VIEWER";
    }>;
}

/** @internal */
declare const Role$inboundSchema: z.ZodNativeEnum<typeof Role>;

/** @internal */
declare const Role$outboundSchema: z.ZodNativeEnum<typeof Role>;

/**
 * DEPRECATED - use permissions instead. Viewer's role on the specific document.
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
declare const Role: {
    readonly AnswerModerator: "ANSWER_MODERATOR";
    readonly Owner: "OWNER";
    readonly Viewer: "VIEWER";
};

/**
 * DEPRECATED - use permissions instead. Viewer's role on the specific document.
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
declare type Role = ClosedEnum<typeof Role>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace RotateTokenResponse$ {
    /** @deprecated use `RotateTokenResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RotateTokenResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `RotateTokenResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RotateTokenResponse$Outbound, z.ZodTypeDef, RotateTokenResponse>;
    /** @deprecated use `RotateTokenResponse$Outbound` instead. */
    type Outbound = RotateTokenResponse$Outbound;
}

/** @internal */
declare const RotateTokenResponse$inboundSchema: z.ZodType<RotateTokenResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type RotateTokenResponse$Outbound = {
    rawSecret?: string | undefined;
    createdAt?: number | undefined;
    rotationPeriodMinutes?: number | undefined;
};

/** @internal */
declare const RotateTokenResponse$outboundSchema: z.ZodType<RotateTokenResponse$Outbound, z.ZodTypeDef, RotateTokenResponse>;

/**
 * Describes the response body of the /rotatetoken API call
 */
declare type RotateTokenResponse = {
    /**
     * New raw secret
     */
    rawSecret?: string | undefined;
    /**
     * Unix timestamp in seconds when the new secret value is assigned to the token. The token needs to be rotated before `rotationPeriodMinutes` past the createdAt timestamp otherwise it would be rendered unusable.
     */
    createdAt?: number | undefined;
    /**
     * Refers to the time period in minutes before which this token needs to be rotated. It is required to rotate the token within the specified `rotationPeriodMinutes` after each `/rotatetoken` call, otherwise the tokens would expire. Note that the token would still expire at `expiresAt` timestamp provided during token creation even if the token is being regularly rotated. `rotationPeriodMinutes` property is inherited from the parent token being rotated
     */
    rotationPeriodMinutes?: number | undefined;
};

declare function rotateTokenResponseFromJSON(jsonString: string): Result<RotateTokenResponse, SDKValidationError>;

declare function rotateTokenResponseToJSON(rotateTokenResponse: RotateTokenResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Scope$ {
    /** @deprecated use `Scope$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AppCard: "APP_CARD";
        readonly AutocompleteExactMatch: "AUTOCOMPLETE_EXACT_MATCH";
        readonly AutocompleteFuzzyMatch: "AUTOCOMPLETE_FUZZY_MATCH";
        readonly AutocompleteZeroQuery: "AUTOCOMPLETE_ZERO_QUERY";
        readonly NewTabPage: "NEW_TAB_PAGE";
    }>;
    /** @deprecated use `Scope$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AppCard: "APP_CARD";
        readonly AutocompleteExactMatch: "AUTOCOMPLETE_EXACT_MATCH";
        readonly AutocompleteFuzzyMatch: "AUTOCOMPLETE_FUZZY_MATCH";
        readonly AutocompleteZeroQuery: "AUTOCOMPLETE_ZERO_QUERY";
        readonly NewTabPage: "NEW_TAB_PAGE";
    }>;
}

/** @internal */
declare const Scope$inboundSchema: z.ZodNativeEnum<typeof Scope>;

/** @internal */
declare const Scope$outboundSchema: z.ZodNativeEnum<typeof Scope>;

declare const Scope: {
    readonly AppCard: "APP_CARD";
    readonly AutocompleteExactMatch: "AUTOCOMPLETE_EXACT_MATCH";
    readonly AutocompleteFuzzyMatch: "AUTOCOMPLETE_FUZZY_MATCH";
    readonly AutocompleteZeroQuery: "AUTOCOMPLETE_ZERO_QUERY";
    readonly NewTabPage: "NEW_TAB_PAGE";
};

declare type Scope = ClosedEnum<typeof Scope>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ScopeType$ {
    /** @deprecated use `ScopeType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Global: "GLOBAL";
        readonly Own: "OWN";
    }>;
    /** @deprecated use `ScopeType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Global: "GLOBAL";
        readonly Own: "OWN";
    }>;
}

/** @internal */
declare const ScopeType$inboundSchema: z.ZodNativeEnum<typeof ScopeType>;

/** @internal */
declare const ScopeType$outboundSchema: z.ZodNativeEnum<typeof ScopeType>;

/**
 * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
 */
declare const ScopeType: {
    readonly Global: "GLOBAL";
    readonly Own: "OWN";
};

/**
 * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
 */
declare type ScopeType = ClosedEnum<typeof ScopeType>;

export declare const SDK_METADATA: {
    readonly language: "typescript";
    readonly openapiDocVersion: "0.9.0";
    readonly sdkVersion: "0.11.2";
    readonly genVersion: "2.720.1";
    readonly userAgent: "speakeasy-sdk/typescript 0.11.2 2.720.1 0.9.0 @gleanwork/api-client";
};

declare class SDKHooks implements Hooks {
    sdkInitHooks: SDKInitHook[];
    beforeCreateRequestHooks: BeforeCreateRequestHook[];
    beforeRequestHooks: BeforeRequestHook_2[];
    afterSuccessHooks: AfterSuccessHook[];
    afterErrorHooks: AfterErrorHook[];
    constructor();
    registerSDKInitHook(hook: SDKInitHook): void;
    registerBeforeCreateRequestHook(hook: BeforeCreateRequestHook): void;
    registerBeforeRequestHook(hook: BeforeRequestHook_2): void;
    registerAfterSuccessHook(hook: AfterSuccessHook): void;
    registerAfterErrorHook(hook: AfterErrorHook): void;
    sdkInit(opts: SDKInitOptions): SDKInitOptions;
    beforeCreateRequest(hookCtx: BeforeCreateRequestContext, input: RequestInput): RequestInput;
    beforeRequest(hookCtx: BeforeRequestContext, request: Request): Promise<Request>;
    afterSuccess(hookCtx: AfterSuccessContext, response: Response): Promise<Response>;
    afterError(hookCtx: AfterErrorContext, response: Response | null, error: unknown): Promise<{
        response: Response | null;
        error: unknown;
    }>;
}

/**
 * SDKInitHook is called when the SDK is initializing. The
 * hook can return a new baseURL and HTTP client to be used by the SDK.
 */
declare interface SDKInitHook {
    sdkInit: (opts: SDKInitOptions) => SDKInitOptions;
}

declare type SDKInitOptions = {
    baseURL: URL | null;
    client: HTTPClient;
};

export declare type SDKOptions = {
    apiToken?: string | (() => Promise<string>) | undefined;
    httpClient?: HTTPClient;
    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number | undefined;
    /**
     * Sets the instance variable for url substitution
     */
    instance?: string | undefined;
    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string | undefined;
    /**
     * Allows overriding the default user agent used by the SDK
     */
    userAgent?: string | undefined;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: RetryConfig;
    timeoutMs?: number;
    debugLogger?: Logger;
};

declare class SDKValidationError extends Error {
    /**
     * The raw value that failed validation.
     */
    readonly rawValue: unknown;
    /**
     * The raw message that failed validation.
     */
    readonly rawMessage: unknown;
    static [Symbol.hasInstance](instance: unknown): instance is SDKValidationError;
    constructor(message: string, cause: unknown, rawValue: unknown);
    /**
     * Return a pretty-formatted error message if the underlying validation error
     * is a ZodError or some other recognized error type, otherwise return the
     * default error message.
     */
    pretty(): string;
}

declare class Search extends ClientSDK {
    /**
     * Search the index (admin)
     *
     * @remarks
     * Retrieves results for search query without respect for permissions. This is available only to privileged users.
     */
    queryAsAdmin(request: components.SearchRequest, options?: RequestOptions): Promise<components.SearchResponse>;
    /**
     * Autocomplete
     *
     * @remarks
     * Retrieve query suggestions, operators and documents for the given partially typed query.
     */
    autocomplete(request: components.AutocompleteRequest, options?: RequestOptions): Promise<components.AutocompleteResponse>;
    /**
     * Feed of documents and events
     *
     * @remarks
     * The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.
     */
    retrieveFeed(request: components.FeedRequest, options?: RequestOptions): Promise<components.FeedResponse>;
    /**
     * Recommend documents
     *
     * @remarks
     * Retrieve recommended documents for the given URL or Glean Document ID.
     */
    recommendations(request: components.RecommendationsRequest, options?: RequestOptions): Promise<components.ResultsResponse | undefined>;
    /**
     * Search
     *
     * @remarks
     * Retrieve results from the index for the given query and filters.
     */
    query(request: components.SearchRequest, options?: RequestOptions): Promise<components.SearchResponse>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SearchAgentsRequest$ {
    /** @deprecated use `SearchAgentsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchAgentsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchAgentsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchAgentsRequest$Outbound, z.ZodTypeDef, SearchAgentsRequest>;
    /** @deprecated use `SearchAgentsRequest$Outbound` instead. */
    type Outbound = SearchAgentsRequest$Outbound;
}

/** @internal */
declare const SearchAgentsRequest$inboundSchema: z.ZodType<SearchAgentsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type SearchAgentsRequest$Outbound = {
    name?: string | undefined;
};

/** @internal */
declare const SearchAgentsRequest$outboundSchema: z.ZodType<SearchAgentsRequest$Outbound, z.ZodTypeDef, SearchAgentsRequest>;

declare type SearchAgentsRequest = {
    /**
     * Filters on the name of the agent. The keyword search is case-insensitive. If search string is ommited or empty, acts as no filter.
     */
    name?: string | undefined;
};

declare function searchAgentsRequestFromJSON(jsonString: string): Result<SearchAgentsRequest, SDKValidationError>;

declare function searchAgentsRequestToJSON(searchAgentsRequest: SearchAgentsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SearchAgentsResponse$ {
    /** @deprecated use `SearchAgentsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchAgentsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchAgentsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchAgentsResponse$Outbound, z.ZodTypeDef, SearchAgentsResponse>;
    /** @deprecated use `SearchAgentsResponse$Outbound` instead. */
    type Outbound = SearchAgentsResponse$Outbound;
}

/** @internal */
declare const SearchAgentsResponse$inboundSchema: z.ZodType<SearchAgentsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type SearchAgentsResponse$Outbound = {
    agents?: Array<Agent$Outbound> | undefined;
};

/** @internal */
declare const SearchAgentsResponse$outboundSchema: z.ZodType<SearchAgentsResponse$Outbound, z.ZodTypeDef, SearchAgentsResponse>;

declare type SearchAgentsResponse = {
    agents?: Array<Agent> | undefined;
};

declare function searchAgentsResponseFromJSON(jsonString: string): Result<SearchAgentsResponse, SDKValidationError>;

declare function searchAgentsResponseToJSON(searchAgentsResponse: SearchAgentsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SearchProviderInfo$ {
    /** @deprecated use `SearchProviderInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchProviderInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchProviderInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchProviderInfo$Outbound, z.ZodTypeDef, SearchProviderInfo>;
    /** @deprecated use `SearchProviderInfo$Outbound` instead. */
    type Outbound = SearchProviderInfo$Outbound;
}

/** @internal */
declare const SearchProviderInfo$inboundSchema: z.ZodType<SearchProviderInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type SearchProviderInfo$Outbound = {
    name?: string | undefined;
    logoUrl?: string | undefined;
    searchLinkUrlTemplate?: string | undefined;
};

/** @internal */
declare const SearchProviderInfo$outboundSchema: z.ZodType<SearchProviderInfo$Outbound, z.ZodTypeDef, SearchProviderInfo>;

declare type SearchProviderInfo = {
    /**
     * Name of the search provider.
     */
    name?: string | undefined;
    /**
     * URL to the provider's logo.
     */
    logoUrl?: string | undefined;
    /**
     * URL template that can be used to perform the suggested search by replacing the {query} placeholder with the query suggestion.
     */
    searchLinkUrlTemplate?: string | undefined;
};

declare function searchProviderInfoFromJSON(jsonString: string): Result<SearchProviderInfo, SDKValidationError>;

declare function searchProviderInfoToJSON(searchProviderInfo: SearchProviderInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SearchRequest$ {
    /** @deprecated use `SearchRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchRequest$Outbound, z.ZodTypeDef, SearchRequest>;
    /** @deprecated use `SearchRequest$Outbound` instead. */
    type Outbound = SearchRequest$Outbound;
}

/** @internal */
declare const SearchRequest$inboundSchema: z.ZodType<SearchRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type SearchRequest$Outbound = {
    timestamp?: string | undefined;
    trackingToken?: string | undefined;
    sessionInfo?: SessionInfo$Outbound | undefined;
    sourceDocument?: Document$Outbound | undefined;
    pageSize?: number | undefined;
    maxSnippetSize?: number | undefined;
    query: string;
    cursor?: string | undefined;
    resultTabIds?: Array<string> | undefined;
    inputDetails?: SearchRequestInputDetails$Outbound | undefined;
    requestOptions?: SearchRequestOptions$Outbound | undefined;
    timeoutMillis?: number | undefined;
    disableSpellcheck?: boolean | undefined;
};

/** @internal */
declare const SearchRequest$outboundSchema: z.ZodType<SearchRequest$Outbound, z.ZodTypeDef, SearchRequest>;

declare type SearchRequest = {
    /**
     * The ISO 8601 timestamp associated with the client request.
     */
    timestamp?: Date | undefined;
    /**
     * A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
     */
    trackingToken?: string | undefined;
    sessionInfo?: SessionInfo | undefined;
    sourceDocument?: Document_2 | undefined;
    /**
     * Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
     */
    pageSize?: number | undefined;
    /**
     * Hint to the server about how many characters long a snippet may be. Server may return less or more.
     */
    maxSnippetSize?: number | undefined;
    /**
     * The search terms.
     */
    query: string;
    /**
     * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
     */
    cursor?: string | undefined;
    /**
     * The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
     */
    resultTabIds?: Array<string> | undefined;
    inputDetails?: SearchRequestInputDetails | undefined;
    requestOptions?: SearchRequestOptions | undefined;
    /**
     * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
     */
    timeoutMillis?: number | undefined;
    /**
     * Whether or not to disable spellcheck.
     */
    disableSpellcheck?: boolean | undefined;
};

declare function searchRequestFromJSON(jsonString: string): Result<SearchRequest, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SearchRequestInputDetails$ {
    /** @deprecated use `SearchRequestInputDetails$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchRequestInputDetails, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchRequestInputDetails$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchRequestInputDetails$Outbound, z.ZodTypeDef, SearchRequestInputDetails>;
    /** @deprecated use `SearchRequestInputDetails$Outbound` instead. */
    type Outbound = SearchRequestInputDetails$Outbound;
}

/** @internal */
declare const SearchRequestInputDetails$inboundSchema: z.ZodType<SearchRequestInputDetails, z.ZodTypeDef, unknown>;

/** @internal */
declare type SearchRequestInputDetails$Outbound = {
    hasCopyPaste?: boolean | undefined;
};

/** @internal */
declare const SearchRequestInputDetails$outboundSchema: z.ZodType<SearchRequestInputDetails$Outbound, z.ZodTypeDef, SearchRequestInputDetails>;

declare type SearchRequestInputDetails = {
    /**
     * Whether the associated query was at least partially copy-pasted.  If subsequent requests are issued after a copy-pasted query is constructed (e.g. with facet modifications), this bit should continue to be set for those requests.
     */
    hasCopyPaste?: boolean | undefined;
};

declare function searchRequestInputDetailsFromJSON(jsonString: string): Result<SearchRequestInputDetails, SDKValidationError>;

declare function searchRequestInputDetailsToJSON(searchRequestInputDetails: SearchRequestInputDetails): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SearchRequestOptions$ {
    /** @deprecated use `SearchRequestOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchRequestOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchRequestOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchRequestOptions$Outbound, z.ZodTypeDef, SearchRequestOptions>;
    /** @deprecated use `SearchRequestOptions$Outbound` instead. */
    type Outbound = SearchRequestOptions$Outbound;
}

/** @internal */
declare const SearchRequestOptions$inboundSchema: z.ZodType<SearchRequestOptions, z.ZodTypeDef, unknown>;

/** @internal */
declare type SearchRequestOptions$Outbound = {
    datasourceFilter?: string | undefined;
    datasourcesFilter?: Array<string> | undefined;
    queryOverridesFacetFilters?: boolean | undefined;
    facetFilters?: Array<FacetFilter$Outbound> | undefined;
    facetFilterSets?: Array<FacetFilterSet$Outbound> | undefined;
    facetBucketFilter?: FacetBucketFilter$Outbound | undefined;
    facetBucketSize: number;
    defaultFacets?: Array<string> | undefined;
    authTokens?: Array<AuthToken$Outbound> | undefined;
    fetchAllDatasourceCounts?: boolean | undefined;
    responseHints?: Array<string> | undefined;
    timezoneOffset?: number | undefined;
    disableSpellcheck?: boolean | undefined;
    disableQueryAutocorrect?: boolean | undefined;
    returnLlmContentOverSnippets?: boolean | undefined;
    inclusions?: RestrictionFilters$Outbound | undefined;
    exclusions?: RestrictionFilters$Outbound | undefined;
};

/** @internal */
declare const SearchRequestOptions$outboundSchema: z.ZodType<SearchRequestOptions$Outbound, z.ZodTypeDef, SearchRequestOptions>;

declare type SearchRequestOptions = {
    /**
     * Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
     */
    datasourceFilter?: string | undefined;
    /**
     * Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing.
     */
    datasourcesFilter?: Array<string> | undefined;
    /**
     * If true, the operators in the query are taken to override any operators in facetFilters in the case of conflict. This is used to correctly set rewrittenFacetFilters and rewrittenQuery.
     */
    queryOverridesFacetFilters?: boolean | undefined;
    /**
     * A list of filters for the query. An AND is assumed between different facetFilters. For example, owner Sumeet and type Spreadsheet shows documents that are by Sumeet AND are Spreadsheets.
     */
    facetFilters?: Array<FacetFilter> | undefined;
    /**
     * A list of facet filter sets that will be OR'ed together. SearchRequestOptions where both facetFilterSets and facetFilters set are considered as bad request. Callers should set only one of these fields.
     */
    facetFilterSets?: Array<FacetFilterSet> | undefined;
    facetBucketFilter?: FacetBucketFilter | undefined;
    /**
     * The maximum number of FacetBuckets to return in each FacetResult.
     */
    facetBucketSize: number;
    /**
     * Facets for which FacetResults should be fetched and that don't apply to a particular datasource. If specified, these values will replace the standard default facets (last_updated_at, from, etc.). The requested facets will be returned alongside datasource-specific facets if searching a single datasource.
     */
    defaultFacets?: Array<string> | undefined;
    /**
     * Auth tokens which may be used for non-indexed, federated results (e.g. Gmail).
     */
    authTokens?: Array<AuthToken> | undefined;
    /**
     * Hints that the QE should return result counts (via the datasource facet result) for all supported datasources, rather than just those specified in the datasource[s]Filter
     */
    fetchAllDatasourceCounts?: boolean | undefined;
    /**
     * Array of hints containing which fields should be populated in the response.
     */
    responseHints?: Array<ResponseHint> | undefined;
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    /**
     * Whether or not to disable spellcheck.
     */
    disableSpellcheck?: boolean | undefined;
    /**
     * Disables automatic adjustment of the input query for spelling corrections or other reasons.
     */
    disableQueryAutocorrect?: boolean | undefined;
    /**
     * Enables expanded content to be returned for LLM usage. The size of content per result returned should be modified using maxSnippetSize. Server may return less or more than what is specified in maxSnippetSize. For more details, see https://developers.glean.com/guides/search/llm-content.
     */
    returnLlmContentOverSnippets?: boolean | undefined;
    inclusions?: RestrictionFilters | undefined;
    exclusions?: RestrictionFilters | undefined;
};

declare function searchRequestOptionsFromJSON(jsonString: string): Result<SearchRequestOptions, SDKValidationError>;

declare function searchRequestOptionsToJSON(searchRequestOptions: SearchRequestOptions): string;

declare function searchRequestToJSON(searchRequest: SearchRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SearchResponse$ {
    /** @deprecated use `SearchResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchResponse$Outbound, z.ZodTypeDef, SearchResponse>;
    /** @deprecated use `SearchResponse$Outbound` instead. */
    type Outbound = SearchResponse$Outbound;
}

/** @internal */
declare const SearchResponse$inboundSchema: z.ZodType<SearchResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type SearchResponse$Outbound = {
    trackingToken?: string | undefined;
    sessionInfo?: SessionInfo$Outbound | undefined;
    results?: Array<SearchResult$Outbound> | undefined;
    structuredResults?: Array<StructuredResult$Outbound> | undefined;
    generatedQnaResult?: GeneratedQna$Outbound | undefined;
    errorInfo?: GleanDataError$Outbound | undefined;
    requestID?: string | undefined;
    backendTimeMillis?: number | undefined;
    experimentIds?: Array<number> | undefined;
    metadata?: SearchResponseMetadata$Outbound | undefined;
    facetResults?: Array<FacetResult$Outbound> | undefined;
    resultTabs?: Array<ResultTab$Outbound> | undefined;
    resultTabIds?: Array<string> | undefined;
    resultsDescription?: ResultsDescription$Outbound | undefined;
    rewrittenFacetFilters?: Array<FacetFilter$Outbound> | undefined;
    cursor?: string | undefined;
    hasMoreResults?: boolean | undefined;
};

/** @internal */
declare const SearchResponse$outboundSchema: z.ZodType<SearchResponse$Outbound, z.ZodTypeDef, SearchResponse>;

declare type SearchResponse = {
    /**
     * A token that should be passed for additional requests related to this request (such as more results requests).
     */
    trackingToken?: string | undefined;
    sessionInfo?: SessionInfo | undefined;
    results?: Array<SearchResult> | undefined;
    structuredResults?: Array<StructuredResult> | undefined;
    generatedQnaResult?: GeneratedQna | undefined;
    gleanDataError?: GleanDataError | undefined;
    /**
     * A platform-generated request ID to correlate backend logs.
     */
    requestID?: string | undefined;
    /**
     * Time in milliseconds the backend took to respond to the request.
     */
    backendTimeMillis?: number | undefined;
    /**
     * List of experiment ids for the corresponding request.
     */
    experimentIds?: Array<number> | undefined;
    metadata?: SearchResponseMetadata | undefined;
    facetResults?: Array<FacetResult> | undefined;
    /**
     * All result tabs available for the current query. Populated if QUERY_METADATA is specified in the request.
     */
    resultTabs?: Array<ResultTab> | undefined;
    /**
     * The unique IDs of the result tabs to which this response belongs.
     */
    resultTabIds?: Array<string> | undefined;
    resultsDescription?: ResultsDescription | undefined;
    /**
     * The actual applied facet filters based on the operators and facetFilters in the query. Useful for mapping typed operators to visual facets.
     */
    rewrittenFacetFilters?: Array<FacetFilter> | undefined;
    /**
     * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
     */
    cursor?: string | undefined;
    /**
     * Whether more results are available. Use cursor to retrieve them.
     */
    hasMoreResults?: boolean | undefined;
};

declare function searchResponseFromJSON(jsonString: string): Result<SearchResponse, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SearchResponseMetadata$ {
    /** @deprecated use `SearchResponseMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchResponseMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchResponseMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchResponseMetadata$Outbound, z.ZodTypeDef, SearchResponseMetadata>;
    /** @deprecated use `SearchResponseMetadata$Outbound` instead. */
    type Outbound = SearchResponseMetadata$Outbound;
}

/** @internal */
declare const SearchResponseMetadata$inboundSchema: z.ZodType<SearchResponseMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type SearchResponseMetadata$Outbound = {
    rewrittenQuery?: string | undefined;
    searchedQuery?: string | undefined;
    searchedQueryWithoutNegation?: string | undefined;
    searchedQueryRanges?: Array<TextRange$Outbound> | undefined;
    originalQuery?: string | undefined;
    querySuggestion?: QuerySuggestion$Outbound | undefined;
    additionalQuerySuggestions?: QuerySuggestionList$Outbound | undefined;
    negatedTerms?: Array<string> | undefined;
    modifiedQueryWasUsed?: boolean | undefined;
    originalQueryHadNoResults?: boolean | undefined;
    searchWarning?: SearchWarning$Outbound | undefined;
    triggeredExpertDetection?: boolean | undefined;
    isNoQuotesSuggestion?: boolean | undefined;
};

/** @internal */
declare const SearchResponseMetadata$outboundSchema: z.ZodType<SearchResponseMetadata$Outbound, z.ZodTypeDef, SearchResponseMetadata>;

declare type SearchResponseMetadata = {
    /**
     * A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators.
     */
    rewrittenQuery?: string | undefined;
    /**
     * The actual query used to perform search and return results.
     */
    searchedQuery?: string | undefined;
    /**
     * The query used to perform search and return results, with negated terms and facets removed.
     */
    searchedQueryWithoutNegation?: string | undefined;
    /**
     * The bolded ranges within the searched query.
     */
    searchedQueryRanges?: Array<TextRange> | undefined;
    /**
     * The query text sent by the client in the request.
     */
    originalQuery?: string | undefined;
    querySuggestion?: QuerySuggestion | undefined;
    additionalQuerySuggestions?: QuerySuggestionList | undefined;
    /**
     * A list of terms that were negated when processing the query.
     */
    negatedTerms?: Array<string> | undefined;
    /**
     * A different query was performed than the one requested.
     */
    modifiedQueryWasUsed?: boolean | undefined;
    /**
     * No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based.
     */
    originalQueryHadNoResults?: boolean | undefined;
    searchWarning?: SearchWarning | undefined;
    /**
     * Whether the query triggered expert detection results in the People tab.
     */
    triggeredExpertDetection?: boolean | undefined;
    /**
     * Whether the query was modified to remove quotes
     */
    isNoQuotesSuggestion?: boolean | undefined;
};

declare function searchResponseMetadataFromJSON(jsonString: string): Result<SearchResponseMetadata, SDKValidationError>;

declare function searchResponseMetadataToJSON(searchResponseMetadata: SearchResponseMetadata): string;

declare function searchResponseToJSON(searchResponse: SearchResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SearchResult$ {
    /** @deprecated use `SearchResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchResult$Outbound, z.ZodTypeDef, SearchResult>;
    /** @deprecated use `SearchResult$Outbound` instead. */
    type Outbound = SearchResult$Outbound;
}

/** @internal */
declare const SearchResult$inboundSchema: z.ZodType<SearchResult, z.ZodTypeDef, unknown>;

/** @internal */
declare type SearchResult$Outbound = {
    structuredResults?: Array<StructuredResult$Outbound> | undefined;
    trackingToken?: string | undefined;
    document?: Document$Outbound | undefined;
    title?: string | undefined;
    url: string;
    nativeAppUrl?: string | undefined;
    snippets?: Array<SearchResultSnippet$Outbound> | undefined;
    fullText?: string | undefined;
    fullTextList?: Array<string> | undefined;
    relatedResults?: Array<RelatedDocuments$Outbound> | undefined;
    clusteredResults?: Array<SearchResult$Outbound> | undefined;
    allClusteredResults?: Array<ClusterGroup$Outbound> | undefined;
    attachmentCount?: number | undefined;
    attachments?: Array<SearchResult$Outbound> | undefined;
    backlinkResults?: Array<SearchResult$Outbound> | undefined;
    clusterType?: string | undefined;
    mustIncludeSuggestions?: QuerySuggestionList$Outbound | undefined;
    querySuggestion?: QuerySuggestion$Outbound | undefined;
    prominence?: string | undefined;
    attachmentContext?: string | undefined;
    pins?: Array<PinDocument$Outbound> | undefined;
};

/** @internal */
declare const SearchResult$outboundSchema: z.ZodType<SearchResult$Outbound, z.ZodTypeDef, SearchResult>;

declare type SearchResult = {
    /**
     * An array of entities in the work graph retrieved via a data request.
     */
    structuredResults?: Array<StructuredResult> | undefined;
    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    trackingToken?: string | undefined;
    document?: Document_2 | undefined;
    title?: string | undefined;
    url: string;
    /**
     * A deep link, if available, into the datasource's native application for the user's platform (e.g. slack://...).
     */
    nativeAppUrl?: string | undefined;
    /**
     * Text content from the result document which contains search query terms, if available.
     */
    snippets?: Array<SearchResultSnippet> | undefined;
    /**
     * The full body text of the result if not already contained in the snippets. Only populated for conversation results (e.g. results from a messaging app such as Slack).
     */
    fullText?: string | undefined;
    /**
     * The full body text of the result if not already contained in the snippets; each item in the array represents a separate line in the original text. Only populated for conversation results (e.g. results from a messaging app such as Slack).
     */
    fullTextList?: Array<string> | undefined;
    /**
     * A list of results related to this search result. Eg. for conversation results it contains individual messages from the conversation document which will be shown on SERP.
     */
    relatedResults?: Array<RelatedDocuments> | undefined;
    /**
     * A list of results that should be displayed as associated with this result.
     */
    clusteredResults?: Array<SearchResult> | undefined;
    /**
     * A list of results that should be displayed as associated with this result.
     */
    allClusteredResults?: Array<ClusterGroup> | undefined;
    /**
     * The total number of attachments.
     */
    attachmentCount?: number | undefined;
    /**
     * A (potentially partial) list of results representing documents attached to the main result document.
     */
    attachments?: Array<SearchResult> | undefined;
    /**
     * A list of results that should be displayed as backlinks of this result in reverse chronological order.
     */
    backlinkResults?: Array<SearchResult> | undefined;
    /**
     * The reason for inclusion of clusteredResults.
     */
    clusterType?: ClusterTypeEnum | undefined;
    mustIncludeSuggestions?: QuerySuggestionList | undefined;
    querySuggestion?: QuerySuggestion | undefined;
    /**
     * The level of visual distinction that should be given to a result.
     *
     * @remarks
     */
    prominence?: SearchResultProminenceEnum | undefined;
    /**
     * Additional context for the relationship between the result and the document it's attached to.
     */
    attachmentContext?: string | undefined;
    /**
     * A list of pins associated with this search result.
     */
    pins?: Array<PinDocument> | undefined;
};

declare function searchResultFromJSON(jsonString: string): Result<SearchResult, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SearchResultProminenceEnum$ {
    /** @deprecated use `SearchResultProminenceEnum$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Hero: "HERO";
        readonly Promoted: "PROMOTED";
        readonly Standard: "STANDARD";
    }>;
    /** @deprecated use `SearchResultProminenceEnum$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Hero: "HERO";
        readonly Promoted: "PROMOTED";
        readonly Standard: "STANDARD";
    }>;
}

/** @internal */
declare const SearchResultProminenceEnum$inboundSchema: z.ZodNativeEnum<typeof SearchResultProminenceEnum>;

/** @internal */
declare const SearchResultProminenceEnum$outboundSchema: z.ZodNativeEnum<typeof SearchResultProminenceEnum>;

/**
 * The level of visual distinction that should be given to a result.
 *
 * @remarks
 */
declare const SearchResultProminenceEnum: {
    readonly Hero: "HERO";
    readonly Promoted: "PROMOTED";
    readonly Standard: "STANDARD";
};

/**
 * The level of visual distinction that should be given to a result.
 *
 * @remarks
 */
declare type SearchResultProminenceEnum = ClosedEnum<typeof SearchResultProminenceEnum>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SearchResultSnippet$ {
    /** @deprecated use `SearchResultSnippet$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchResultSnippet, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchResultSnippet$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchResultSnippet$Outbound, z.ZodTypeDef, SearchResultSnippet>;
    /** @deprecated use `SearchResultSnippet$Outbound` instead. */
    type Outbound = SearchResultSnippet$Outbound;
}

/** @internal */
declare const SearchResultSnippet$inboundSchema: z.ZodType<SearchResultSnippet, z.ZodTypeDef, unknown>;

/** @internal */
declare type SearchResultSnippet$Outbound = {
    mimeType?: string | undefined;
    text?: string | undefined;
    snippetTextOrdering?: number | undefined;
    ranges?: Array<TextRange$Outbound> | undefined;
    url?: string | undefined;
    snippet: string;
};

/** @internal */
declare const SearchResultSnippet$outboundSchema: z.ZodType<SearchResultSnippet$Outbound, z.ZodTypeDef, SearchResultSnippet>;

declare type SearchResultSnippet = {
    /**
     * The mime type of the snippets, currently either text/plain or text/html.
     */
    mimeType?: string | undefined;
    /**
     * A matching snippet from the document with no highlights.
     */
    text?: string | undefined;
    /**
     * Used for sorting based off the snippet's location within all_snippetable_text
     */
    snippetTextOrdering?: number | undefined;
    /**
     * The bolded ranges within text.
     */
    ranges?: Array<TextRange> | undefined;
    /**
     * A URL, generated based on availability, that links to the position of the snippet text or to the nearest header above the snippet text.
     */
    url?: string | undefined;
    /**
     * A matching snippet from the document. Query term matches are marked by the unicode characters uE006 and uE007. Use 'text' field instead.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    snippet: string;
};

declare function searchResultSnippetFromJSON(jsonString: string): Result<SearchResultSnippet, SDKValidationError>;

declare function searchResultSnippetToJSON(searchResultSnippet: SearchResultSnippet): string;

declare function searchResultToJSON(searchResult: SearchResult): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SearchWarning$ {
    /** @deprecated use `SearchWarning$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SearchWarning, z.ZodTypeDef, unknown>;
    /** @deprecated use `SearchWarning$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SearchWarning$Outbound, z.ZodTypeDef, SearchWarning>;
    /** @deprecated use `SearchWarning$Outbound` instead. */
    type Outbound = SearchWarning$Outbound;
}

/** @internal */
declare const SearchWarning$inboundSchema: z.ZodType<SearchWarning, z.ZodTypeDef, unknown>;

/** @internal */
declare type SearchWarning$Outbound = {
    warningType: string;
    lastUsedTerm?: string | undefined;
    quotesIgnoredQuery?: string | undefined;
    ignoredTerms?: Array<string> | undefined;
};

/** @internal */
declare const SearchWarning$outboundSchema: z.ZodType<SearchWarning$Outbound, z.ZodTypeDef, SearchWarning>;

declare type SearchWarning = {
    /**
     * The type of the warning.
     */
    warningType: WarningType;
    /**
     * The last term we considered in the user's long query.
     */
    lastUsedTerm?: string | undefined;
    /**
     * The query after ignoring/removing quotes.
     */
    quotesIgnoredQuery?: string | undefined;
    /**
     * A list of query terms that were ignored when generating search results, if any. For example, terms containing invalid filters such as "updated:invalid_date" will be ignored.
     */
    ignoredTerms?: Array<string> | undefined;
};

declare function searchWarningFromJSON(jsonString: string): Result<SearchWarning, SDKValidationError>;

declare function searchWarningToJSON(searchWarning: SearchWarning): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SectionType$ {
    /** @deprecated use `SectionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Channel: "CHANNEL";
        readonly Mentions: "MENTIONS";
        readonly Topic: "TOPIC";
    }>;
    /** @deprecated use `SectionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Channel: "CHANNEL";
        readonly Mentions: "MENTIONS";
        readonly Topic: "TOPIC";
    }>;
}

/** @internal */
declare const SectionType$inboundSchema: z.ZodNativeEnum<typeof SectionType>;

/** @internal */
declare const SectionType$outboundSchema: z.ZodNativeEnum<typeof SectionType>;

/**
 * Type of the section. This defines how the section should be interpreted and rendered in the digest.
 */
declare const SectionType: {
    readonly Channel: "CHANNEL";
    readonly Mentions: "MENTIONS";
    readonly Topic: "TOPIC";
};

/**
 * Type of the section. This defines how the section should be interpreted and rendered in the digest.
 */
declare type SectionType = ClosedEnum<typeof SectionType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Security$ {
    /** @deprecated use `Security$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Security, z.ZodTypeDef, unknown>;
    /** @deprecated use `Security$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Security$Outbound, z.ZodTypeDef, Security>;
    /** @deprecated use `Security$Outbound` instead. */
    type Outbound = Security$Outbound;
}

/** @internal */
declare const Security$inboundSchema: z.ZodType<Security, z.ZodTypeDef, unknown>;

/** @internal */
declare type Security$Outbound = {
    APIToken?: string | undefined;
};

/** @internal */
declare const Security$outboundSchema: z.ZodType<Security$Outbound, z.ZodTypeDef, Security>;

declare type Security = {
    apiToken?: string | undefined;
};

declare function securityFromJSON(jsonString: string): Result<Security, SDKValidationError>;

declare type SecurityState = {
    basic: {
        username?: string | undefined;
        password?: string | undefined;
    };
    headers: Record<string, string>;
    queryParams: Record<string, string>;
    cookies: Record<string, string>;
    oauth2: ({
        type: "password";
    } & OAuth2PasswordFlow) | {
        type: "none";
    };
};

declare function securityToJSON(security: Security): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SeenFeedbackInfo$ {
    /** @deprecated use `SeenFeedbackInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SeenFeedbackInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `SeenFeedbackInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SeenFeedbackInfo$Outbound, z.ZodTypeDef, SeenFeedbackInfo>;
    /** @deprecated use `SeenFeedbackInfo$Outbound` instead. */
    type Outbound = SeenFeedbackInfo$Outbound;
}

/** @internal */
declare const SeenFeedbackInfo$inboundSchema: z.ZodType<SeenFeedbackInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type SeenFeedbackInfo$Outbound = {
    isExplicit?: boolean | undefined;
};

/** @internal */
declare const SeenFeedbackInfo$outboundSchema: z.ZodType<SeenFeedbackInfo$Outbound, z.ZodTypeDef, SeenFeedbackInfo>;

declare type SeenFeedbackInfo = {
    /**
     * The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.
     */
    isExplicit?: boolean | undefined;
};

declare function seenFeedbackInfoFromJSON(jsonString: string): Result<SeenFeedbackInfo, SDKValidationError>;

declare function seenFeedbackInfoToJSON(seenFeedbackInfo: SeenFeedbackInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SensitiveContentOptions$ {
    /** @deprecated use `SensitiveContentOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SensitiveContentOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `SensitiveContentOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SensitiveContentOptions$Outbound, z.ZodTypeDef, SensitiveContentOptions>;
    /** @deprecated use `SensitiveContentOptions$Outbound` instead. */
    type Outbound = SensitiveContentOptions$Outbound;
}

/** @internal */
declare const SensitiveContentOptions$inboundSchema: z.ZodType<SensitiveContentOptions, z.ZodTypeDef, unknown>;

/** @internal */
declare type SensitiveContentOptions$Outbound = {
    sensitiveInfoTypes?: Array<SensitiveInfoType$Outbound> | undefined;
    sensitiveTerms?: Array<SensitiveExpression$Outbound> | undefined;
    sensitiveRegexes?: Array<SensitiveExpression$Outbound> | undefined;
};

/** @internal */
declare const SensitiveContentOptions$outboundSchema: z.ZodType<SensitiveContentOptions$Outbound, z.ZodTypeDef, SensitiveContentOptions>;

/**
 * Options for defining sensitive content within scanned documents.
 */
declare type SensitiveContentOptions = {
    /**
     * Predefined categories of terms to consider as sensitive content. See https://cloud.google.com/dlp/docs/infotypes-reference for available types.
     */
    sensitiveInfoTypes?: Array<SensitiveInfoType> | undefined;
    /**
     * list of words and phrases to consider as sensitive content
     */
    sensitiveTerms?: Array<SensitiveExpression> | undefined;
    /**
     * list of regular expressions to consider as sensitive content
     */
    sensitiveRegexes?: Array<SensitiveExpression> | undefined;
};

declare function sensitiveContentOptionsFromJSON(jsonString: string): Result<SensitiveContentOptions, SDKValidationError>;

declare function sensitiveContentOptionsToJSON(sensitiveContentOptions: SensitiveContentOptions): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SensitiveExpression$ {
    /** @deprecated use `SensitiveExpression$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SensitiveExpression, z.ZodTypeDef, unknown>;
    /** @deprecated use `SensitiveExpression$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SensitiveExpression$Outbound, z.ZodTypeDef, SensitiveExpression>;
    /** @deprecated use `SensitiveExpression$Outbound` instead. */
    type Outbound = SensitiveExpression$Outbound;
}

/** @internal */
declare const SensitiveExpression$inboundSchema: z.ZodType<SensitiveExpression, z.ZodTypeDef, unknown>;

/** @internal */
declare type SensitiveExpression$Outbound = {
    expression?: string | undefined;
    hotwords?: Array<Hotword$Outbound> | undefined;
};

/** @internal */
declare const SensitiveExpression$outboundSchema: z.ZodType<SensitiveExpression$Outbound, z.ZodTypeDef, SensitiveExpression>;

declare type SensitiveExpression = {
    /**
     * Sensitive word, phrase, or regular expression.
     */
    expression?: string | undefined;
    /**
     * Zero to three proximate regular expressions necessary to consider an expression as sensitive content.
     */
    hotwords?: Array<Hotword> | undefined;
};

declare function sensitiveExpressionFromJSON(jsonString: string): Result<SensitiveExpression, SDKValidationError>;

declare function sensitiveExpressionToJSON(sensitiveExpression: SensitiveExpression): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SensitiveInfoType$ {
    /** @deprecated use `SensitiveInfoType$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SensitiveInfoType, z.ZodTypeDef, unknown>;
    /** @deprecated use `SensitiveInfoType$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SensitiveInfoType$Outbound, z.ZodTypeDef, SensitiveInfoType>;
    /** @deprecated use `SensitiveInfoType$Outbound` instead. */
    type Outbound = SensitiveInfoType$Outbound;
}

/** @internal */
declare const SensitiveInfoType$inboundSchema: z.ZodType<SensitiveInfoType, z.ZodTypeDef, unknown>;

/** @internal */
declare type SensitiveInfoType$Outbound = {
    likelihoodThreshold?: string | undefined;
    infoType?: string | undefined;
};

/** @internal */
declare const SensitiveInfoType$outboundSchema: z.ZodType<SensitiveInfoType$Outbound, z.ZodTypeDef, SensitiveInfoType>;

declare type SensitiveInfoType = {
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    likelihoodThreshold?: LikelihoodThreshold | undefined;
    /**
     * Text representation of an info-type to scan for.
     */
    infoType?: string | undefined;
};

declare function sensitiveInfoTypeFromJSON(jsonString: string): Result<SensitiveInfoType, SDKValidationError>;

declare function sensitiveInfoTypeToJSON(sensitiveInfoType: SensitiveInfoType): string;

/**
 * Contains the list of servers available to the SDK
 */
export declare const ServerList: readonly ["https://{instance}-be.glean.com"];

export declare function serverURLFromOptions(options: SDKOptions): URL | null;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SessionInfo$ {
    /** @deprecated use `SessionInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SessionInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `SessionInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SessionInfo$Outbound, z.ZodTypeDef, SessionInfo>;
    /** @deprecated use `SessionInfo$Outbound` instead. */
    type Outbound = SessionInfo$Outbound;
}

/** @internal */
declare const SessionInfo$inboundSchema: z.ZodType<SessionInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type SessionInfo$Outbound = {
    sessionTrackingToken?: string | undefined;
    tabId?: string | undefined;
    lastSeen?: string | undefined;
    lastQuery?: string | undefined;
};

/** @internal */
declare const SessionInfo$outboundSchema: z.ZodType<SessionInfo$Outbound, z.ZodTypeDef, SessionInfo>;

declare type SessionInfo = {
    /**
     * A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.
     */
    sessionTrackingToken?: string | undefined;
    /**
     * A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.
     */
    tabId?: string | undefined;
    /**
     * The last time the server saw this token.
     */
    lastSeen?: Date | undefined;
    /**
     * The last query seen by the server.
     */
    lastQuery?: string | undefined;
};

declare function sessionInfoFromJSON(jsonString: string): Result<SessionInfo, SDKValidationError>;

declare function sessionInfoToJSON(sessionInfo: SessionInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Share$ {
    /** @deprecated use `Share$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Share, z.ZodTypeDef, unknown>;
    /** @deprecated use `Share$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Share$Outbound, z.ZodTypeDef, Share>;
    /** @deprecated use `Share$Outbound` instead. */
    type Outbound = Share$Outbound;
}

/** @internal */
declare const Share$inboundSchema: z.ZodType<Share, z.ZodTypeDef, unknown>;

/** @internal */
declare type Share$Outbound = {
    numDaysAgo: number;
    sharer?: Person$Outbound | undefined;
    sharingDocument?: Document$Outbound | undefined;
};

/** @internal */
declare const Share$outboundSchema: z.ZodType<Share$Outbound, z.ZodTypeDef, Share>;

/**
 * Search endpoint will only fill out numDays ago since that's all we need to display shared badge; docmetadata endpoint will fill out all the fields so that we can display shared badge tooltip
 */
declare type Share = {
    /**
     * The number of days that has passed since the share happened
     */
    numDaysAgo: number;
    sharer?: Person | undefined;
    sharingDocument?: Document_2 | undefined;
};

declare function shareFromJSON(jsonString: string): Result<Share, SDKValidationError>;

declare function shareToJSON(share: Share): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SharingOptions$ {
    /** @deprecated use `SharingOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SharingOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `SharingOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SharingOptions$Outbound, z.ZodTypeDef, SharingOptions>;
    /** @deprecated use `SharingOptions$Outbound` instead. */
    type Outbound = SharingOptions$Outbound;
}

/** @internal */
declare const SharingOptions$inboundSchema: z.ZodType<SharingOptions, z.ZodTypeDef, unknown>;

/** @internal */
declare type SharingOptions$Outbound = {
    enabled?: boolean | undefined;
    threshold?: number | undefined;
    thresholdEnabled?: boolean | undefined;
    anyoneWithLinkEnabled?: boolean | undefined;
    anyoneInternalEnabled?: boolean | undefined;
    anonymousAccessEnabled?: boolean | undefined;
    userAccessEnabled?: boolean | undefined;
    userIds?: Array<string> | undefined;
};

/** @internal */
declare const SharingOptions$outboundSchema: z.ZodType<SharingOptions$Outbound, z.ZodTypeDef, SharingOptions>;

/**
 * Controls how "shared" a document must be to get picked for scans.
 */
declare type SharingOptions = {
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    enabled?: boolean | undefined;
    /**
     * The minimum number of users the document is shared with.
     */
    threshold?: number | undefined;
    /**
     * Documents will be filtered based on how many people have access to it.
     */
    thresholdEnabled?: boolean | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    anyoneWithLinkEnabled?: boolean | undefined;
    /**
     * Only users within the organization can access the document.
     */
    anyoneInternalEnabled?: boolean | undefined;
    /**
     * Anyone on the internet can access the document.
     */
    anonymousAccessEnabled?: boolean | undefined;
    /**
     * Enable user access check
     */
    userAccessEnabled?: boolean | undefined;
    /**
     * Any one of the specified users can access the document.
     */
    userIds?: Array<string> | undefined;
};

declare function sharingOptionsFromJSON(jsonString: string): Result<SharingOptions, SDKValidationError>;

declare function sharingOptionsToJSON(sharingOptions: SharingOptions): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Shortcut$ {
    /** @deprecated use `Shortcut$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Shortcut, z.ZodTypeDef, unknown>;
    /** @deprecated use `Shortcut$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Shortcut$Outbound, z.ZodTypeDef, Shortcut>;
    /** @deprecated use `Shortcut$Outbound` instead. */
    type Outbound = Shortcut$Outbound;
}

/** @internal */
declare const Shortcut$inboundSchema: z.ZodType<Shortcut, z.ZodTypeDef, unknown>;

/** @internal */
declare type Shortcut$Outbound = {
    id?: number | undefined;
    inputAlias: string;
    destinationUrl?: string | undefined;
    destinationDocumentId?: string | undefined;
    description?: string | undefined;
    unlisted?: boolean | undefined;
    urlTemplate?: string | undefined;
    addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    permissions?: ObjectPermissions$Outbound | undefined;
    createdBy?: Person$Outbound | undefined;
    createTime?: string | undefined;
    updatedBy?: Person$Outbound | undefined;
    updateTime?: string | undefined;
    destinationDocument?: Document$Outbound | undefined;
    intermediateUrl?: string | undefined;
    viewPrefix?: string | undefined;
    isExternal?: boolean | undefined;
    editUrl?: string | undefined;
    alias?: string | undefined;
    title?: string | undefined;
    roles?: Array<UserRoleSpecification$Outbound> | undefined;
};

/** @internal */
declare const Shortcut$outboundSchema: z.ZodType<Shortcut$Outbound, z.ZodTypeDef, Shortcut>;

declare type Shortcut = {
    /**
     * The opaque id of the user generated content.
     */
    id?: number | undefined;
    /**
     * Link text following go/ prefix as entered by the user.
     */
    inputAlias: string;
    /**
     * Destination URL for the shortcut.
     */
    destinationUrl?: string | undefined;
    /**
     * Glean Document ID for the URL, if known.
     */
    destinationDocumentId?: string | undefined;
    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    description?: string | undefined;
    /**
     * Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only.
     */
    unlisted?: boolean | undefined;
    /**
     * For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
     */
    urlTemplate?: string | undefined;
    /**
     * A list of user roles added for the Shortcut.
     */
    addedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of user roles removed for the Shortcut.
     */
    removedRoles?: Array<UserRoleSpecification> | undefined;
    permissions?: ObjectPermissions | undefined;
    createdBy?: Person | undefined;
    /**
     * The time the shortcut was created in ISO format (ISO 8601).
     */
    createTime?: Date | undefined;
    updatedBy?: Person | undefined;
    /**
     * The time the shortcut was updated in ISO format (ISO 8601).
     */
    updateTime?: Date | undefined;
    destinationDocument?: Document_2 | undefined;
    /**
     * The URL from which the user is then redirected to the destination URL. Full replacement for https://go/<inputAlias>.
     */
    intermediateUrl?: string | undefined;
    /**
     * The part of the shortcut preceding the input alias when used for showing shortcuts to users. Should end with "/". e.g. "go/" for native shortcuts.
     */
    viewPrefix?: string | undefined;
    /**
     * Indicates whether a shortcut is native or external.
     */
    isExternal?: boolean | undefined;
    /**
     * The URL using which the user can access the edit page of the shortcut.
     */
    editUrl?: string | undefined;
    /**
     * canonical link text following go/ prefix where hyphen/underscore is removed.
     */
    alias?: string | undefined;
    /**
     * Title for the Go Link
     */
    title?: string | undefined;
    /**
     * A list of user roles for the Go Link.
     */
    roles?: Array<UserRoleSpecification> | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ShortcutError$ {
    /** @deprecated use `ShortcutError$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ShortcutError, z.ZodTypeDef, unknown>;
    /** @deprecated use `ShortcutError$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ShortcutError$Outbound, z.ZodTypeDef, ShortcutError>;
    /** @deprecated use `ShortcutError$Outbound` instead. */
    type Outbound = ShortcutError$Outbound;
}

/** @internal */
declare const ShortcutError$inboundSchema: z.ZodType<ShortcutError, z.ZodTypeDef, unknown>;

/** @internal */
declare type ShortcutError$Outbound = {
    errorType?: string | undefined;
};

/** @internal */
declare const ShortcutError$outboundSchema: z.ZodType<ShortcutError$Outbound, z.ZodTypeDef, ShortcutError>;

declare type ShortcutError = {
    errorType?: ShortcutErrorErrorType | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ShortcutErrorErrorType$ {
    /** @deprecated use `ShortcutErrorErrorType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly NoPermission: "NO_PERMISSION";
        readonly InvalidId: "INVALID_ID";
        readonly ExistingShortcut: "EXISTING_SHORTCUT";
        readonly InvalidChars: "INVALID_CHARS";
    }>;
    /** @deprecated use `ShortcutErrorErrorType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly NoPermission: "NO_PERMISSION";
        readonly InvalidId: "INVALID_ID";
        readonly ExistingShortcut: "EXISTING_SHORTCUT";
        readonly InvalidChars: "INVALID_CHARS";
    }>;
}

/** @internal */
declare const ShortcutErrorErrorType$inboundSchema: z.ZodNativeEnum<typeof ShortcutErrorErrorType>;

/** @internal */
declare const ShortcutErrorErrorType$outboundSchema: z.ZodNativeEnum<typeof ShortcutErrorErrorType>;

declare const ShortcutErrorErrorType: {
    readonly NoPermission: "NO_PERMISSION";
    readonly InvalidId: "INVALID_ID";
    readonly ExistingShortcut: "EXISTING_SHORTCUT";
    readonly InvalidChars: "INVALID_CHARS";
};

declare type ShortcutErrorErrorType = ClosedEnum<typeof ShortcutErrorErrorType>;

declare function shortcutErrorFromJSON(jsonString: string): Result<ShortcutError, SDKValidationError>;

declare function shortcutErrorToJSON(shortcutError: ShortcutError): string;

declare function shortcutFromJSON(jsonString: string): Result<Shortcut, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ShortcutInsight$ {
    /** @deprecated use `ShortcutInsight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ShortcutInsight, z.ZodTypeDef, unknown>;
    /** @deprecated use `ShortcutInsight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ShortcutInsight$Outbound, z.ZodTypeDef, ShortcutInsight>;
    /** @deprecated use `ShortcutInsight$Outbound` instead. */
    type Outbound = ShortcutInsight$Outbound;
}

/** @internal */
declare const ShortcutInsight$inboundSchema: z.ZodType<ShortcutInsight, z.ZodTypeDef, unknown>;

/** @internal */
declare type ShortcutInsight$Outbound = {
    shortcut: Shortcut$Outbound;
    visitCount?: CountInfo$Outbound | undefined;
    visitorCount?: CountInfo$Outbound | undefined;
};

/** @internal */
declare const ShortcutInsight$outboundSchema: z.ZodType<ShortcutInsight$Outbound, z.ZodTypeDef, ShortcutInsight>;

declare type ShortcutInsight = {
    shortcut: Shortcut;
    visitCount?: CountInfo | undefined;
    visitorCount?: CountInfo | undefined;
};

declare function shortcutInsightFromJSON(jsonString: string): Result<ShortcutInsight, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ShortcutInsightsResponse$ {
    /** @deprecated use `ShortcutInsightsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ShortcutInsightsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ShortcutInsightsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ShortcutInsightsResponse$Outbound, z.ZodTypeDef, ShortcutInsightsResponse>;
    /** @deprecated use `ShortcutInsightsResponse$Outbound` instead. */
    type Outbound = ShortcutInsightsResponse$Outbound;
}

/** @internal */
declare const ShortcutInsightsResponse$inboundSchema: z.ZodType<ShortcutInsightsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ShortcutInsightsResponse$Outbound = {
    lastLogTimestamp?: number | undefined;
    shortcutInsights?: Array<ShortcutInsight$Outbound> | undefined;
    departments?: Array<string> | undefined;
    minVisitorThreshold?: number | undefined;
};

/** @internal */
declare const ShortcutInsightsResponse$outboundSchema: z.ZodType<ShortcutInsightsResponse$Outbound, z.ZodTypeDef, ShortcutInsightsResponse>;

declare type ShortcutInsightsResponse = {
    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    lastLogTimestamp?: number | undefined;
    /**
     * Insights for shortcuts.
     */
    shortcutInsights?: Array<ShortcutInsight> | undefined;
    /**
     * list of departments applicable for shortcuts tab.
     */
    departments?: Array<string> | undefined;
    /**
     * Min threshold in number of visitors while populating results, otherwise 0.
     */
    minVisitorThreshold?: number | undefined;
};

declare function shortcutInsightsResponseFromJSON(jsonString: string): Result<ShortcutInsightsResponse, SDKValidationError>;

declare function shortcutInsightsResponseToJSON(shortcutInsightsResponse: ShortcutInsightsResponse): string;

declare function shortcutInsightToJSON(shortcutInsight: ShortcutInsight): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ShortcutMutableProperties$ {
    /** @deprecated use `ShortcutMutableProperties$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ShortcutMutableProperties, z.ZodTypeDef, unknown>;
    /** @deprecated use `ShortcutMutableProperties$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ShortcutMutableProperties$Outbound, z.ZodTypeDef, ShortcutMutableProperties>;
    /** @deprecated use `ShortcutMutableProperties$Outbound` instead. */
    type Outbound = ShortcutMutableProperties$Outbound;
}

/** @internal */
declare const ShortcutMutableProperties$inboundSchema: z.ZodType<ShortcutMutableProperties, z.ZodTypeDef, unknown>;

/** @internal */
declare type ShortcutMutableProperties$Outbound = {
    inputAlias?: string | undefined;
    destinationUrl?: string | undefined;
    destinationDocumentId?: string | undefined;
    description?: string | undefined;
    unlisted?: boolean | undefined;
    urlTemplate?: string | undefined;
    addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
};

/** @internal */
declare const ShortcutMutableProperties$outboundSchema: z.ZodType<ShortcutMutableProperties$Outbound, z.ZodTypeDef, ShortcutMutableProperties>;

declare type ShortcutMutableProperties = {
    /**
     * Link text following go/ prefix as entered by the user.
     */
    inputAlias?: string | undefined;
    /**
     * Destination URL for the shortcut.
     */
    destinationUrl?: string | undefined;
    /**
     * Glean Document ID for the URL, if known.
     */
    destinationDocumentId?: string | undefined;
    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    description?: string | undefined;
    /**
     * Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only.
     */
    unlisted?: boolean | undefined;
    /**
     * For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
     */
    urlTemplate?: string | undefined;
    /**
     * A list of user roles added for the Shortcut.
     */
    addedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of user roles removed for the Shortcut.
     */
    removedRoles?: Array<UserRoleSpecification> | undefined;
};

declare function shortcutMutablePropertiesFromJSON(jsonString: string): Result<ShortcutMutableProperties, SDKValidationError>;

declare function shortcutMutablePropertiesToJSON(shortcutMutableProperties: ShortcutMutableProperties): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ShortcutsPaginationMetadata$ {
    /** @deprecated use `ShortcutsPaginationMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ShortcutsPaginationMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `ShortcutsPaginationMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ShortcutsPaginationMetadata$Outbound, z.ZodTypeDef, ShortcutsPaginationMetadata>;
    /** @deprecated use `ShortcutsPaginationMetadata$Outbound` instead. */
    type Outbound = ShortcutsPaginationMetadata$Outbound;
}

/** @internal */
declare const ShortcutsPaginationMetadata$inboundSchema: z.ZodType<ShortcutsPaginationMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type ShortcutsPaginationMetadata$Outbound = {
    cursor?: string | undefined;
    hasNextPage?: boolean | undefined;
    totalItemCount?: number | undefined;
};

/** @internal */
declare const ShortcutsPaginationMetadata$outboundSchema: z.ZodType<ShortcutsPaginationMetadata$Outbound, z.ZodTypeDef, ShortcutsPaginationMetadata>;

declare type ShortcutsPaginationMetadata = {
    /**
     * Cursor indicates the start of the next page of results
     */
    cursor?: string | undefined;
    hasNextPage?: boolean | undefined;
    totalItemCount?: number | undefined;
};

declare function shortcutsPaginationMetadataFromJSON(jsonString: string): Result<ShortcutsPaginationMetadata, SDKValidationError>;

declare function shortcutsPaginationMetadataToJSON(shortcutsPaginationMetadata: ShortcutsPaginationMetadata): string;

declare function shortcutToJSON(shortcut: Shortcut): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SideBySideImplementation$ {
    /** @deprecated use `SideBySideImplementation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SideBySideImplementation, z.ZodTypeDef, unknown>;
    /** @deprecated use `SideBySideImplementation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SideBySideImplementation$Outbound, z.ZodTypeDef, SideBySideImplementation>;
    /** @deprecated use `SideBySideImplementation$Outbound` instead. */
    type Outbound = SideBySideImplementation$Outbound;
}

/** @internal */
declare const SideBySideImplementation$inboundSchema: z.ZodType<SideBySideImplementation, z.ZodTypeDef, unknown>;

/** @internal */
declare type SideBySideImplementation$Outbound = {
    implementationId?: string | undefined;
    implementationName?: string | undefined;
    searchParams?: {
        [k: string]: string;
    } | undefined;
    response?: string | undefined;
    responseMetadata?: ResponseMetadata$Outbound | undefined;
};

/** @internal */
declare const SideBySideImplementation$outboundSchema: z.ZodType<SideBySideImplementation$Outbound, z.ZodTypeDef, SideBySideImplementation>;

declare type SideBySideImplementation = {
    /**
     * Unique identifier for this implementation variant.
     */
    implementationId?: string | undefined;
    /**
     * Human-readable name for this implementation (e.g., "Variant A", "GPT-4", "Claude").
     */
    implementationName?: string | undefined;
    /**
     * The search/chat parameters used for this implementation.
     */
    searchParams?: {
        [k: string]: string;
    } | undefined;
    /**
     * The full response generated by this implementation.
     */
    response?: string | undefined;
    /**
     * Metadata about the response (e.g., latency, token count).
     */
    responseMetadata?: ResponseMetadata | undefined;
};

declare function sideBySideImplementationFromJSON(jsonString: string): Result<SideBySideImplementation, SDKValidationError>;

declare function sideBySideImplementationToJSON(sideBySideImplementation: SideBySideImplementation): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SocialNetwork$ {
    /** @deprecated use `SocialNetwork$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SocialNetwork, z.ZodTypeDef, unknown>;
    /** @deprecated use `SocialNetwork$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SocialNetwork$Outbound, z.ZodTypeDef, SocialNetwork>;
    /** @deprecated use `SocialNetwork$Outbound` instead. */
    type Outbound = SocialNetwork$Outbound;
}

/** @internal */
declare const SocialNetwork$inboundSchema: z.ZodType<SocialNetwork, z.ZodTypeDef, unknown>;

/** @internal */
declare type SocialNetwork$Outbound = {
    name: string;
    profileName?: string | undefined;
    profileUrl: string;
};

/** @internal */
declare const SocialNetwork$outboundSchema: z.ZodType<SocialNetwork$Outbound, z.ZodTypeDef, SocialNetwork>;

declare type SocialNetwork = {
    /**
     * Possible values are "twitter", "linkedin".
     */
    name: string;
    /**
     * Human-readable profile name.
     */
    profileName?: string | undefined;
    /**
     * Link to profile.
     */
    profileUrl: string;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SocialNetworkDefinition$ {
    /** @deprecated use `SocialNetworkDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SocialNetworkDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `SocialNetworkDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SocialNetworkDefinition$Outbound, z.ZodTypeDef, SocialNetworkDefinition>;
    /** @deprecated use `SocialNetworkDefinition$Outbound` instead. */
    type Outbound = SocialNetworkDefinition$Outbound;
}

/** @internal */
declare const SocialNetworkDefinition$inboundSchema: z.ZodType<SocialNetworkDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type SocialNetworkDefinition$Outbound = {
    name?: string | undefined;
    profileName?: string | undefined;
    profileUrl?: string | undefined;
};

/** @internal */
declare const SocialNetworkDefinition$outboundSchema: z.ZodType<SocialNetworkDefinition$Outbound, z.ZodTypeDef, SocialNetworkDefinition>;

/**
 * Employee's social network profile
 */
declare type SocialNetworkDefinition = {
    /**
     * Possible values are "twitter", "linkedin".
     */
    name?: string | undefined;
    /**
     * Human-readable profile name.
     */
    profileName?: string | undefined;
    /**
     * Link to profile.
     */
    profileUrl?: string | undefined;
};

declare function socialNetworkDefinitionFromJSON(jsonString: string): Result<SocialNetworkDefinition, SDKValidationError>;

declare function socialNetworkDefinitionToJSON(socialNetworkDefinition: SocialNetworkDefinition): string;

declare function socialNetworkFromJSON(jsonString: string): Result<SocialNetwork, SDKValidationError>;

declare function socialNetworkToJSON(socialNetwork: SocialNetwork): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SortOptions$ {
    /** @deprecated use `SortOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SortOptions, z.ZodTypeDef, unknown>;
    /** @deprecated use `SortOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SortOptions$Outbound, z.ZodTypeDef, SortOptions>;
    /** @deprecated use `SortOptions$Outbound` instead. */
    type Outbound = SortOptions$Outbound;
}

/** @internal */
declare const SortOptions$inboundSchema: z.ZodType<SortOptions, z.ZodTypeDef, unknown>;

/** @internal */
declare type SortOptions$Outbound = {
    orderBy?: string | undefined;
    sortBy?: string | undefined;
};

/** @internal */
declare const SortOptions$outboundSchema: z.ZodType<SortOptions$Outbound, z.ZodTypeDef, SortOptions>;

declare type SortOptions = {
    orderBy?: OrderBy | undefined;
    sortBy?: string | undefined;
};

declare function sortOptionsFromJSON(jsonString: string): Result<SortOptions, SDKValidationError>;

declare function sortOptionsToJSON(sortOptions: SortOptions): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace State$ {
    /** @deprecated use `State$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Unverified: "UNVERIFIED";
        readonly Verified: "VERIFIED";
        readonly Deprecated: "DEPRECATED";
    }>;
    /** @deprecated use `State$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Unverified: "UNVERIFIED";
        readonly Verified: "VERIFIED";
        readonly Deprecated: "DEPRECATED";
    }>;
}

/** @internal */
declare const State$inboundSchema: z.ZodNativeEnum<typeof State>;

/** @internal */
declare const State$outboundSchema: z.ZodNativeEnum<typeof State>;

/**
 * The verification state for the document.
 */
declare const State: {
    readonly Unverified: "UNVERIFIED";
    readonly Verified: "VERIFIED";
    readonly Deprecated: "DEPRECATED";
};

/**
 * The verification state for the document.
 */
declare type State = ClosedEnum<typeof State>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace StructuredLink$ {
    /** @deprecated use `StructuredLink$inboundSchema` instead. */
    const inboundSchema: z.ZodType<StructuredLink, z.ZodTypeDef, unknown>;
    /** @deprecated use `StructuredLink$outboundSchema` instead. */
    const outboundSchema: z.ZodType<StructuredLink$Outbound, z.ZodTypeDef, StructuredLink>;
    /** @deprecated use `StructuredLink$Outbound` instead. */
    type Outbound = StructuredLink$Outbound;
}

/** @internal */
declare const StructuredLink$inboundSchema: z.ZodType<StructuredLink, z.ZodTypeDef, unknown>;

/** @internal */
declare type StructuredLink$Outbound = {
    name?: string | undefined;
    url?: string | undefined;
    iconConfig?: IconConfig$Outbound | undefined;
};

/** @internal */
declare const StructuredLink$outboundSchema: z.ZodType<StructuredLink$Outbound, z.ZodTypeDef, StructuredLink>;

/**
 * The display configuration for a link.
 */
declare type StructuredLink = {
    /**
     * The display name for the link
     */
    name?: string | undefined;
    /**
     * The URL for the link.
     */
    url?: string | undefined;
    /**
     * Defines how to render an icon
     */
    iconConfig?: IconConfig | undefined;
};

declare function structuredLinkFromJSON(jsonString: string): Result<StructuredLink, SDKValidationError>;

declare function structuredLinkToJSON(structuredLink: StructuredLink): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace StructuredLocation$ {
    /** @deprecated use `StructuredLocation$inboundSchema` instead. */
    const inboundSchema: z.ZodType<StructuredLocation, z.ZodTypeDef, unknown>;
    /** @deprecated use `StructuredLocation$outboundSchema` instead. */
    const outboundSchema: z.ZodType<StructuredLocation$Outbound, z.ZodTypeDef, StructuredLocation>;
    /** @deprecated use `StructuredLocation$Outbound` instead. */
    type Outbound = StructuredLocation$Outbound;
}

/** @internal */
declare const StructuredLocation$inboundSchema: z.ZodType<StructuredLocation, z.ZodTypeDef, unknown>;

/** @internal */
declare type StructuredLocation$Outbound = {
    deskLocation?: string | undefined;
    timezone?: string | undefined;
    address?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
};

/** @internal */
declare const StructuredLocation$outboundSchema: z.ZodType<StructuredLocation$Outbound, z.ZodTypeDef, StructuredLocation>;

/**
 * Detailed location with information about country, state, city etc.
 */
declare type StructuredLocation = {
    /**
     * Desk number.
     */
    deskLocation?: string | undefined;
    /**
     * Location's timezone, e.g. UTC, PST.
     */
    timezone?: string | undefined;
    /**
     * Office address or name.
     */
    address?: string | undefined;
    /**
     * Name of the city.
     */
    city?: string | undefined;
    /**
     * State code.
     */
    state?: string | undefined;
    /**
     * Region information, e.g. NORAM, APAC.
     */
    region?: string | undefined;
    /**
     * ZIP Code for the address.
     */
    zipCode?: string | undefined;
    /**
     * Country name.
     */
    country?: string | undefined;
    /**
     * Alpha-2 or Alpha-3 ISO 3166 country code, e.g. US or USA.
     */
    countryCode?: string | undefined;
};

declare function structuredLocationFromJSON(jsonString: string): Result<StructuredLocation, SDKValidationError>;

declare function structuredLocationToJSON(structuredLocation: StructuredLocation): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace StructuredResult$ {
    /** @deprecated use `StructuredResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<StructuredResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `StructuredResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<StructuredResult$Outbound, z.ZodTypeDef, StructuredResult>;
    /** @deprecated use `StructuredResult$Outbound` instead. */
    type Outbound = StructuredResult$Outbound;
}

/** @internal */
declare const StructuredResult$inboundSchema: z.ZodType<StructuredResult, z.ZodTypeDef, unknown>;

/** @internal */
declare type StructuredResult$Outbound = {
    document?: Document$Outbound | undefined;
    person?: Person$Outbound | undefined;
    customer?: Customer$Outbound | undefined;
    team?: Team$Outbound | undefined;
    customEntity?: CustomEntity$Outbound | undefined;
    answer?: Answer$Outbound | undefined;
    generatedQna?: GeneratedQna$Outbound | undefined;
    extractedQnA?: ExtractedQnA$Outbound | undefined;
    meeting?: Meeting$Outbound | undefined;
    app?: AppResult$Outbound | undefined;
    collection?: Collection$Outbound | undefined;
    answerBoard?: AnswerBoard$Outbound | undefined;
    code?: Code$Outbound | undefined;
    shortcut?: Shortcut$Outbound | undefined;
    querySuggestions?: QuerySuggestionList$Outbound | undefined;
    relatedDocuments?: Array<RelatedDocuments$Outbound> | undefined;
    relatedQuestion?: RelatedQuestion$Outbound | undefined;
    disambiguation?: Disambiguation$Outbound | undefined;
    snippets?: Array<SearchResultSnippet$Outbound> | undefined;
    trackingToken?: string | undefined;
    prominence?: string | undefined;
    source?: string | undefined;
};

/** @internal */
declare const StructuredResult$outboundSchema: z.ZodType<StructuredResult$Outbound, z.ZodTypeDef, StructuredResult>;

/**
 * A single object that can support any object in the work graph. Only a single object will be populated.
 */
declare type StructuredResult = {
    document?: Document_2 | undefined;
    person?: Person | undefined;
    customer?: Customer | undefined;
    team?: Team | undefined;
    customEntity?: CustomEntity | undefined;
    answer?: Answer | undefined;
    generatedQna?: GeneratedQna | undefined;
    extractedQnA?: ExtractedQnA | undefined;
    meeting?: Meeting | undefined;
    app?: AppResult | undefined;
    collection?: Collection | undefined;
    answerBoard?: AnswerBoard | undefined;
    code?: Code | undefined;
    shortcut?: Shortcut | undefined;
    querySuggestions?: QuerySuggestionList | undefined;
    /**
     * A list of documents related to this structured result.
     */
    relatedDocuments?: Array<RelatedDocuments> | undefined;
    relatedQuestion?: RelatedQuestion | undefined;
    /**
     * A disambiguation between multiple entities with the same name
     */
    disambiguation?: Disambiguation | undefined;
    /**
     * Any snippets associated to the populated object.
     */
    snippets?: Array<SearchResultSnippet> | undefined;
    /**
     * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
     */
    trackingToken?: string | undefined;
    /**
     * The level of visual distinction that should be given to a result.
     */
    prominence?: Prominence | undefined;
    /**
     * Source context for this result. Possible values depend on the result type.
     */
    source?: StructuredResultSource | undefined;
};

declare function structuredResultFromJSON(jsonString: string): Result<StructuredResult, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace StructuredResultSource$ {
    /** @deprecated use `StructuredResultSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ExpertDetection: "EXPERT_DETECTION";
        readonly EntityNlq: "ENTITY_NLQ";
    }>;
    /** @deprecated use `StructuredResultSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ExpertDetection: "EXPERT_DETECTION";
        readonly EntityNlq: "ENTITY_NLQ";
    }>;
}

/** @internal */
declare const StructuredResultSource$inboundSchema: z.ZodNativeEnum<typeof StructuredResultSource>;

/** @internal */
declare const StructuredResultSource$outboundSchema: z.ZodNativeEnum<typeof StructuredResultSource>;

/**
 * Source context for this result. Possible values depend on the result type.
 */
declare const StructuredResultSource: {
    readonly ExpertDetection: "EXPERT_DETECTION";
    readonly EntityNlq: "ENTITY_NLQ";
};

/**
 * Source context for this result. Possible values depend on the result type.
 */
declare type StructuredResultSource = ClosedEnum<typeof StructuredResultSource>;

declare function structuredResultToJSON(structuredResult: StructuredResult): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace StructuredText$ {
    /** @deprecated use `StructuredText$inboundSchema` instead. */
    const inboundSchema: z.ZodType<StructuredText, z.ZodTypeDef, unknown>;
    /** @deprecated use `StructuredText$outboundSchema` instead. */
    const outboundSchema: z.ZodType<StructuredText$Outbound, z.ZodTypeDef, StructuredText>;
    /** @deprecated use `StructuredText$Outbound` instead. */
    type Outbound = StructuredText$Outbound;
}

/** @internal */
declare const StructuredText$inboundSchema: z.ZodType<StructuredText, z.ZodTypeDef, unknown>;

/** @internal */
declare type StructuredText$Outbound = {
    text: string;
    structuredList?: Array<StructuredTextItem$Outbound> | undefined;
};

/** @internal */
declare const StructuredText$outboundSchema: z.ZodType<StructuredText$Outbound, z.ZodTypeDef, StructuredText>;

declare type StructuredText = {
    text: string;
    /**
     * An array of objects each of which contains either a string or a link which optionally corresponds to a document.
     */
    structuredList?: Array<StructuredTextItem> | undefined;
};

declare function structuredTextFromJSON(jsonString: string): Result<StructuredText, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace StructuredTextItem$ {
    /** @deprecated use `StructuredTextItem$inboundSchema` instead. */
    const inboundSchema: z.ZodType<StructuredTextItem, z.ZodTypeDef, unknown>;
    /** @deprecated use `StructuredTextItem$outboundSchema` instead. */
    const outboundSchema: z.ZodType<StructuredTextItem$Outbound, z.ZodTypeDef, StructuredTextItem>;
    /** @deprecated use `StructuredTextItem$Outbound` instead. */
    type Outbound = StructuredTextItem$Outbound;
}

/** @internal */
declare const StructuredTextItem$inboundSchema: z.ZodType<StructuredTextItem, z.ZodTypeDef, unknown>;

/** @internal */
declare type StructuredTextItem$Outbound = {
    link?: string | undefined;
    document?: Document$Outbound | undefined;
    text?: string | undefined;
    structuredResult?: StructuredResult$Outbound | undefined;
};

/** @internal */
declare const StructuredTextItem$outboundSchema: z.ZodType<StructuredTextItem$Outbound, z.ZodTypeDef, StructuredTextItem>;

declare type StructuredTextItem = {
    link?: string | undefined;
    document?: Document_2 | undefined;
    text?: string | undefined;
    /**
     * A single object that can support any object in the work graph. Only a single object will be populated.
     */
    structuredResult?: StructuredResult | undefined;
};

declare function structuredTextItemFromJSON(jsonString: string): Result<StructuredTextItem, SDKValidationError>;

declare function structuredTextItemToJSON(structuredTextItem: StructuredTextItem): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace StructuredTextMutableProperties$ {
    /** @deprecated use `StructuredTextMutableProperties$inboundSchema` instead. */
    const inboundSchema: z.ZodType<StructuredTextMutableProperties, z.ZodTypeDef, unknown>;
    /** @deprecated use `StructuredTextMutableProperties$outboundSchema` instead. */
    const outboundSchema: z.ZodType<StructuredTextMutableProperties$Outbound, z.ZodTypeDef, StructuredTextMutableProperties>;
    /** @deprecated use `StructuredTextMutableProperties$Outbound` instead. */
    type Outbound = StructuredTextMutableProperties$Outbound;
}

/** @internal */
declare const StructuredTextMutableProperties$inboundSchema: z.ZodType<StructuredTextMutableProperties, z.ZodTypeDef, unknown>;

/** @internal */
declare type StructuredTextMutableProperties$Outbound = {
    text: string;
};

/** @internal */
declare const StructuredTextMutableProperties$outboundSchema: z.ZodType<StructuredTextMutableProperties$Outbound, z.ZodTypeDef, StructuredTextMutableProperties>;

declare type StructuredTextMutableProperties = {
    text: string;
};

declare function structuredTextMutablePropertiesFromJSON(jsonString: string): Result<StructuredTextMutableProperties, SDKValidationError>;

declare function structuredTextMutablePropertiesToJSON(structuredTextMutableProperties: StructuredTextMutableProperties): string;

declare function structuredTextToJSON(structuredText: StructuredText): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SummarizeRequest$ {
    /** @deprecated use `SummarizeRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SummarizeRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `SummarizeRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SummarizeRequest$Outbound, z.ZodTypeDef, SummarizeRequest>;
    /** @deprecated use `SummarizeRequest$Outbound` instead. */
    type Outbound = SummarizeRequest$Outbound;
}

/** @internal */
declare const SummarizeRequest$inboundSchema: z.ZodType<SummarizeRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type SummarizeRequest$Outbound = {
    timestamp?: string | undefined;
    query?: string | undefined;
    preferredSummaryLength?: number | undefined;
    documentSpecs: Array<DocumentSpecUnion$Outbound>;
    trackingToken?: string | undefined;
};

/** @internal */
declare const SummarizeRequest$outboundSchema: z.ZodType<SummarizeRequest$Outbound, z.ZodTypeDef, SummarizeRequest>;

/**
 * Summary of the document
 */
declare type SummarizeRequest = {
    /**
     * The ISO 8601 timestamp associated with the client request.
     */
    timestamp?: Date | undefined;
    /**
     * Optional query that the summary should be about
     */
    query?: string | undefined;
    /**
     * Optional length of summary output. If not given, defaults to 500 chars.
     */
    preferredSummaryLength?: number | undefined;
    /**
     * Specifications of documents to summarize
     */
    documentSpecs: Array<DocumentSpecUnion>;
    /**
     * An opaque token that represents this particular result. To be used for /feedback reporting.
     */
    trackingToken?: string | undefined;
};

declare function summarizeRequestFromJSON(jsonString: string): Result<SummarizeRequest, SDKValidationError>;

declare function summarizeRequestToJSON(summarizeRequest: SummarizeRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace SummarizeResponse$ {
    /** @deprecated use `SummarizeResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SummarizeResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `SummarizeResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SummarizeResponse$Outbound, z.ZodTypeDef, SummarizeResponse>;
    /** @deprecated use `SummarizeResponse$Outbound` instead. */
    type Outbound = SummarizeResponse$Outbound;
}

/** @internal */
declare const SummarizeResponse$inboundSchema: z.ZodType<SummarizeResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type SummarizeResponse$Outbound = {
    error?: ErrorT$Outbound | undefined;
    summary?: Summary$Outbound | undefined;
    trackingToken?: string | undefined;
};

/** @internal */
declare const SummarizeResponse$outboundSchema: z.ZodType<SummarizeResponse$Outbound, z.ZodTypeDef, SummarizeResponse>;

declare type SummarizeResponse = {
    error?: ErrorT | undefined;
    summary?: Summary | undefined;
    /**
     * An opaque token that represents this summary in this particular query. To be used for /feedback reporting.
     */
    trackingToken?: string | undefined;
};

declare function summarizeResponseFromJSON(jsonString: string): Result<SummarizeResponse, SDKValidationError>;

declare function summarizeResponseToJSON(summarizeResponse: SummarizeResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Summary$ {
    /** @deprecated use `Summary$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Summary, z.ZodTypeDef, unknown>;
    /** @deprecated use `Summary$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Summary$Outbound, z.ZodTypeDef, Summary>;
    /** @deprecated use `Summary$Outbound` instead. */
    type Outbound = Summary$Outbound;
}

/** @internal */
declare const Summary$inboundSchema: z.ZodType<Summary, z.ZodTypeDef, unknown>;

/** @internal */
declare type Summary$Outbound = {
    text?: string | undefined;
    followUpPrompts?: Array<string> | undefined;
};

/** @internal */
declare const Summary$outboundSchema: z.ZodType<Summary$Outbound, z.ZodTypeDef, Summary>;

declare type Summary = {
    text?: string | undefined;
    /**
     * Follow-up prompts based on the summarized doc
     */
    followUpPrompts?: Array<string> | undefined;
};

declare function summaryFromJSON(jsonString: string): Result<Summary, SDKValidationError>;

declare function summaryToJSON(summary: Summary): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Team$ {
    /** @deprecated use `Team$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Team, z.ZodTypeDef, unknown>;
    /** @deprecated use `Team$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Team$Outbound, z.ZodTypeDef, Team>;
    /** @deprecated use `Team$Outbound` instead. */
    type Outbound = Team$Outbound;
}

/** @internal */
declare const Team$inboundSchema: z.ZodType<Team, z.ZodTypeDef, unknown>;

/** @internal */
declare type Team$Outbound = {
    relatedObjects?: {
        [k: string]: RelatedObjectEdge$Outbound;
    } | undefined;
    permissions?: ObjectPermissions$Outbound | undefined;
    id: string;
    name: string;
    description?: string | undefined;
    businessUnit?: string | undefined;
    department?: string | undefined;
    photoUrl?: string | undefined;
    bannerUrl?: string | undefined;
    externalLink?: string | undefined;
    members?: Array<PersonToTeamRelationship$Outbound> | undefined;
    memberCount?: number | undefined;
    emails?: Array<TeamEmail$Outbound> | undefined;
    customFields?: Array<CustomFieldData$Outbound> | undefined;
    datasourceProfiles?: Array<DatasourceProfile$Outbound> | undefined;
    datasource?: string | undefined;
    createdFrom?: string | undefined;
    lastUpdatedAt?: string | undefined;
    status: string;
    canBeDeleted: boolean;
    loggingId?: string | undefined;
};

/** @internal */
declare const Team$outboundSchema: z.ZodType<Team$Outbound, z.ZodTypeDef, Team>;

declare type Team = {
    /**
     * A list of objects related to a source object.
     */
    relatedObjects?: {
        [k: string]: RelatedObjectEdge;
    } | undefined;
    permissions?: ObjectPermissions | undefined;
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Team name
     */
    name: string;
    /**
     * A description of the team
     */
    description?: string | undefined;
    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    businessUnit?: string | undefined;
    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    department?: string | undefined;
    /**
     * A link to the team's photo.
     */
    photoUrl?: string | undefined;
    /**
     * A link to the team's banner photo.
     */
    bannerUrl?: string | undefined;
    /**
     * Link to a team page on the internet or your company's intranet
     */
    externalLink?: string | undefined;
    /**
     * The members on this team
     */
    members?: Array<PersonToTeamRelationship> | undefined;
    /**
     * Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)
     */
    memberCount?: number | undefined;
    /**
     * The emails for this team
     */
    emails?: Array<TeamEmail> | undefined;
    /**
     * Customizable fields for additional team information.
     */
    customFields?: Array<CustomFieldData> | undefined;
    /**
     * The datasource profiles of the team
     */
    datasourceProfiles?: Array<DatasourceProfile> | undefined;
    /**
     * the data source of the team, e.g. GDRIVE
     */
    datasource?: string | undefined;
    /**
     * For teams created from docs, the doc title. Otherwise empty.
     */
    createdFrom?: string | undefined;
    /**
     * when this team was last updated.
     */
    lastUpdatedAt?: Date | undefined;
    /**
     * whether this team is fully processed or there are still unprocessed operations that'll affect it
     */
    status?: TeamStatus | undefined;
    /**
     * can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot
     */
    canBeDeleted?: boolean | undefined;
    /**
     * The logging id of the team used in scrubbed logs, client analytics, and metrics.
     */
    loggingId?: string | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace TeamEmail$ {
    /** @deprecated use `TeamEmail$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TeamEmail, z.ZodTypeDef, unknown>;
    /** @deprecated use `TeamEmail$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TeamEmail$Outbound, z.ZodTypeDef, TeamEmail>;
    /** @deprecated use `TeamEmail$Outbound` instead. */
    type Outbound = TeamEmail$Outbound;
}

/** @internal */
declare const TeamEmail$inboundSchema: z.ZodType<TeamEmail, z.ZodTypeDef, unknown>;

/** @internal */
declare type TeamEmail$Outbound = {
    email: string;
    type: string;
};

/** @internal */
declare const TeamEmail$outboundSchema: z.ZodType<TeamEmail$Outbound, z.ZodTypeDef, TeamEmail>;

/**
 * Information about a team's email
 */
declare type TeamEmail = {
    /**
     * An email address
     */
    email: string;
    /**
     * An enum of `PRIMARY`, `SECONDARY`, `ONCALL`, `OTHER`
     */
    type?: string | undefined;
};

declare function teamEmailFromJSON(jsonString: string): Result<TeamEmail, SDKValidationError>;

declare function teamEmailToJSON(teamEmail: TeamEmail): string;

declare function teamFromJSON(jsonString: string): Result<Team, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace TeamInfoDefinition$ {
    /** @deprecated use `TeamInfoDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TeamInfoDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `TeamInfoDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TeamInfoDefinition$Outbound, z.ZodTypeDef, TeamInfoDefinition>;
    /** @deprecated use `TeamInfoDefinition$Outbound` instead. */
    type Outbound = TeamInfoDefinition$Outbound;
}

/** @internal */
declare const TeamInfoDefinition$inboundSchema: z.ZodType<TeamInfoDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type TeamInfoDefinition$Outbound = {
    id: string;
    name: string;
    description?: string | undefined;
    businessUnit?: string | undefined;
    department?: string | undefined;
    photoUrl?: string | undefined;
    externalLink?: string | undefined;
    emails?: Array<TeamEmail$Outbound> | undefined;
    datasourceProfiles?: Array<DatasourceProfile$Outbound> | undefined;
    members: Array<TeamMember$Outbound>;
    additionalFields?: Array<AdditionalFieldDefinition$Outbound> | undefined;
};

/** @internal */
declare const TeamInfoDefinition$outboundSchema: z.ZodType<TeamInfoDefinition$Outbound, z.ZodTypeDef, TeamInfoDefinition>;

/**
 * Information about an employee's team
 */
declare type TeamInfoDefinition = {
    /**
     * The unique ID of the team
     */
    id: string;
    /**
     * Human-readable team name
     */
    name: string;
    /**
     * The description of this team
     */
    description?: string | undefined;
    /**
     * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
     */
    businessUnit?: string | undefined;
    /**
     * An organizational unit where everyone has a similar task, e.g. `Engineering`.
     */
    department?: string | undefined;
    /**
     * A link to the team's photo
     */
    photoUrl?: string | undefined;
    /**
     * A link to an external team page. If set, team results will link to it.
     *
     * @remarks
     */
    externalLink?: string | undefined;
    /**
     * The emails of the team
     */
    emails?: Array<TeamEmail> | undefined;
    /**
     * The datasource profiles of the team, e.g. `Slack`,`Github`.
     */
    datasourceProfiles?: Array<DatasourceProfile> | undefined;
    /**
     * The members of the team
     */
    members: Array<TeamMember>;
    /**
     * List of additional fields with more information about the team.
     */
    additionalFields?: Array<AdditionalFieldDefinition> | undefined;
};

declare function teamInfoDefinitionFromJSON(jsonString: string): Result<TeamInfoDefinition, SDKValidationError>;

declare function teamInfoDefinitionToJSON(teamInfoDefinition: TeamInfoDefinition): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace TeamMember$ {
    /** @deprecated use `TeamMember$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TeamMember, z.ZodTypeDef, unknown>;
    /** @deprecated use `TeamMember$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TeamMember$Outbound, z.ZodTypeDef, TeamMember>;
    /** @deprecated use `TeamMember$Outbound` instead. */
    type Outbound = TeamMember$Outbound;
}

/** @internal */
declare const TeamMember$inboundSchema: z.ZodType<TeamMember, z.ZodTypeDef, unknown>;

/** @internal */
declare type TeamMember$Outbound = {
    email: string;
    relationship: string;
    join_date?: string | undefined;
};

/** @internal */
declare const TeamMember$outboundSchema: z.ZodType<TeamMember$Outbound, z.ZodTypeDef, TeamMember>;

/**
 * Information about a team's member
 */
declare type TeamMember = {
    /**
     * The member's email
     */
    email: string;
    /**
     * The member's relationship to the team, an enum of `MEMBER`, `MANAGER`, `LEAD`, `POINT_OF_CONTACT`, `OTHER`
     */
    relationship?: string | undefined;
    /**
     * The member's start date
     */
    joinDate?: RFCDate | undefined;
};

declare function teamMemberFromJSON(jsonString: string): Result<TeamMember, SDKValidationError>;

declare function teamMemberToJSON(teamMember: TeamMember): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace TeamStatus$ {
    /** @deprecated use `TeamStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Processed: "PROCESSED";
        readonly QueuedForCreation: "QUEUED_FOR_CREATION";
        readonly QueuedForDeletion: "QUEUED_FOR_DELETION";
    }>;
    /** @deprecated use `TeamStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Processed: "PROCESSED";
        readonly QueuedForCreation: "QUEUED_FOR_CREATION";
        readonly QueuedForDeletion: "QUEUED_FOR_DELETION";
    }>;
}

/** @internal */
declare const TeamStatus$inboundSchema: z.ZodNativeEnum<typeof TeamStatus>;

/** @internal */
declare const TeamStatus$outboundSchema: z.ZodNativeEnum<typeof TeamStatus>;

/**
 * whether this team is fully processed or there are still unprocessed operations that'll affect it
 */
declare const TeamStatus: {
    readonly Processed: "PROCESSED";
    readonly QueuedForCreation: "QUEUED_FOR_CREATION";
    readonly QueuedForDeletion: "QUEUED_FOR_DELETION";
};

/**
 * whether this team is fully processed or there are still unprocessed operations that'll affect it
 */
declare type TeamStatus = ClosedEnum<typeof TeamStatus>;

declare function teamToJSON(team: Team): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace TextRange$ {
    /** @deprecated use `TextRange$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TextRange, z.ZodTypeDef, unknown>;
    /** @deprecated use `TextRange$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TextRange$Outbound, z.ZodTypeDef, TextRange>;
    /** @deprecated use `TextRange$Outbound` instead. */
    type Outbound = TextRange$Outbound;
}

/** @internal */
declare const TextRange$inboundSchema: z.ZodType<TextRange, z.ZodTypeDef, unknown>;

/** @internal */
declare type TextRange$Outbound = {
    startIndex: number;
    endIndex?: number | undefined;
    type?: string | undefined;
    url?: string | undefined;
    document?: Document$Outbound | undefined;
};

/** @internal */
declare const TextRange$outboundSchema: z.ZodType<TextRange$Outbound, z.ZodTypeDef, TextRange>;

/**
 * A subsection of a given string to which some special formatting should be applied.
 */
declare type TextRange = {
    /**
     * The inclusive start index of the range.
     */
    startIndex: number;
    /**
     * The exclusive end index of the range.
     */
    endIndex?: number | undefined;
    type?: TextRangeType | undefined;
    /**
     * The URL associated with the range, if applicable. For example, the linked URL for a LINK range.
     */
    url?: string | undefined;
    document?: Document_2 | undefined;
};

declare function textRangeFromJSON(jsonString: string): Result<TextRange, SDKValidationError>;

declare function textRangeToJSON(textRange: TextRange): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace TextRangeType$ {
    /** @deprecated use `TextRangeType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bold: "BOLD";
        readonly Citation: "CITATION";
        readonly Highlight: "HIGHLIGHT";
        readonly Link: "LINK";
    }>;
    /** @deprecated use `TextRangeType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bold: "BOLD";
        readonly Citation: "CITATION";
        readonly Highlight: "HIGHLIGHT";
        readonly Link: "LINK";
    }>;
}

/** @internal */
declare const TextRangeType$inboundSchema: z.ZodNativeEnum<typeof TextRangeType>;

/** @internal */
declare const TextRangeType$outboundSchema: z.ZodNativeEnum<typeof TextRangeType>;

declare const TextRangeType: {
    readonly Bold: "BOLD";
    readonly Citation: "CITATION";
    readonly Highlight: "HIGHLIGHT";
    readonly Link: "LINK";
};

declare type TextRangeType = ClosedEnum<typeof TextRangeType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Thumbnail$ {
    /** @deprecated use `Thumbnail$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Thumbnail, z.ZodTypeDef, unknown>;
    /** @deprecated use `Thumbnail$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Thumbnail$Outbound, z.ZodTypeDef, Thumbnail>;
    /** @deprecated use `Thumbnail$Outbound` instead. */
    type Outbound = Thumbnail$Outbound;
}

/** @internal */
declare const Thumbnail$inboundSchema: z.ZodType<Thumbnail, z.ZodTypeDef, unknown>;

/** @internal */
declare type Thumbnail$Outbound = {
    photoId?: string | undefined;
    url?: string | undefined;
};

/** @internal */
declare const Thumbnail$outboundSchema: z.ZodType<Thumbnail$Outbound, z.ZodTypeDef, Thumbnail>;

declare type Thumbnail = {
    /**
     * Photo id if the thumbnail is from splash.
     */
    photoId?: string | undefined;
    /**
     * Thumbnail URL. This can be user provided image and/or from downloaded images hosted by Glean.
     */
    url?: string | undefined;
};

declare function thumbnailFromJSON(jsonString: string): Result<Thumbnail, SDKValidationError>;

declare function thumbnailToJSON(thumbnail: Thumbnail): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace TimeInterval$ {
    /** @deprecated use `TimeInterval$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TimeInterval, z.ZodTypeDef, unknown>;
    /** @deprecated use `TimeInterval$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TimeInterval$Outbound, z.ZodTypeDef, TimeInterval>;
    /** @deprecated use `TimeInterval$Outbound` instead. */
    type Outbound = TimeInterval$Outbound;
}

/** @internal */
declare const TimeInterval$inboundSchema: z.ZodType<TimeInterval, z.ZodTypeDef, unknown>;

/** @internal */
declare type TimeInterval$Outbound = {
    start: string;
    end: string;
};

/** @internal */
declare const TimeInterval$outboundSchema: z.ZodType<TimeInterval$Outbound, z.ZodTypeDef, TimeInterval>;

declare type TimeInterval = {
    /**
     * The RFC3339 timestamp formatted start time of this event.
     */
    start: string;
    /**
     * The RFC3339 timestamp formatted end time of this event.
     */
    end: string;
};

declare function timeIntervalFromJSON(jsonString: string): Result<TimeInterval, SDKValidationError>;

declare function timeIntervalToJSON(timeInterval: TimeInterval): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace TimePeriodType$ {
    /** @deprecated use `TimePeriodType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AllTime: "ALL_TIME";
        readonly PastYear: "PAST_YEAR";
        readonly PastDay: "PAST_DAY";
        readonly Custom: "CUSTOM";
        readonly LastNDays: "LAST_N_DAYS";
    }>;
    /** @deprecated use `TimePeriodType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AllTime: "ALL_TIME";
        readonly PastYear: "PAST_YEAR";
        readonly PastDay: "PAST_DAY";
        readonly Custom: "CUSTOM";
        readonly LastNDays: "LAST_N_DAYS";
    }>;
}

/** @internal */
declare const TimePeriodType$inboundSchema: z.ZodNativeEnum<typeof TimePeriodType>;

/** @internal */
declare const TimePeriodType$outboundSchema: z.ZodNativeEnum<typeof TimePeriodType>;

/**
 * Type of time period for which to run the report/policy. PAST_DAY is deprecated.
 */
declare const TimePeriodType: {
    readonly AllTime: "ALL_TIME";
    readonly PastYear: "PAST_YEAR";
    readonly PastDay: "PAST_DAY";
    readonly Custom: "CUSTOM";
    readonly LastNDays: "LAST_N_DAYS";
};

/**
 * Type of time period for which to run the report/policy. PAST_DAY is deprecated.
 */
declare type TimePeriodType = ClosedEnum<typeof TimePeriodType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace TimePoint$ {
    /** @deprecated use `TimePoint$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TimePoint, z.ZodTypeDef, unknown>;
    /** @deprecated use `TimePoint$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TimePoint$Outbound, z.ZodTypeDef, TimePoint>;
    /** @deprecated use `TimePoint$Outbound` instead. */
    type Outbound = TimePoint$Outbound;
}

/** @internal */
declare const TimePoint$inboundSchema: z.ZodType<TimePoint, z.ZodTypeDef, unknown>;

/** @internal */
declare type TimePoint$Outbound = {
    epochSeconds?: number | undefined;
    daysFromNow?: number | undefined;
};

/** @internal */
declare const TimePoint$outboundSchema: z.ZodType<TimePoint$Outbound, z.ZodTypeDef, TimePoint>;

declare type TimePoint = {
    /**
     * Epoch seconds. Has precedence over daysFromNow.
     */
    epochSeconds?: number | undefined;
    /**
     * The number of days from now. Specification relative to current time. Can be negative.
     */
    daysFromNow?: number | undefined;
};

declare function timePointFromJSON(jsonString: string): Result<TimePoint, SDKValidationError>;

declare function timePointToJSON(timePoint: TimePoint): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace TimeRange$ {
    /** @deprecated use `TimeRange$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TimeRange, z.ZodTypeDef, unknown>;
    /** @deprecated use `TimeRange$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TimeRange$Outbound, z.ZodTypeDef, TimeRange>;
    /** @deprecated use `TimeRange$Outbound` instead. */
    type Outbound = TimeRange$Outbound;
}

/** @internal */
declare const TimeRange$inboundSchema: z.ZodType<TimeRange, z.ZodTypeDef, unknown>;

/** @internal */
declare type TimeRange$Outbound = {
    startTime?: string | undefined;
    endTime?: string | undefined;
    lastNDaysValue?: number | undefined;
};

/** @internal */
declare const TimeRange$outboundSchema: z.ZodType<TimeRange$Outbound, z.ZodTypeDef, TimeRange>;

declare type TimeRange = {
    /**
     * start time of the time range, applicable for the CUSTOM type.
     */
    startTime?: Date | undefined;
    /**
     * end time of the time range, applicable for the CUSTOM type.
     */
    endTime?: Date | undefined;
    /**
     * The number of days to look back from the current time, applicable for the LAST_N_DAYS type.
     */
    lastNDaysValue?: number | undefined;
};

declare function timeRangeFromJSON(jsonString: string): Result<TimeRange, SDKValidationError>;

declare function timeRangeToJSON(timeRange: TimeRange): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Tool$ {
    /** @deprecated use `Tool$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown>;
    /** @deprecated use `Tool$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool>;
    /** @deprecated use `Tool$Outbound` instead. */
    type Outbound = Tool$Outbound;
}

/** @internal */
declare const Tool$inboundSchema: z.ZodType<Tool, z.ZodTypeDef, unknown>;

/** @internal */
declare type Tool$Outbound = {
    type?: string | undefined;
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    parameters?: {
        [k: string]: ToolParameter$Outbound;
    } | undefined;
};

/** @internal */
declare const Tool$outboundSchema: z.ZodType<Tool$Outbound, z.ZodTypeDef, Tool>;

declare type Tool = {
    /**
     * Type of tool (READ, WRITE)
     */
    type?: ToolType | undefined;
    /**
     * Unique identifier for the tool
     */
    name?: string | undefined;
    /**
     * Human-readable name
     */
    displayName?: string | undefined;
    /**
     * LLM friendly description of the tool
     */
    description?: string | undefined;
    /**
     * The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
     */
    parameters?: {
        [k: string]: ToolParameter;
    } | undefined;
};

declare function toolFromJSON(jsonString: string): Result<Tool, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ToolInfo$ {
    /** @deprecated use `ToolInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ToolInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `ToolInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ToolInfo$Outbound, z.ZodTypeDef, ToolInfo>;
    /** @deprecated use `ToolInfo$Outbound` instead. */
    type Outbound = ToolInfo$Outbound;
}

/** @internal */
declare const ToolInfo$inboundSchema: z.ZodType<ToolInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type ToolInfo$Outbound = {
    metadata?: ToolMetadata$Outbound | undefined;
    parameters?: {
        [k: string]: WriteActionParameter$Outbound;
    } | undefined;
};

/** @internal */
declare const ToolInfo$outboundSchema: z.ZodType<ToolInfo$Outbound, z.ZodTypeDef, ToolInfo>;

declare type ToolInfo = {
    /**
     * The manifest for a tool that can be used to augment Glean Assistant.
     */
    metadata?: ToolMetadata | undefined;
    /**
     * Parameters supported by the tool.
     */
    parameters?: {
        [k: string]: WriteActionParameter;
    } | undefined;
};

declare function toolInfoFromJSON(jsonString: string): Result<ToolInfo, SDKValidationError>;

declare function toolInfoToJSON(toolInfo: ToolInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ToolMetadata$ {
    /** @deprecated use `ToolMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ToolMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `ToolMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ToolMetadata$Outbound, z.ZodTypeDef, ToolMetadata>;
    /** @deprecated use `ToolMetadata$Outbound` instead. */
    type Outbound = ToolMetadata$Outbound;
}

/** @internal */
declare const ToolMetadata$inboundSchema: z.ZodType<ToolMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type ToolMetadata$Outbound = {
    type: string;
    name: string;
    displayName: string;
    toolId?: string | undefined;
    displayDescription: string;
    logoUrl?: string | undefined;
    objectName?: string | undefined;
    knowledgeType?: string | undefined;
    createdBy?: PersonObject$Outbound | undefined;
    lastUpdatedBy?: PersonObject$Outbound | undefined;
    createdAt?: string | undefined;
    lastUpdatedAt?: string | undefined;
    writeActionType?: string | undefined;
    authType?: string | undefined;
    auth?: AuthConfig$Outbound | undefined;
    permissions?: ObjectPermissions$Outbound | undefined;
    usageInstructions?: string | undefined;
    isSetupFinished?: boolean | undefined;
};

/** @internal */
declare const ToolMetadata$outboundSchema: z.ZodType<ToolMetadata$Outbound, z.ZodTypeDef, ToolMetadata>;

/**
 * The manifest for a tool that can be used to augment Glean Assistant.
 */
declare type ToolMetadata = {
    /**
     * The type of tool.
     */
    type: ToolMetadataType;
    /**
     * Unique identifier for the tool. Name should be understandable by the LLM, and will be used to invoke a tool.
     */
    name: string;
    /**
     * Human understandable name of the tool. Max 50 characters.
     */
    displayName: string;
    /**
     * An opaque id which is unique identifier for the tool.
     */
    toolId?: string | undefined;
    /**
     * Description of the tool meant for a human.
     */
    displayDescription: string;
    /**
     * URL used to fetch the logo.
     */
    logoUrl?: string | undefined;
    /**
     * Name of the generated object. This will be used to indicate to the end user what the generated object contains.
     */
    objectName?: string | undefined;
    /**
     * Indicates the kind of knowledge a tool would access or modify.
     */
    knowledgeType?: KnowledgeType | undefined;
    createdBy?: PersonObject | undefined;
    lastUpdatedBy?: PersonObject | undefined;
    /**
     * The time the tool was created in ISO format (ISO 8601)
     */
    createdAt?: Date | undefined;
    /**
     * The time the tool was last updated in ISO format (ISO 8601)
     */
    lastUpdatedAt?: Date | undefined;
    /**
     * Valid only for write actions. Represents the type of write action. REDIRECT - The client renders the URL which contains information for carrying out the action. EXECUTION - Send a request to an external server and execute the action.
     */
    writeActionType?: WriteActionType | undefined;
    /**
     * The type of authentication being used.
     *
     * @remarks
     * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
     * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
     * 'OAUTH_USER' uses individual user tokens for external API calls.
     * 'DWD' refers to domain wide delegation.
     */
    authType?: AuthType | undefined;
    /**
     * Config for tool's authentication method.
     */
    auth?: AuthConfig | undefined;
    permissions?: ObjectPermissions | undefined;
    /**
     * Usage instructions for the LLM to use this action.
     */
    usageInstructions?: string | undefined;
    /**
     * Whether this action has been fully configured and validated.
     */
    isSetupFinished?: boolean | undefined;
};

declare function toolMetadataFromJSON(jsonString: string): Result<ToolMetadata, SDKValidationError>;

declare function toolMetadataToJSON(toolMetadata: ToolMetadata): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ToolMetadataType$ {
    /** @deprecated use `ToolMetadataType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Retrieval: "RETRIEVAL";
        readonly Action: "ACTION";
    }>;
    /** @deprecated use `ToolMetadataType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Retrieval: "RETRIEVAL";
        readonly Action: "ACTION";
    }>;
}

/** @internal */
declare const ToolMetadataType$inboundSchema: z.ZodNativeEnum<typeof ToolMetadataType>;

/** @internal */
declare const ToolMetadataType$outboundSchema: z.ZodNativeEnum<typeof ToolMetadataType>;

/**
 * The type of tool.
 */
declare const ToolMetadataType: {
    readonly Retrieval: "RETRIEVAL";
    readonly Action: "ACTION";
};

/**
 * The type of tool.
 */
declare type ToolMetadataType = ClosedEnum<typeof ToolMetadataType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ToolParameter$ {
    /** @deprecated use `ToolParameter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ToolParameter, z.ZodTypeDef, unknown>;
    /** @deprecated use `ToolParameter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ToolParameter$Outbound, z.ZodTypeDef, ToolParameter>;
    /** @deprecated use `ToolParameter$Outbound` instead. */
    type Outbound = ToolParameter$Outbound;
}

/** @internal */
declare const ToolParameter$inboundSchema: z.ZodType<ToolParameter, z.ZodTypeDef, unknown>;

/** @internal */
declare type ToolParameter$Outbound = {
    type?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    isRequired?: boolean | undefined;
    possibleValues?: Array<string> | undefined;
    items?: ToolParameter$Outbound | undefined;
    properties?: {
        [k: string]: ToolParameter$Outbound;
    } | undefined;
};

/** @internal */
declare const ToolParameter$outboundSchema: z.ZodType<ToolParameter$Outbound, z.ZodTypeDef, ToolParameter>;

declare type ToolParameter = {
    /**
     * Parameter type (string, number, boolean, object, array)
     */
    type?: ToolParameterType | undefined;
    /**
     * The name of the parameter
     */
    name?: string | undefined;
    /**
     * The description of the parameter
     */
    description?: string | undefined;
    /**
     * Whether the parameter is required
     */
    isRequired?: boolean | undefined;
    /**
     * The possible values for the parameter. Can contain only primitive values or arrays of primitive values.
     */
    possibleValues?: Array<string> | undefined;
    items?: ToolParameter | undefined;
    /**
     * When type is 'object', this describes the structure of the object.
     */
    properties?: {
        [k: string]: ToolParameter;
    } | undefined;
};

declare function toolParameterFromJSON(jsonString: string): Result<ToolParameter, SDKValidationError>;

declare function toolParameterToJSON(toolParameter: ToolParameter): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ToolParameterType$ {
    /** @deprecated use `ToolParameterType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly String: "string";
        readonly Number: "number";
        readonly Boolean: "boolean";
        readonly Object: "object";
        readonly Array: "array";
    }>;
    /** @deprecated use `ToolParameterType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly String: "string";
        readonly Number: "number";
        readonly Boolean: "boolean";
        readonly Object: "object";
        readonly Array: "array";
    }>;
}

/** @internal */
declare const ToolParameterType$inboundSchema: z.ZodNativeEnum<typeof ToolParameterType>;

/** @internal */
declare const ToolParameterType$outboundSchema: z.ZodNativeEnum<typeof ToolParameterType>;

/**
 * Parameter type (string, number, boolean, object, array)
 */
declare const ToolParameterType: {
    readonly String: "string";
    readonly Number: "number";
    readonly Boolean: "boolean";
    readonly Object: "object";
    readonly Array: "array";
};

/**
 * Parameter type (string, number, boolean, object, array)
 */
declare type ToolParameterType = ClosedEnum<typeof ToolParameterType>;

declare class Tools extends ClientSDK {
    /**
     * List available tools
     *
     * @remarks
     * Returns a filtered set of available tools based on optional tool name parameters. If no filters are provided, all available tools are returned.
     */
    list(toolNames?: Array<string> | undefined, options?: RequestOptions): Promise<components.ToolsListResponse>;
    /**
     * Execute the specified tool
     *
     * @remarks
     * Execute the specified tool with provided parameters
     */
    run(request: components.ToolsCallRequest, options?: RequestOptions): Promise<components.ToolsCallResponse>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ToolsCallParameter$ {
    /** @deprecated use `ToolsCallParameter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ToolsCallParameter, z.ZodTypeDef, unknown>;
    /** @deprecated use `ToolsCallParameter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ToolsCallParameter$Outbound, z.ZodTypeDef, ToolsCallParameter>;
    /** @deprecated use `ToolsCallParameter$Outbound` instead. */
    type Outbound = ToolsCallParameter$Outbound;
}

/** @internal */
declare const ToolsCallParameter$inboundSchema: z.ZodType<ToolsCallParameter, z.ZodTypeDef, unknown>;

/** @internal */
declare type ToolsCallParameter$Outbound = {
    name: string;
    value: string;
    items?: Array<ToolsCallParameter$Outbound> | undefined;
    properties?: {
        [k: string]: ToolsCallParameter$Outbound;
    } | undefined;
};

/** @internal */
declare const ToolsCallParameter$outboundSchema: z.ZodType<ToolsCallParameter$Outbound, z.ZodTypeDef, ToolsCallParameter>;

declare type ToolsCallParameter = {
    /**
     * The name of the parameter
     */
    name: string;
    /**
     * The value of the parameter (for primitive types)
     */
    value: string;
    /**
     * The value of the parameter (for array types)
     */
    items?: Array<ToolsCallParameter> | undefined;
    /**
     * The value of the parameter (for object types)
     */
    properties?: {
        [k: string]: ToolsCallParameter;
    } | undefined;
};

declare function toolsCallParameterFromJSON(jsonString: string): Result<ToolsCallParameter, SDKValidationError>;

declare function toolsCallParameterToJSON(toolsCallParameter: ToolsCallParameter): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ToolsCallRequest$ {
    /** @deprecated use `ToolsCallRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ToolsCallRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ToolsCallRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ToolsCallRequest$Outbound, z.ZodTypeDef, ToolsCallRequest>;
    /** @deprecated use `ToolsCallRequest$Outbound` instead. */
    type Outbound = ToolsCallRequest$Outbound;
}

/** @internal */
declare const ToolsCallRequest$inboundSchema: z.ZodType<ToolsCallRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type ToolsCallRequest$Outbound = {
    name: string;
    parameters: {
        [k: string]: ToolsCallParameter$Outbound;
    };
};

/** @internal */
declare const ToolsCallRequest$outboundSchema: z.ZodType<ToolsCallRequest$Outbound, z.ZodTypeDef, ToolsCallRequest>;

declare type ToolsCallRequest = {
    /**
     * Required name of the tool to execute
     */
    name: string;
    /**
     * The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
     */
    parameters: {
        [k: string]: ToolsCallParameter;
    };
};

declare function toolsCallRequestFromJSON(jsonString: string): Result<ToolsCallRequest, SDKValidationError>;

declare function toolsCallRequestToJSON(toolsCallRequest: ToolsCallRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ToolsCallResponse$ {
    /** @deprecated use `ToolsCallResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ToolsCallResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ToolsCallResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ToolsCallResponse$Outbound, z.ZodTypeDef, ToolsCallResponse>;
    /** @deprecated use `ToolsCallResponse$Outbound` instead. */
    type Outbound = ToolsCallResponse$Outbound;
}

/** @internal */
declare const ToolsCallResponse$inboundSchema: z.ZodType<ToolsCallResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ToolsCallResponse$Outbound = {
    rawResponse?: {
        [k: string]: any;
    } | undefined;
    error?: string | undefined;
};

/** @internal */
declare const ToolsCallResponse$outboundSchema: z.ZodType<ToolsCallResponse$Outbound, z.ZodTypeDef, ToolsCallResponse>;

declare type ToolsCallResponse = {
    /**
     * The raw response from the tool
     */
    rawResponse?: {
        [k: string]: any;
    } | undefined;
    /**
     * The error message if applicable
     */
    error?: string | undefined;
};

declare function toolsCallResponseFromJSON(jsonString: string): Result<ToolsCallResponse, SDKValidationError>;

declare function toolsCallResponseToJSON(toolsCallResponse: ToolsCallResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ToolSets$ {
    /** @deprecated use `ToolSets$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ToolSets, z.ZodTypeDef, unknown>;
    /** @deprecated use `ToolSets$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ToolSets$Outbound, z.ZodTypeDef, ToolSets>;
    /** @deprecated use `ToolSets$Outbound` instead. */
    type Outbound = ToolSets$Outbound;
}

/** @internal */
declare const ToolSets$inboundSchema: z.ZodType<ToolSets, z.ZodTypeDef, unknown>;

/** @internal */
declare type ToolSets$Outbound = {
    enableWebSearch?: boolean | undefined;
    enableCompanyTools?: boolean | undefined;
};

/** @internal */
declare const ToolSets$outboundSchema: z.ZodType<ToolSets$Outbound, z.ZodTypeDef, ToolSets>;

/**
 * The types of tools that the agent is allowed to use. Only works with FAST and ADVANCED `agent` values
 */
declare type ToolSets = {
    /**
     * Whether the agent is allowed to use web search (default: true).
     */
    enableWebSearch?: boolean | undefined;
    /**
     * Whether the agent is allowed to search internal company resources (default: true).
     */
    enableCompanyTools?: boolean | undefined;
};

declare function toolSetsFromJSON(jsonString: string): Result<ToolSets, SDKValidationError>;

declare function toolSetsToJSON(toolSets: ToolSets): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ToolsListResponse$ {
    /** @deprecated use `ToolsListResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ToolsListResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `ToolsListResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ToolsListResponse$Outbound, z.ZodTypeDef, ToolsListResponse>;
    /** @deprecated use `ToolsListResponse$Outbound` instead. */
    type Outbound = ToolsListResponse$Outbound;
}

/** @internal */
declare const ToolsListResponse$inboundSchema: z.ZodType<ToolsListResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type ToolsListResponse$Outbound = {
    tools?: Array<Tool$Outbound> | undefined;
};

/** @internal */
declare const ToolsListResponse$outboundSchema: z.ZodType<ToolsListResponse$Outbound, z.ZodTypeDef, ToolsListResponse>;

declare type ToolsListResponse = {
    tools?: Array<Tool> | undefined;
};

declare function toolsListResponseFromJSON(jsonString: string): Result<ToolsListResponse, SDKValidationError>;

declare function toolsListResponseToJSON(toolsListResponse: ToolsListResponse): string;

declare function toolToJSON(tool: Tool): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ToolType$ {
    /** @deprecated use `ToolType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Read: "READ";
        readonly Write: "WRITE";
    }>;
    /** @deprecated use `ToolType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Read: "READ";
        readonly Write: "WRITE";
    }>;
}

/** @internal */
declare const ToolType$inboundSchema: z.ZodNativeEnum<typeof ToolType>;

/** @internal */
declare const ToolType$outboundSchema: z.ZodNativeEnum<typeof ToolType>;

/**
 * Type of tool (READ, WRITE)
 */
declare const ToolType: {
    readonly Read: "READ";
    readonly Write: "WRITE";
};

/**
 * Type of tool (READ, WRITE)
 */
declare type ToolType = ClosedEnum<typeof ToolType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UgcType$ {
    /** @deprecated use `UgcType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly AnnouncementsType: "ANNOUNCEMENTS_TYPE";
        readonly AnswersType: "ANSWERS_TYPE";
        readonly CollectionsType: "COLLECTIONS_TYPE";
        readonly ShortcutsType: "SHORTCUTS_TYPE";
        readonly WorkflowsType: "WORKFLOWS_TYPE";
        readonly PromptTemplatesType: "PROMPT_TEMPLATES_TYPE";
    }>;
    /** @deprecated use `UgcType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly AnnouncementsType: "ANNOUNCEMENTS_TYPE";
        readonly AnswersType: "ANSWERS_TYPE";
        readonly CollectionsType: "COLLECTIONS_TYPE";
        readonly ShortcutsType: "SHORTCUTS_TYPE";
        readonly WorkflowsType: "WORKFLOWS_TYPE";
        readonly PromptTemplatesType: "PROMPT_TEMPLATES_TYPE";
    }>;
}

/** @internal */
declare const UgcType$inboundSchema: z.ZodNativeEnum<typeof UgcType>;

/** @internal */
declare const UgcType$outboundSchema: z.ZodNativeEnum<typeof UgcType>;

declare const UgcType: {
    readonly AnnouncementsType: "ANNOUNCEMENTS_TYPE";
    readonly AnswersType: "ANSWERS_TYPE";
    readonly CollectionsType: "COLLECTIONS_TYPE";
    readonly ShortcutsType: "SHORTCUTS_TYPE";
    readonly WorkflowsType: "WORKFLOWS_TYPE";
    readonly PromptTemplatesType: "PROMPT_TEMPLATES_TYPE";
};

declare type UgcType = ClosedEnum<typeof UgcType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UiConfig$ {
    /** @deprecated use `UiConfig$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UiConfig, z.ZodTypeDef, unknown>;
    /** @deprecated use `UiConfig$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UiConfig$Outbound, z.ZodTypeDef, UiConfig>;
    /** @deprecated use `UiConfig$Outbound` instead. */
    type Outbound = UiConfig$Outbound;
}

/** @internal */
declare const UiConfig$inboundSchema: z.ZodType<UiConfig, z.ZodTypeDef, unknown>;

/** @internal */
declare type UiConfig$Outbound = {
    format?: string | undefined;
    additionalFlags?: DisplayableListItemUIConfig$Outbound | undefined;
};

/** @internal */
declare const UiConfig$outboundSchema: z.ZodType<UiConfig$Outbound, z.ZodTypeDef, UiConfig>;

declare type UiConfig = {
    /**
     * defines how to render this particular displayable list card
     */
    format?: Format | undefined;
    /**
     * UI configurations for each item of the list
     */
    additionalFlags?: DisplayableListItemUIConfig | undefined;
};

declare function uiConfigFromJSON(jsonString: string): Result<UiConfig, SDKValidationError>;

declare function uiConfigToJSON(uiConfig: UiConfig): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UiOptions$ {
    /** @deprecated use `UiOptions$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly None: "NONE";
        readonly SearchResult: "SEARCH_RESULT";
        readonly DocHovercard: "DOC_HOVERCARD";
    }>;
    /** @deprecated use `UiOptions$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly None: "NONE";
        readonly SearchResult: "SEARCH_RESULT";
        readonly DocHovercard: "DOC_HOVERCARD";
    }>;
}

/** @internal */
declare const UiOptions$inboundSchema: z.ZodNativeEnum<typeof UiOptions>;

/** @internal */
declare const UiOptions$outboundSchema: z.ZodNativeEnum<typeof UiOptions>;

declare const UiOptions: {
    readonly None: "NONE";
    readonly SearchResult: "SEARCH_RESULT";
    readonly DocHovercard: "DOC_HOVERCARD";
};

declare type UiOptions = ClosedEnum<typeof UiOptions>;

/**
 * An error to capture unrecognised or unexpected errors when making HTTP calls.
 */
declare class UnexpectedClientError extends HTTPClientError {
    name: string;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Unpin$ {
    /** @deprecated use `Unpin$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Unpin, z.ZodTypeDef, unknown>;
    /** @deprecated use `Unpin$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Unpin$Outbound, z.ZodTypeDef, Unpin>;
    /** @deprecated use `Unpin$Outbound` instead. */
    type Outbound = Unpin$Outbound;
}

/** @internal */
declare const Unpin$inboundSchema: z.ZodType<Unpin, z.ZodTypeDef, unknown>;

/** @internal */
declare type Unpin$Outbound = {
    id?: string | undefined;
};

/** @internal */
declare const Unpin$outboundSchema: z.ZodType<Unpin$Outbound, z.ZodTypeDef, Unpin>;

declare type Unpin = {
    /**
     * The opaque id of the pin to be unpinned.
     */
    id?: string | undefined;
};

declare function unpinFromJSON(jsonString: string): Result<Unpin, SDKValidationError>;

declare function unpinToJSON(unpin: Unpin): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdateAnnouncementRequest$ {
    /** @deprecated use `UpdateAnnouncementRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateAnnouncementRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateAnnouncementRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateAnnouncementRequest$Outbound, z.ZodTypeDef, UpdateAnnouncementRequest>;
    /** @deprecated use `UpdateAnnouncementRequest$Outbound` instead. */
    type Outbound = UpdateAnnouncementRequest$Outbound;
}

/** @internal */
declare const UpdateAnnouncementRequest$inboundSchema: z.ZodType<UpdateAnnouncementRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type UpdateAnnouncementRequest$Outbound = {
    startTime: string;
    endTime: string;
    title: string;
    body?: StructuredText$Outbound | undefined;
    emoji?: string | undefined;
    thumbnail?: Thumbnail$Outbound | undefined;
    banner?: Thumbnail$Outbound | undefined;
    audienceFilters?: Array<FacetFilter$Outbound> | undefined;
    sourceDocumentId?: string | undefined;
    hideAttribution?: boolean | undefined;
    channel?: string | undefined;
    postType?: string | undefined;
    isPrioritized?: boolean | undefined;
    viewUrl?: string | undefined;
    id: number;
};

/** @internal */
declare const UpdateAnnouncementRequest$outboundSchema: z.ZodType<UpdateAnnouncementRequest$Outbound, z.ZodTypeDef, UpdateAnnouncementRequest>;

declare type UpdateAnnouncementRequest = {
    /**
     * The date and time at which the announcement becomes active.
     */
    startTime: Date;
    /**
     * The date and time at which the announcement expires.
     */
    endTime: Date;
    /**
     * The headline of the announcement.
     */
    title: string;
    body?: StructuredText | undefined;
    /**
     * An emoji used to indicate the nature of the announcement.
     */
    emoji?: string | undefined;
    thumbnail?: Thumbnail | undefined;
    banner?: Thumbnail | undefined;
    /**
     * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
     */
    audienceFilters?: Array<FacetFilter> | undefined;
    /**
     * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
     */
    sourceDocumentId?: string | undefined;
    /**
     * Whether or not to hide an author attribution.
     */
    hideAttribution?: boolean | undefined;
    /**
     * This determines whether this is a Social Feed post or a regular announcement.
     */
    channel?: UpdateAnnouncementRequestChannel | undefined;
    /**
     * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
     */
    postType?: UpdateAnnouncementRequestPostType | undefined;
    /**
     * Used by the Social Feed to pin posts to the front of the feed.
     */
    isPrioritized?: boolean | undefined;
    /**
     * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
     */
    viewUrl?: string | undefined;
    /**
     * The opaque id of the announcement.
     */
    id: number;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdateAnnouncementRequestChannel$ {
    /** @deprecated use `UpdateAnnouncementRequestChannel$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Main: "MAIN";
        readonly SocialFeed: "SOCIAL_FEED";
    }>;
    /** @deprecated use `UpdateAnnouncementRequestChannel$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Main: "MAIN";
        readonly SocialFeed: "SOCIAL_FEED";
    }>;
}

/** @internal */
declare const UpdateAnnouncementRequestChannel$inboundSchema: z.ZodNativeEnum<typeof UpdateAnnouncementRequestChannel>;

/** @internal */
declare const UpdateAnnouncementRequestChannel$outboundSchema: z.ZodNativeEnum<typeof UpdateAnnouncementRequestChannel>;

/**
 * This determines whether this is a Social Feed post or a regular announcement.
 */
declare const UpdateAnnouncementRequestChannel: {
    readonly Main: "MAIN";
    readonly SocialFeed: "SOCIAL_FEED";
};

/**
 * This determines whether this is a Social Feed post or a regular announcement.
 */
declare type UpdateAnnouncementRequestChannel = ClosedEnum<typeof UpdateAnnouncementRequestChannel>;

declare function updateAnnouncementRequestFromJSON(jsonString: string): Result<UpdateAnnouncementRequest, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdateAnnouncementRequestPostType$ {
    /** @deprecated use `UpdateAnnouncementRequestPostType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Text: "TEXT";
        readonly Link: "LINK";
    }>;
    /** @deprecated use `UpdateAnnouncementRequestPostType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Text: "TEXT";
        readonly Link: "LINK";
    }>;
}

/** @internal */
declare const UpdateAnnouncementRequestPostType$inboundSchema: z.ZodNativeEnum<typeof UpdateAnnouncementRequestPostType>;

/** @internal */
declare const UpdateAnnouncementRequestPostType$outboundSchema: z.ZodNativeEnum<typeof UpdateAnnouncementRequestPostType>;

/**
 * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
 */
declare const UpdateAnnouncementRequestPostType: {
    readonly Text: "TEXT";
    readonly Link: "LINK";
};

/**
 * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
 */
declare type UpdateAnnouncementRequestPostType = ClosedEnum<typeof UpdateAnnouncementRequestPostType>;

declare function updateAnnouncementRequestToJSON(updateAnnouncementRequest: UpdateAnnouncementRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdateDlpConfigRequest$ {
    /** @deprecated use `UpdateDlpConfigRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateDlpConfigRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateDlpConfigRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateDlpConfigRequest$Outbound, z.ZodTypeDef, UpdateDlpConfigRequest>;
    /** @deprecated use `UpdateDlpConfigRequest$Outbound` instead. */
    type Outbound = UpdateDlpConfigRequest$Outbound;
}

/** @internal */
declare const UpdateDlpConfigRequest$inboundSchema: z.ZodType<UpdateDlpConfigRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type UpdateDlpConfigRequest$Outbound = {
    config?: DlpConfig$Outbound | undefined;
    frequency?: string | undefined;
};

/** @internal */
declare const UpdateDlpConfigRequest$outboundSchema: z.ZodType<UpdateDlpConfigRequest$Outbound, z.ZodTypeDef, UpdateDlpConfigRequest>;

declare type UpdateDlpConfigRequest = {
    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    config?: DlpConfig | undefined;
    /**
     * Only "ONCE" is supported for reports.
     */
    frequency?: string | undefined;
};

declare function updateDlpConfigRequestFromJSON(jsonString: string): Result<UpdateDlpConfigRequest, SDKValidationError>;

declare function updateDlpConfigRequestToJSON(updateDlpConfigRequest: UpdateDlpConfigRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdateDlpConfigResponse$ {
    /** @deprecated use `UpdateDlpConfigResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateDlpConfigResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateDlpConfigResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateDlpConfigResponse$Outbound, z.ZodTypeDef, UpdateDlpConfigResponse>;
    /** @deprecated use `UpdateDlpConfigResponse$Outbound` instead. */
    type Outbound = UpdateDlpConfigResponse$Outbound;
}

/** @internal */
declare const UpdateDlpConfigResponse$inboundSchema: z.ZodType<UpdateDlpConfigResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type UpdateDlpConfigResponse$Outbound = {
    result?: string | undefined;
    reportId?: string | undefined;
};

/** @internal */
declare const UpdateDlpConfigResponse$outboundSchema: z.ZodType<UpdateDlpConfigResponse$Outbound, z.ZodTypeDef, UpdateDlpConfigResponse>;

declare type UpdateDlpConfigResponse = {
    result?: DlpSimpleResult | undefined;
    /**
     * The id of the report that was just created and run.
     */
    reportId?: string | undefined;
};

declare function updateDlpConfigResponseFromJSON(jsonString: string): Result<UpdateDlpConfigResponse, SDKValidationError>;

declare function updateDlpConfigResponseToJSON(updateDlpConfigResponse: UpdateDlpConfigResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdateDlpReportRequest$ {
    /** @deprecated use `UpdateDlpReportRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateDlpReportRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateDlpReportRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateDlpReportRequest$Outbound, z.ZodTypeDef, UpdateDlpReportRequest>;
    /** @deprecated use `UpdateDlpReportRequest$Outbound` instead. */
    type Outbound = UpdateDlpReportRequest$Outbound;
}

/** @internal */
declare const UpdateDlpReportRequest$inboundSchema: z.ZodType<UpdateDlpReportRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type UpdateDlpReportRequest$Outbound = {
    config?: DlpConfig$Outbound | undefined;
    frequency?: string | undefined;
    status?: string | undefined;
    autoHideDocs?: boolean | undefined;
    reportName?: string | undefined;
};

/** @internal */
declare const UpdateDlpReportRequest$outboundSchema: z.ZodType<UpdateDlpReportRequest$Outbound, z.ZodTypeDef, UpdateDlpReportRequest>;

declare type UpdateDlpReportRequest = {
    /**
     * Detailed configuration of what documents and sensitive content will be scanned.
     */
    config?: DlpConfig | undefined;
    /**
     * Interval between scans. DAILY is deprecated.
     */
    frequency?: DlpFrequency | undefined;
    /**
     * The status of the policy/report. Only ACTIVE status will be picked for scans.
     */
    status?: DlpReportStatus | undefined;
    /**
     * The new autoHideDoc boolean the policy will be updated to if provided.
     */
    autoHideDocs?: boolean | undefined;
    /**
     * The new name of the policy if provided.
     */
    reportName?: string | undefined;
};

declare function updateDlpReportRequestFromJSON(jsonString: string): Result<UpdateDlpReportRequest, SDKValidationError>;

declare function updateDlpReportRequestToJSON(updateDlpReportRequest: UpdateDlpReportRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdateDlpReportResponse$ {
    /** @deprecated use `UpdateDlpReportResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateDlpReportResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateDlpReportResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateDlpReportResponse$Outbound, z.ZodTypeDef, UpdateDlpReportResponse>;
    /** @deprecated use `UpdateDlpReportResponse$Outbound` instead. */
    type Outbound = UpdateDlpReportResponse$Outbound;
}

/** @internal */
declare const UpdateDlpReportResponse$inboundSchema: z.ZodType<UpdateDlpReportResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type UpdateDlpReportResponse$Outbound = {
    result?: string | undefined;
};

/** @internal */
declare const UpdateDlpReportResponse$outboundSchema: z.ZodType<UpdateDlpReportResponse$Outbound, z.ZodTypeDef, UpdateDlpReportResponse>;

declare type UpdateDlpReportResponse = {
    result?: DlpSimpleResult | undefined;
};

declare function updateDlpReportResponseFromJSON(jsonString: string): Result<UpdateDlpReportResponse, SDKValidationError>;

declare function updateDlpReportResponseToJSON(updateDlpReportResponse: UpdateDlpReportResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdateDocumentVisibilityOverridesRequest$ {
    /** @deprecated use `UpdateDocumentVisibilityOverridesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateDocumentVisibilityOverridesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateDocumentVisibilityOverridesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateDocumentVisibilityOverridesRequest$Outbound, z.ZodTypeDef, UpdateDocumentVisibilityOverridesRequest>;
    /** @deprecated use `UpdateDocumentVisibilityOverridesRequest$Outbound` instead. */
    type Outbound = UpdateDocumentVisibilityOverridesRequest$Outbound;
}

/** @internal */
declare const UpdateDocumentVisibilityOverridesRequest$inboundSchema: z.ZodType<UpdateDocumentVisibilityOverridesRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type UpdateDocumentVisibilityOverridesRequest$Outbound = {
    visibilityOverrides?: Array<DocumentVisibilityOverride$Outbound> | undefined;
};

/** @internal */
declare const UpdateDocumentVisibilityOverridesRequest$outboundSchema: z.ZodType<UpdateDocumentVisibilityOverridesRequest$Outbound, z.ZodTypeDef, UpdateDocumentVisibilityOverridesRequest>;

declare type UpdateDocumentVisibilityOverridesRequest = {
    visibilityOverrides?: Array<DocumentVisibilityOverride> | undefined;
};

declare function updateDocumentVisibilityOverridesRequestFromJSON(jsonString: string): Result<UpdateDocumentVisibilityOverridesRequest, SDKValidationError>;

declare function updateDocumentVisibilityOverridesRequestToJSON(updateDocumentVisibilityOverridesRequest: UpdateDocumentVisibilityOverridesRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdateDocumentVisibilityOverridesResponse$ {
    /** @deprecated use `UpdateDocumentVisibilityOverridesResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateDocumentVisibilityOverridesResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateDocumentVisibilityOverridesResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateDocumentVisibilityOverridesResponse$Outbound, z.ZodTypeDef, UpdateDocumentVisibilityOverridesResponse>;
    /** @deprecated use `UpdateDocumentVisibilityOverridesResponse$Outbound` instead. */
    type Outbound = UpdateDocumentVisibilityOverridesResponse$Outbound;
}

/** @internal */
declare const UpdateDocumentVisibilityOverridesResponse$inboundSchema: z.ZodType<UpdateDocumentVisibilityOverridesResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type UpdateDocumentVisibilityOverridesResponse$Outbound = {
    results?: Array<DocumentVisibilityUpdateResult$Outbound> | undefined;
};

/** @internal */
declare const UpdateDocumentVisibilityOverridesResponse$outboundSchema: z.ZodType<UpdateDocumentVisibilityOverridesResponse$Outbound, z.ZodTypeDef, UpdateDocumentVisibilityOverridesResponse>;

declare type UpdateDocumentVisibilityOverridesResponse = {
    /**
     * The documents and whether their visibility was successfully updated.
     */
    results?: Array<DocumentVisibilityUpdateResult> | undefined;
};

declare function updateDocumentVisibilityOverridesResponseFromJSON(jsonString: string): Result<UpdateDocumentVisibilityOverridesResponse, SDKValidationError>;

declare function updateDocumentVisibilityOverridesResponseToJSON(updateDocumentVisibilityOverridesResponse: UpdateDocumentVisibilityOverridesResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdatePermissionsRequest$ {
    /** @deprecated use `UpdatePermissionsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdatePermissionsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdatePermissionsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdatePermissionsRequest$Outbound, z.ZodTypeDef, UpdatePermissionsRequest>;
    /** @deprecated use `UpdatePermissionsRequest$Outbound` instead. */
    type Outbound = UpdatePermissionsRequest$Outbound;
}

/** @internal */
declare const UpdatePermissionsRequest$inboundSchema: z.ZodType<UpdatePermissionsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type UpdatePermissionsRequest$Outbound = {
    datasource: string;
    objectType?: string | undefined;
    id?: string | undefined;
    viewURL?: string | undefined;
    permissions: DocumentPermissionsDefinition$Outbound;
};

/** @internal */
declare const UpdatePermissionsRequest$outboundSchema: z.ZodType<UpdatePermissionsRequest$Outbound, z.ZodTypeDef, UpdatePermissionsRequest>;

/**
 * Describes the request body of the /updatepermissions API call
 */
declare type UpdatePermissionsRequest = {
    datasource: string;
    /**
     * The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
     */
    objectType?: string | undefined;
    /**
     * The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
     */
    id?: string | undefined;
    /**
     * The permalink for viewing the document. **Note: viewURL is a required field if id was not set when uploading the document.**'
     *
     * @remarks
     */
    viewURL?: string | undefined;
    /**
     * describes the access control details of the document
     */
    permissions: DocumentPermissionsDefinition;
};

declare function updatePermissionsRequestFromJSON(jsonString: string): Result<UpdatePermissionsRequest, SDKValidationError>;

declare function updatePermissionsRequestToJSON(updatePermissionsRequest: UpdatePermissionsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdatepolicyRequest$ {
    /** @deprecated use `UpdatepolicyRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdatepolicyRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdatepolicyRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdatepolicyRequest$Outbound, z.ZodTypeDef, UpdatepolicyRequest>;
    /** @deprecated use `UpdatepolicyRequest$Outbound` instead. */
    type Outbound = UpdatepolicyRequest$Outbound;
}

/** @internal */
declare const UpdatepolicyRequest$inboundSchema: z.ZodType<UpdatepolicyRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type UpdatepolicyRequest$Outbound = {
    id: string;
    UpdateDlpReportRequest: components.UpdateDlpReportRequest$Outbound;
};

/** @internal */
declare const UpdatepolicyRequest$outboundSchema: z.ZodType<UpdatepolicyRequest$Outbound, z.ZodTypeDef, UpdatepolicyRequest>;

declare type UpdatepolicyRequest = {
    /**
     * The id of the policy to fetch.
     */
    id: string;
    updateDlpReportRequest: components.UpdateDlpReportRequest;
};

declare function updatepolicyRequestFromJSON(jsonString: string): Result<UpdatepolicyRequest, SDKValidationError>;

declare function updatepolicyRequestToJSON(updatepolicyRequest: UpdatepolicyRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdateShortcutRequest$ {
    /** @deprecated use `UpdateShortcutRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateShortcutRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateShortcutRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateShortcutRequest$Outbound, z.ZodTypeDef, UpdateShortcutRequest>;
    /** @deprecated use `UpdateShortcutRequest$Outbound` instead. */
    type Outbound = UpdateShortcutRequest$Outbound;
}

/** @internal */
declare const UpdateShortcutRequest$inboundSchema: z.ZodType<UpdateShortcutRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type UpdateShortcutRequest$Outbound = {
    id: number;
    inputAlias?: string | undefined;
    destinationUrl?: string | undefined;
    destinationDocumentId?: string | undefined;
    description?: string | undefined;
    unlisted?: boolean | undefined;
    urlTemplate?: string | undefined;
    addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
    removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
};

/** @internal */
declare const UpdateShortcutRequest$outboundSchema: z.ZodType<UpdateShortcutRequest$Outbound, z.ZodTypeDef, UpdateShortcutRequest>;

declare type UpdateShortcutRequest = {
    /**
     * The opaque id of the user generated content.
     */
    id: number;
    /**
     * Link text following go/ prefix as entered by the user.
     */
    inputAlias?: string | undefined;
    /**
     * Destination URL for the shortcut.
     */
    destinationUrl?: string | undefined;
    /**
     * Glean Document ID for the URL, if known.
     */
    destinationDocumentId?: string | undefined;
    /**
     * A short, plain text blurb to help people understand the intent of the shortcut.
     */
    description?: string | undefined;
    /**
     * Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only.
     */
    unlisted?: boolean | undefined;
    /**
     * For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
     */
    urlTemplate?: string | undefined;
    /**
     * A list of user roles added for the Shortcut.
     */
    addedRoles?: Array<UserRoleSpecification> | undefined;
    /**
     * A list of user roles removed for the Shortcut.
     */
    removedRoles?: Array<UserRoleSpecification> | undefined;
};

declare function updateShortcutRequestFromJSON(jsonString: string): Result<UpdateShortcutRequest, SDKValidationError>;

declare function updateShortcutRequestToJSON(updateShortcutRequest: UpdateShortcutRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdateShortcutResponse$ {
    /** @deprecated use `UpdateShortcutResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateShortcutResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateShortcutResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateShortcutResponse$Outbound, z.ZodTypeDef, UpdateShortcutResponse>;
    /** @deprecated use `UpdateShortcutResponse$Outbound` instead. */
    type Outbound = UpdateShortcutResponse$Outbound;
}

/** @internal */
declare const UpdateShortcutResponse$inboundSchema: z.ZodType<UpdateShortcutResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type UpdateShortcutResponse$Outbound = {
    shortcut?: Shortcut$Outbound | undefined;
    error?: ShortcutError$Outbound | undefined;
};

/** @internal */
declare const UpdateShortcutResponse$outboundSchema: z.ZodType<UpdateShortcutResponse$Outbound, z.ZodTypeDef, UpdateShortcutResponse>;

declare type UpdateShortcutResponse = {
    shortcut?: Shortcut | undefined;
    error?: ShortcutError | undefined;
};

declare function updateShortcutResponseFromJSON(jsonString: string): Result<UpdateShortcutResponse, SDKValidationError>;

declare function updateShortcutResponseToJSON(updateShortcutResponse: UpdateShortcutResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UpdateType$ {
    /** @deprecated use `UpdateType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Actionable: "ACTIONABLE";
        readonly Informative: "INFORMATIVE";
    }>;
    /** @deprecated use `UpdateType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Actionable: "ACTIONABLE";
        readonly Informative: "INFORMATIVE";
    }>;
}

/** @internal */
declare const UpdateType$inboundSchema: z.ZodNativeEnum<typeof UpdateType>;

/** @internal */
declare const UpdateType$outboundSchema: z.ZodNativeEnum<typeof UpdateType>;

/**
 * Optional type classification for the update.
 */
declare const UpdateType: {
    readonly Actionable: "ACTIONABLE";
    readonly Informative: "INFORMATIVE";
};

/**
 * Optional type classification for the update.
 */
declare type UpdateType = ClosedEnum<typeof UpdateType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UploadChatFilesRequest$ {
    /** @deprecated use `UploadChatFilesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadChatFilesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadChatFilesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadChatFilesRequest$Outbound, z.ZodTypeDef, UploadChatFilesRequest>;
    /** @deprecated use `UploadChatFilesRequest$Outbound` instead. */
    type Outbound = UploadChatFilesRequest$Outbound;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UploadchatfilesRequest$ {
    /** @deprecated use `UploadchatfilesRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadchatfilesRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadchatfilesRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadchatfilesRequest$Outbound, z.ZodTypeDef, UploadchatfilesRequest>;
    /** @deprecated use `UploadchatfilesRequest$Outbound` instead. */
    type Outbound = UploadchatfilesRequest$Outbound;
}

/** @internal */
declare const UploadChatFilesRequest$inboundSchema: z.ZodType<UploadChatFilesRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare const UploadchatfilesRequest$inboundSchema: z.ZodType<UploadchatfilesRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type UploadChatFilesRequest$Outbound = {
    files: Array<FileT$Outbound>;
};

/** @internal */
declare type UploadchatfilesRequest$Outbound = {
    timezoneOffset?: number | undefined;
    UploadChatFilesRequest: components.UploadChatFilesRequest$Outbound;
};

/** @internal */
declare const UploadChatFilesRequest$outboundSchema: z.ZodType<UploadChatFilesRequest$Outbound, z.ZodTypeDef, UploadChatFilesRequest>;

/** @internal */
declare const UploadchatfilesRequest$outboundSchema: z.ZodType<UploadchatfilesRequest$Outbound, z.ZodTypeDef, UploadchatfilesRequest>;

declare type UploadChatFilesRequest = {
    /**
     * Raw files to be uploaded for chat in binary format.
     */
    files: Array<FileT>;
};

declare type UploadchatfilesRequest = {
    /**
     * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
     */
    timezoneOffset?: number | undefined;
    uploadChatFilesRequest: components.UploadChatFilesRequest;
};

declare function uploadChatFilesRequestFromJSON(jsonString: string): Result<UploadChatFilesRequest, SDKValidationError>;

declare function uploadchatfilesRequestFromJSON(jsonString: string): Result<UploadchatfilesRequest, SDKValidationError>;

declare function uploadChatFilesRequestToJSON(uploadChatFilesRequest: UploadChatFilesRequest): string;

declare function uploadchatfilesRequestToJSON(uploadchatfilesRequest: UploadchatfilesRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UploadChatFilesResponse$ {
    /** @deprecated use `UploadChatFilesResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadChatFilesResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadChatFilesResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadChatFilesResponse$Outbound, z.ZodTypeDef, UploadChatFilesResponse>;
    /** @deprecated use `UploadChatFilesResponse$Outbound` instead. */
    type Outbound = UploadChatFilesResponse$Outbound;
}

/** @internal */
declare const UploadChatFilesResponse$inboundSchema: z.ZodType<UploadChatFilesResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type UploadChatFilesResponse$Outbound = {
    files?: Array<ChatFile$Outbound> | undefined;
};

/** @internal */
declare const UploadChatFilesResponse$outboundSchema: z.ZodType<UploadChatFilesResponse$Outbound, z.ZodTypeDef, UploadChatFilesResponse>;

declare type UploadChatFilesResponse = {
    /**
     * Files uploaded for chat.
     */
    files?: Array<ChatFile> | undefined;
};

declare function uploadChatFilesResponseFromJSON(jsonString: string): Result<UploadChatFilesResponse, SDKValidationError>;

declare function uploadChatFilesResponseToJSON(uploadChatFilesResponse: UploadChatFilesResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UploadShortcutsRequest$ {
    /** @deprecated use `UploadShortcutsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UploadShortcutsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UploadShortcutsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UploadShortcutsRequest$Outbound, z.ZodTypeDef, UploadShortcutsRequest>;
    /** @deprecated use `UploadShortcutsRequest$Outbound` instead. */
    type Outbound = UploadShortcutsRequest$Outbound;
}

/** @internal */
declare const UploadShortcutsRequest$inboundSchema: z.ZodType<UploadShortcutsRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type UploadShortcutsRequest$Outbound = {
    uploadId: string;
    isFirstPage?: boolean | undefined;
    isLastPage?: boolean | undefined;
    forceRestartUpload?: boolean | undefined;
    shortcuts: Array<IndexingShortcut$Outbound>;
};

/** @internal */
declare const UploadShortcutsRequest$outboundSchema: z.ZodType<UploadShortcutsRequest$Outbound, z.ZodTypeDef, UploadShortcutsRequest>;

/**
 * Describes the request body of the /uploadshortcuts API call
 */
declare type UploadShortcutsRequest = {
    /**
     * Unique id that must be used for this bulk upload instance
     */
    uploadId: string;
    /**
     * true if this is the first page of the upload. Defaults to false
     */
    isFirstPage?: boolean | undefined;
    /**
     * true if this is the last page of the upload. Defaults to false
     */
    isLastPage?: boolean | undefined;
    /**
     * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
     */
    forceRestartUpload?: boolean | undefined;
    /**
     * Batch of shortcuts information
     */
    shortcuts: Array<IndexingShortcut>;
};

declare function uploadShortcutsRequestFromJSON(jsonString: string): Result<UploadShortcutsRequest, SDKValidationError>;

declare function uploadShortcutsRequestToJSON(uploadShortcutsRequest: UploadShortcutsRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UploadStatusEnum$ {
    /** @deprecated use `UploadStatusEnum$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Uploaded: "UPLOADED";
        readonly NotUploaded: "NOT_UPLOADED";
        readonly StatusUnknown: "STATUS_UNKNOWN";
    }>;
    /** @deprecated use `UploadStatusEnum$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Uploaded: "UPLOADED";
        readonly NotUploaded: "NOT_UPLOADED";
        readonly StatusUnknown: "STATUS_UNKNOWN";
    }>;
}

/** @internal */
declare const UploadStatusEnum$inboundSchema: z.ZodNativeEnum<typeof UploadStatusEnum>;

/** @internal */
declare const UploadStatusEnum$outboundSchema: z.ZodNativeEnum<typeof UploadStatusEnum>;

/**
 * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
 */
declare const UploadStatusEnum: {
    readonly Uploaded: "UPLOADED";
    readonly NotUploaded: "NOT_UPLOADED";
    readonly StatusUnknown: "STATUS_UNKNOWN";
};

/**
 * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
 */
declare type UploadStatusEnum = ClosedEnum<typeof UploadStatusEnum>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace User$ {
    /** @deprecated use `User$inboundSchema` instead. */
    const inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown>;
    /** @deprecated use `User$outboundSchema` instead. */
    const outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User>;
    /** @deprecated use `User$Outbound` instead. */
    type Outbound = User$Outbound;
}

/** @internal */
declare const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown>;

/** @internal */
declare type User$Outbound = {
    userID?: string | undefined;
    origID?: string | undefined;
};

/** @internal */
declare const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User>;

declare type User = {
    /**
     * An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).
     */
    userID?: string | undefined;
    /**
     * An opaque user ID for the authenticated user (ignores actas).
     */
    origID?: string | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UserActivity$ {
    /** @deprecated use `UserActivity$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserActivity, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserActivity$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserActivity$Outbound, z.ZodTypeDef, UserActivity>;
    /** @deprecated use `UserActivity$Outbound` instead. */
    type Outbound = UserActivity$Outbound;
}

/** @internal */
declare const UserActivity$inboundSchema: z.ZodType<UserActivity, z.ZodTypeDef, unknown>;

/** @internal */
declare type UserActivity$Outbound = {
    actor?: Person$Outbound | undefined;
    timestamp?: number | undefined;
    action?: string | undefined;
    aggregateVisitCount?: CountInfo$Outbound | undefined;
};

/** @internal */
declare const UserActivity$outboundSchema: z.ZodType<UserActivity$Outbound, z.ZodTypeDef, UserActivity>;

declare type UserActivity = {
    actor?: Person | undefined;
    /**
     * Unix timestamp of the activity (in seconds since epoch UTC).
     */
    timestamp?: number | undefined;
    /**
     * The action for the activity
     */
    action?: UserActivityAction | undefined;
    aggregateVisitCount?: CountInfo | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UserActivityAction$ {
    /** @deprecated use `UserActivityAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Add: "ADD";
        readonly AddReminder: "ADD_REMINDER";
        readonly Click: "CLICK";
        readonly Comment: "COMMENT";
        readonly Delete: "DELETE";
        readonly Dismiss: "DISMISS";
        readonly Edit: "EDIT";
        readonly Mention: "MENTION";
        readonly Move: "MOVE";
        readonly Other: "OTHER";
        readonly Restore: "RESTORE";
        readonly Unknown: "UNKNOWN";
        readonly Verify: "VERIFY";
        readonly View: "VIEW";
    }>;
    /** @deprecated use `UserActivityAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Add: "ADD";
        readonly AddReminder: "ADD_REMINDER";
        readonly Click: "CLICK";
        readonly Comment: "COMMENT";
        readonly Delete: "DELETE";
        readonly Dismiss: "DISMISS";
        readonly Edit: "EDIT";
        readonly Mention: "MENTION";
        readonly Move: "MOVE";
        readonly Other: "OTHER";
        readonly Restore: "RESTORE";
        readonly Unknown: "UNKNOWN";
        readonly Verify: "VERIFY";
        readonly View: "VIEW";
    }>;
}

/** @internal */
declare const UserActivityAction$inboundSchema: z.ZodNativeEnum<typeof UserActivityAction>;

/** @internal */
declare const UserActivityAction$outboundSchema: z.ZodNativeEnum<typeof UserActivityAction>;

/**
 * The action for the activity
 */
declare const UserActivityAction: {
    readonly Add: "ADD";
    readonly AddReminder: "ADD_REMINDER";
    readonly Click: "CLICK";
    readonly Comment: "COMMENT";
    readonly Delete: "DELETE";
    readonly Dismiss: "DISMISS";
    readonly Edit: "EDIT";
    readonly Mention: "MENTION";
    readonly Move: "MOVE";
    readonly Other: "OTHER";
    readonly Restore: "RESTORE";
    readonly Unknown: "UNKNOWN";
    readonly Verify: "VERIFY";
    readonly View: "VIEW";
};

/**
 * The action for the activity
 */
declare type UserActivityAction = ClosedEnum<typeof UserActivityAction>;

declare function userActivityFromJSON(jsonString: string): Result<UserActivity, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UserActivityInsight$ {
    /** @deprecated use `UserActivityInsight$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserActivityInsight, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserActivityInsight$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserActivityInsight$Outbound, z.ZodTypeDef, UserActivityInsight>;
    /** @deprecated use `UserActivityInsight$Outbound` instead. */
    type Outbound = UserActivityInsight$Outbound;
}

/** @internal */
declare const UserActivityInsight$inboundSchema: z.ZodType<UserActivityInsight, z.ZodTypeDef, unknown>;

/** @internal */
declare type UserActivityInsight$Outbound = {
    user: Person$Outbound;
    activity: string;
    lastActivityTimestamp?: number | undefined;
    activityCount?: CountInfo$Outbound | undefined;
    activeDayCount?: CountInfo$Outbound | undefined;
};

/** @internal */
declare const UserActivityInsight$outboundSchema: z.ZodType<UserActivityInsight$Outbound, z.ZodTypeDef, UserActivityInsight>;

declare type UserActivityInsight = {
    user: Person;
    /**
     * Activity e.g. search, home page visit or all.
     */
    activity: ActivityEnum;
    /**
     * Unix timestamp of the last activity (in seconds since epoch UTC).
     */
    lastActivityTimestamp?: number | undefined;
    activityCount?: CountInfo | undefined;
    activeDayCount?: CountInfo | undefined;
};

declare function userActivityInsightFromJSON(jsonString: string): Result<UserActivityInsight, SDKValidationError>;

declare function userActivityInsightToJSON(userActivityInsight: UserActivityInsight): string;

declare function userActivityToJSON(userActivity: UserActivity): string;

declare function userFromJSON(jsonString: string): Result<User, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UserGeneratedContentId$ {
    /** @deprecated use `UserGeneratedContentId$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserGeneratedContentId, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserGeneratedContentId$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserGeneratedContentId$Outbound, z.ZodTypeDef, UserGeneratedContentId>;
    /** @deprecated use `UserGeneratedContentId$Outbound` instead. */
    type Outbound = UserGeneratedContentId$Outbound;
}

/** @internal */
declare const UserGeneratedContentId$inboundSchema: z.ZodType<UserGeneratedContentId, z.ZodTypeDef, unknown>;

/** @internal */
declare type UserGeneratedContentId$Outbound = {
    id?: number | undefined;
};

/** @internal */
declare const UserGeneratedContentId$outboundSchema: z.ZodType<UserGeneratedContentId$Outbound, z.ZodTypeDef, UserGeneratedContentId>;

declare type UserGeneratedContentId = {
    /**
     * The opaque id of the user generated content.
     */
    id?: number | undefined;
};

declare function userGeneratedContentIdFromJSON(jsonString: string): Result<UserGeneratedContentId, SDKValidationError>;

declare function userGeneratedContentIdToJSON(userGeneratedContentId: UserGeneratedContentId): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UserInsightsResponse$ {
    /** @deprecated use `UserInsightsResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserInsightsResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserInsightsResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserInsightsResponse$Outbound, z.ZodTypeDef, UserInsightsResponse>;
    /** @deprecated use `UserInsightsResponse$Outbound` instead. */
    type Outbound = UserInsightsResponse$Outbound;
}

/** @internal */
declare const UserInsightsResponse$inboundSchema: z.ZodType<UserInsightsResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type UserInsightsResponse$Outbound = {
    lastLogTimestamp?: number | undefined;
    activityInsights?: Array<UserActivityInsight$Outbound> | undefined;
    inactiveInsights?: Array<UserActivityInsight$Outbound> | undefined;
    totalTeammates?: number | undefined;
    totalActiveUsers?: number | undefined;
    departments?: Array<string> | undefined;
};

/** @internal */
declare const UserInsightsResponse$outboundSchema: z.ZodType<UserInsightsResponse$Outbound, z.ZodTypeDef, UserInsightsResponse>;

declare type UserInsightsResponse = {
    /**
     * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
     */
    lastLogTimestamp?: number | undefined;
    /**
     * Insights for all active users with respect to set of actions.
     */
    activityInsights?: Array<UserActivityInsight> | undefined;
    /**
     * Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0.
     */
    inactiveInsights?: Array<UserActivityInsight> | undefined;
    /**
     * Total number of teammates that have logged in to the product, that are still valid teammates.
     */
    totalTeammates?: number | undefined;
    /**
     * Total number of active users in the requested period.
     */
    totalActiveUsers?: number | undefined;
    /**
     * list of departments applicable for users tab.
     */
    departments?: Array<string> | undefined;
};

declare function userInsightsResponseFromJSON(jsonString: string): Result<UserInsightsResponse, SDKValidationError>;

declare function userInsightsResponseToJSON(userInsightsResponse: UserInsightsResponse): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UserReferenceDefinition$ {
    /** @deprecated use `UserReferenceDefinition$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserReferenceDefinition, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserReferenceDefinition$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserReferenceDefinition$Outbound, z.ZodTypeDef, UserReferenceDefinition>;
    /** @deprecated use `UserReferenceDefinition$Outbound` instead. */
    type Outbound = UserReferenceDefinition$Outbound;
}

/** @internal */
declare const UserReferenceDefinition$inboundSchema: z.ZodType<UserReferenceDefinition, z.ZodTypeDef, unknown>;

/** @internal */
declare type UserReferenceDefinition$Outbound = {
    email?: string | undefined;
    datasourceUserId?: string | undefined;
    name?: string | undefined;
};

/** @internal */
declare const UserReferenceDefinition$outboundSchema: z.ZodType<UserReferenceDefinition$Outbound, z.ZodTypeDef, UserReferenceDefinition>;

/**
 * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
 */
declare type UserReferenceDefinition = {
    email?: string | undefined;
    /**
     * some datasources refer to the user by the datasource user id in the document
     */
    datasourceUserId?: string | undefined;
    name?: string | undefined;
};

declare function userReferenceDefinitionFromJSON(jsonString: string): Result<UserReferenceDefinition, SDKValidationError>;

declare function userReferenceDefinitionToJSON(userReferenceDefinition: UserReferenceDefinition): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UserRole$ {
    /** @deprecated use `UserRole$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Viewer: "VIEWER";
        readonly AnswerModerator: "ANSWER_MODERATOR";
        readonly Editor: "EDITOR";
        readonly Verifier: "VERIFIER";
    }>;
    /** @deprecated use `UserRole$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Viewer: "VIEWER";
        readonly AnswerModerator: "ANSWER_MODERATOR";
        readonly Editor: "EDITOR";
        readonly Verifier: "VERIFIER";
    }>;
}

/** @internal */
declare const UserRole$inboundSchema: z.ZodNativeEnum<typeof UserRole>;

/** @internal */
declare const UserRole$outboundSchema: z.ZodNativeEnum<typeof UserRole>;

/**
 * A user's role with respect to a specific document.
 */
declare const UserRole: {
    readonly Owner: "OWNER";
    readonly Viewer: "VIEWER";
    readonly AnswerModerator: "ANSWER_MODERATOR";
    readonly Editor: "EDITOR";
    readonly Verifier: "VERIFIER";
};

/**
 * A user's role with respect to a specific document.
 */
declare type UserRole = ClosedEnum<typeof UserRole>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UserRoleSpecification$ {
    /** @deprecated use `UserRoleSpecification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserRoleSpecification, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserRoleSpecification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserRoleSpecification$Outbound, z.ZodTypeDef, UserRoleSpecification>;
    /** @deprecated use `UserRoleSpecification$Outbound` instead. */
    type Outbound = UserRoleSpecification$Outbound;
}

/** @internal */
declare const UserRoleSpecification$inboundSchema: z.ZodType<UserRoleSpecification, z.ZodTypeDef, unknown>;

/** @internal */
declare type UserRoleSpecification$Outbound = {
    sourceDocumentSpec?: DocumentSpecUnion$Outbound | undefined;
    person?: Person$Outbound | undefined;
    group?: Group$Outbound | undefined;
    role: string;
};

/** @internal */
declare const UserRoleSpecification$outboundSchema: z.ZodType<UserRoleSpecification$Outbound, z.ZodTypeDef, UserRoleSpecification>;

declare type UserRoleSpecification = {
    sourceDocumentSpec?: DocumentSpecUnion | undefined;
    person?: Person | undefined;
    group?: Group | undefined;
    /**
     * A user's role with respect to a specific document.
     */
    role: UserRole;
};

declare function userRoleSpecificationFromJSON(jsonString: string): Result<UserRoleSpecification, SDKValidationError>;

declare function userRoleSpecificationToJSON(userRoleSpecification: UserRoleSpecification): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UserStatusResponse$ {
    /** @deprecated use `UserStatusResponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserStatusResponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserStatusResponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserStatusResponse$Outbound, z.ZodTypeDef, UserStatusResponse>;
    /** @deprecated use `UserStatusResponse$Outbound` instead. */
    type Outbound = UserStatusResponse$Outbound;
}

/** @internal */
declare const UserStatusResponse$inboundSchema: z.ZodType<UserStatusResponse, z.ZodTypeDef, unknown>;

/** @internal */
declare type UserStatusResponse$Outbound = {
    isActiveUser?: boolean | undefined;
    uploadStatus?: string | undefined;
    lastUploadedAt?: string | undefined;
};

/** @internal */
declare const UserStatusResponse$outboundSchema: z.ZodType<UserStatusResponse$Outbound, z.ZodTypeDef, UserStatusResponse>;

/**
 * Describes the user status response body
 */
declare type UserStatusResponse = {
    /**
     * Whether the user is active or not
     */
    isActiveUser?: boolean | undefined;
    /**
     * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
     */
    uploadStatus?: UploadStatusEnum | undefined;
    /**
     * Time of last successful upload for the user, in ISO 8601 format
     */
    lastUploadedAt?: string | undefined;
};

declare function userStatusResponseFromJSON(jsonString: string): Result<UserStatusResponse, SDKValidationError>;

declare function userStatusResponseToJSON(userStatusResponse: UserStatusResponse): string;

declare function userToJSON(user: User): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace UserViewInfo$ {
    /** @deprecated use `UserViewInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserViewInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserViewInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserViewInfo$Outbound, z.ZodTypeDef, UserViewInfo>;
    /** @deprecated use `UserViewInfo$Outbound` instead. */
    type Outbound = UserViewInfo$Outbound;
}

/** @internal */
declare const UserViewInfo$inboundSchema: z.ZodType<UserViewInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type UserViewInfo$Outbound = {
    docId?: string | undefined;
    docTitle?: string | undefined;
    docUrl?: string | undefined;
};

/** @internal */
declare const UserViewInfo$outboundSchema: z.ZodType<UserViewInfo$Outbound, z.ZodTypeDef, UserViewInfo>;

declare type UserViewInfo = {
    /**
     * Unique Glean Document ID of the associated document.
     */
    docId?: string | undefined;
    /**
     * Title of associated document.
     */
    docTitle?: string | undefined;
    /**
     * URL of associated document.
     */
    docUrl?: string | undefined;
};

declare function userViewInfoFromJSON(jsonString: string): Result<UserViewInfo, SDKValidationError>;

declare function userViewInfoToJSON(userViewInfo: UserViewInfo): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Value$ {
    /** @deprecated use `Value$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown>;
    /** @deprecated use `Value$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Value$Outbound, z.ZodTypeDef, Value>;
    /** @deprecated use `Value$Outbound` instead. */
    type Outbound = Value$Outbound;
}

/** @internal */
declare const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown>;

/** @internal */
declare type Value$Outbound = {};

/** @internal */
declare const Value$outboundSchema: z.ZodType<Value$Outbound, z.ZodTypeDef, Value>;

/**
 * Either a string or HypertextField. When OpenAPI Generator supports oneOf, we can semantically enforce this in the docs.
 */
declare type Value = {};

declare function valueFromJSON(jsonString: string): Result<Value, SDKValidationError>;

declare function valueToJSON(value: Value): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Verification$ {
    /** @deprecated use `Verification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Verification, z.ZodTypeDef, unknown>;
    /** @deprecated use `Verification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Verification$Outbound, z.ZodTypeDef, Verification>;
    /** @deprecated use `Verification$Outbound` instead. */
    type Outbound = Verification$Outbound;
}

/** @internal */
declare const Verification$inboundSchema: z.ZodType<Verification, z.ZodTypeDef, unknown>;

/** @internal */
declare type Verification$Outbound = {
    state: string;
    metadata?: VerificationMetadata$Outbound | undefined;
};

/** @internal */
declare const Verification$outboundSchema: z.ZodType<Verification$Outbound, z.ZodTypeDef, Verification>;

declare type Verification = {
    /**
     * The verification state for the document.
     */
    state: State;
    metadata?: VerificationMetadata | undefined;
};

declare class Verification_2 extends ClientSDK {
    /**
     * Create verification
     *
     * @remarks
     * Creates a verification reminder for the document. Users can create verification reminders from different product surfaces.
     */
    addReminder(request: components.ReminderRequest, options?: RequestOptions): Promise<components.Verification>;
    /**
     * List verifications
     *
     * @remarks
     * Returns the information to be rendered in verification dashboard. Includes information for each document owned by user regarding their verifications.
     */
    list(count?: number | undefined, options?: RequestOptions): Promise<components.VerificationFeed>;
    /**
     * Update verification
     *
     * @remarks
     * Verify documents to keep the knowledge up to date within customer corpus.
     */
    verify(request: components.VerifyRequest, options?: RequestOptions): Promise<components.Verification>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace VerificationFeed$ {
    /** @deprecated use `VerificationFeed$inboundSchema` instead. */
    const inboundSchema: z.ZodType<VerificationFeed, z.ZodTypeDef, unknown>;
    /** @deprecated use `VerificationFeed$outboundSchema` instead. */
    const outboundSchema: z.ZodType<VerificationFeed$Outbound, z.ZodTypeDef, VerificationFeed>;
    /** @deprecated use `VerificationFeed$Outbound` instead. */
    type Outbound = VerificationFeed$Outbound;
}

/** @internal */
declare const VerificationFeed$inboundSchema: z.ZodType<VerificationFeed, z.ZodTypeDef, unknown>;

/** @internal */
declare type VerificationFeed$Outbound = {
    documents?: Array<Verification$Outbound> | undefined;
};

/** @internal */
declare const VerificationFeed$outboundSchema: z.ZodType<VerificationFeed$Outbound, z.ZodTypeDef, VerificationFeed>;

declare type VerificationFeed = {
    /**
     * List of document infos that include verification related information for them.
     */
    documents?: Array<Verification> | undefined;
};

declare function verificationFeedFromJSON(jsonString: string): Result<VerificationFeed, SDKValidationError>;

declare function verificationFeedToJSON(verificationFeed: VerificationFeed): string;

declare function verificationFromJSON(jsonString: string): Result<Verification, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace VerificationMetadata$ {
    /** @deprecated use `VerificationMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<VerificationMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `VerificationMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<VerificationMetadata$Outbound, z.ZodTypeDef, VerificationMetadata>;
    /** @deprecated use `VerificationMetadata$Outbound` instead. */
    type Outbound = VerificationMetadata$Outbound;
}

/** @internal */
declare const VerificationMetadata$inboundSchema: z.ZodType<VerificationMetadata, z.ZodTypeDef, unknown>;

/** @internal */
declare type VerificationMetadata$Outbound = {
    lastVerifier?: Person$Outbound | undefined;
    lastVerificationTs?: number | undefined;
    expirationTs?: number | undefined;
    document?: Document$Outbound | undefined;
    reminders?: Array<Reminder$Outbound> | undefined;
    lastReminder?: Reminder$Outbound | undefined;
    visitorCount?: Array<CountInfo$Outbound> | undefined;
    candidateVerifiers?: Array<Person$Outbound> | undefined;
};

/** @internal */
declare const VerificationMetadata$outboundSchema: z.ZodType<VerificationMetadata$Outbound, z.ZodTypeDef, VerificationMetadata>;

declare type VerificationMetadata = {
    lastVerifier?: Person | undefined;
    /**
     * The unix timestamp of the verification (in seconds since epoch UTC).
     */
    lastVerificationTs?: number | undefined;
    /**
     * The unix timestamp of the verification expiration if applicable (in seconds since epoch UTC).
     */
    expirationTs?: number | undefined;
    document?: Document_2 | undefined;
    /**
     * Info about all outstanding verification reminders for the document if exists.
     */
    reminders?: Array<Reminder> | undefined;
    lastReminder?: Reminder | undefined;
    /**
     * Number of visitors to the document during included time periods.
     */
    visitorCount?: Array<CountInfo> | undefined;
    /**
     * List of potential verifiers for the document e.g. old verifiers and/or users with view/edit permissions.
     */
    candidateVerifiers?: Array<Person> | undefined;
};

declare function verificationMetadataFromJSON(jsonString: string): Result<VerificationMetadata, SDKValidationError>;

declare function verificationMetadataToJSON(verificationMetadata: VerificationMetadata): string;

declare function verificationToJSON(verification: Verification): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace VerifyRequest$ {
    /** @deprecated use `VerifyRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<VerifyRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `VerifyRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<VerifyRequest$Outbound, z.ZodTypeDef, VerifyRequest>;
    /** @deprecated use `VerifyRequest$Outbound` instead. */
    type Outbound = VerifyRequest$Outbound;
}

/** @internal */
declare const VerifyRequest$inboundSchema: z.ZodType<VerifyRequest, z.ZodTypeDef, unknown>;

/** @internal */
declare type VerifyRequest$Outbound = {
    documentId: string;
    action?: string | undefined;
};

/** @internal */
declare const VerifyRequest$outboundSchema: z.ZodType<VerifyRequest$Outbound, z.ZodTypeDef, VerifyRequest>;

declare type VerifyRequest = {
    /**
     * The document which is verified.
     */
    documentId: string;
    /**
     * The verification action requested.
     */
    action?: VerifyRequestAction | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace VerifyRequestAction$ {
    /** @deprecated use `VerifyRequestAction$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Verify: "VERIFY";
        readonly Deprecate: "DEPRECATE";
        readonly Unverify: "UNVERIFY";
    }>;
    /** @deprecated use `VerifyRequestAction$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Verify: "VERIFY";
        readonly Deprecate: "DEPRECATE";
        readonly Unverify: "UNVERIFY";
    }>;
}

/** @internal */
declare const VerifyRequestAction$inboundSchema: z.ZodNativeEnum<typeof VerifyRequestAction>;

/** @internal */
declare const VerifyRequestAction$outboundSchema: z.ZodNativeEnum<typeof VerifyRequestAction>;

/**
 * The verification action requested.
 */
declare const VerifyRequestAction: {
    readonly Verify: "VERIFY";
    readonly Deprecate: "DEPRECATE";
    readonly Unverify: "UNVERIFY";
};

/**
 * The verification action requested.
 */
declare type VerifyRequestAction = ClosedEnum<typeof VerifyRequestAction>;

declare function verifyRequestFromJSON(jsonString: string): Result<VerifyRequest, SDKValidationError>;

declare function verifyRequestToJSON(verifyRequest: VerifyRequest): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace ViewerInfo$ {
    /** @deprecated use `ViewerInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ViewerInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `ViewerInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ViewerInfo$Outbound, z.ZodTypeDef, ViewerInfo>;
    /** @deprecated use `ViewerInfo$Outbound` instead. */
    type Outbound = ViewerInfo$Outbound;
}

/** @internal */
declare const ViewerInfo$inboundSchema: z.ZodType<ViewerInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type ViewerInfo$Outbound = {
    role?: string | undefined;
    lastViewedTime?: string | undefined;
};

/** @internal */
declare const ViewerInfo$outboundSchema: z.ZodType<ViewerInfo$Outbound, z.ZodTypeDef, ViewerInfo>;

declare type ViewerInfo = {
    /**
     * DEPRECATED - use permissions instead. Viewer's role on the specific document.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    role?: Role | undefined;
    lastViewedTime?: Date | undefined;
};

declare function viewerInfoFromJSON(jsonString: string): Result<ViewerInfo, SDKValidationError>;

declare function viewerInfoToJSON(viewerInfo: ViewerInfo): string;

declare class Visibilityoverrides extends ClientSDK {
    /**
     * Fetches documents visibility
     *
     * @remarks
     * Fetches the visibility override status of the documents passed.
     */
    list(docIds?: Array<string> | undefined, options?: RequestOptions): Promise<components.GetDocumentVisibilityOverridesResponse>;
    /**
     * Hide or unhide docs
     *
     * @remarks
     * Sets the visibility-override state of the documents specified, effectively hiding or un-hiding documents.
     */
    create(request: components.UpdateDocumentVisibilityOverridesRequest, options?: RequestOptions): Promise<components.UpdateDocumentVisibilityOverridesResponse>;
}

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace WarningType$ {
    /** @deprecated use `WarningType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly LongQuery: "LONG_QUERY";
        readonly QuotedPunctuation: "QUOTED_PUNCTUATION";
        readonly PunctuationOnly: "PUNCTUATION_ONLY";
        readonly CopypastedQuotes: "COPYPASTED_QUOTES";
        readonly InvalidOperator: "INVALID_OPERATOR";
        readonly MaybeInvalidFacetQuery: "MAYBE_INVALID_FACET_QUERY";
        readonly TooManyDatasourceGroups: "TOO_MANY_DATASOURCE_GROUPS";
    }>;
    /** @deprecated use `WarningType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly LongQuery: "LONG_QUERY";
        readonly QuotedPunctuation: "QUOTED_PUNCTUATION";
        readonly PunctuationOnly: "PUNCTUATION_ONLY";
        readonly CopypastedQuotes: "COPYPASTED_QUOTES";
        readonly InvalidOperator: "INVALID_OPERATOR";
        readonly MaybeInvalidFacetQuery: "MAYBE_INVALID_FACET_QUERY";
        readonly TooManyDatasourceGroups: "TOO_MANY_DATASOURCE_GROUPS";
    }>;
}

/** @internal */
declare const WarningType$inboundSchema: z.ZodNativeEnum<typeof WarningType>;

/** @internal */
declare const WarningType$outboundSchema: z.ZodNativeEnum<typeof WarningType>;

/**
 * The type of the warning.
 */
declare const WarningType: {
    readonly LongQuery: "LONG_QUERY";
    readonly QuotedPunctuation: "QUOTED_PUNCTUATION";
    readonly PunctuationOnly: "PUNCTUATION_ONLY";
    readonly CopypastedQuotes: "COPYPASTED_QUOTES";
    readonly InvalidOperator: "INVALID_OPERATOR";
    readonly MaybeInvalidFacetQuery: "MAYBE_INVALID_FACET_QUERY";
    readonly TooManyDatasourceGroups: "TOO_MANY_DATASOURCE_GROUPS";
};

/**
 * The type of the warning.
 */
declare type WarningType = ClosedEnum<typeof WarningType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace Workflow$ {
    /** @deprecated use `Workflow$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Workflow, z.ZodTypeDef, unknown>;
    /** @deprecated use `Workflow$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Workflow$Outbound, z.ZodTypeDef, Workflow>;
    /** @deprecated use `Workflow$Outbound` instead. */
    type Outbound = Workflow$Outbound;
}

/** @internal */
declare const Workflow$inboundSchema: z.ZodType<Workflow, z.ZodTypeDef, unknown>;

/** @internal */
declare type Workflow$Outbound = {
    name?: string | undefined;
    author?: Person$Outbound | undefined;
    createTimestamp?: number | undefined;
    lastUpdateTimestamp?: number | undefined;
    lastUpdatedBy?: Person$Outbound | undefined;
    permissions?: ObjectPermissions$Outbound | undefined;
    id?: string | undefined;
};

/** @internal */
declare const Workflow$outboundSchema: z.ZodType<Workflow$Outbound, z.ZodTypeDef, Workflow>;

declare type Workflow = {
    /**
     * The name of the workflow.
     */
    name?: string | undefined;
    author?: Person | undefined;
    /**
     * Server Unix timestamp of the creation time.
     */
    createTimestamp?: number | undefined;
    /**
     * Server Unix timestamp of the last update time.
     */
    lastUpdateTimestamp?: number | undefined;
    lastUpdatedBy?: Person | undefined;
    permissions?: ObjectPermissions | undefined;
    /**
     * The ID of the workflow.
     */
    id?: string | undefined;
};

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace WorkflowFeedbackInfo$ {
    /** @deprecated use `WorkflowFeedbackInfo$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WorkflowFeedbackInfo, z.ZodTypeDef, unknown>;
    /** @deprecated use `WorkflowFeedbackInfo$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WorkflowFeedbackInfo$Outbound, z.ZodTypeDef, WorkflowFeedbackInfo>;
    /** @deprecated use `WorkflowFeedbackInfo$Outbound` instead. */
    type Outbound = WorkflowFeedbackInfo$Outbound;
}

/** @internal */
declare const WorkflowFeedbackInfo$inboundSchema: z.ZodType<WorkflowFeedbackInfo, z.ZodTypeDef, unknown>;

/** @internal */
declare type WorkflowFeedbackInfo$Outbound = {
    source?: string | undefined;
};

/** @internal */
declare const WorkflowFeedbackInfo$outboundSchema: z.ZodType<WorkflowFeedbackInfo$Outbound, z.ZodTypeDef, WorkflowFeedbackInfo>;

declare type WorkflowFeedbackInfo = {
    /**
     * Where the feedback of the workflow originated from
     */
    source?: WorkflowFeedbackInfoSource | undefined;
};

declare function workflowFeedbackInfoFromJSON(jsonString: string): Result<WorkflowFeedbackInfo, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace WorkflowFeedbackInfoSource$ {
    /** @deprecated use `WorkflowFeedbackInfoSource$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ZeroState: "ZERO_STATE";
        readonly Library: "LIBRARY";
        readonly Homepage: "HOMEPAGE";
    }>;
    /** @deprecated use `WorkflowFeedbackInfoSource$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ZeroState: "ZERO_STATE";
        readonly Library: "LIBRARY";
        readonly Homepage: "HOMEPAGE";
    }>;
}

/** @internal */
declare const WorkflowFeedbackInfoSource$inboundSchema: z.ZodNativeEnum<typeof WorkflowFeedbackInfoSource>;

/** @internal */
declare const WorkflowFeedbackInfoSource$outboundSchema: z.ZodNativeEnum<typeof WorkflowFeedbackInfoSource>;

/**
 * Where the feedback of the workflow originated from
 */
declare const WorkflowFeedbackInfoSource: {
    readonly ZeroState: "ZERO_STATE";
    readonly Library: "LIBRARY";
    readonly Homepage: "HOMEPAGE";
};

/**
 * Where the feedback of the workflow originated from
 */
declare type WorkflowFeedbackInfoSource = ClosedEnum<typeof WorkflowFeedbackInfoSource>;

declare function workflowFeedbackInfoToJSON(workflowFeedbackInfo: WorkflowFeedbackInfo): string;

declare function workflowFromJSON(jsonString: string): Result<Workflow, SDKValidationError>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace WorkflowResult$ {
    /** @deprecated use `WorkflowResult$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WorkflowResult, z.ZodTypeDef, unknown>;
    /** @deprecated use `WorkflowResult$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WorkflowResult$Outbound, z.ZodTypeDef, WorkflowResult>;
    /** @deprecated use `WorkflowResult$Outbound` instead. */
    type Outbound = WorkflowResult$Outbound;
}

/** @internal */
declare const WorkflowResult$inboundSchema: z.ZodType<WorkflowResult, z.ZodTypeDef, unknown>;

/** @internal */
declare type WorkflowResult$Outbound = {
    workflow: Workflow$Outbound;
};

/** @internal */
declare const WorkflowResult$outboundSchema: z.ZodType<WorkflowResult$Outbound, z.ZodTypeDef, WorkflowResult>;

declare type WorkflowResult = {
    workflow: Workflow;
};

declare function workflowResultFromJSON(jsonString: string): Result<WorkflowResult, SDKValidationError>;

declare function workflowResultToJSON(workflowResult: WorkflowResult): string;

declare function workflowToJSON(workflow: Workflow): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace WriteActionParameter$ {
    /** @deprecated use `WriteActionParameter$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WriteActionParameter, z.ZodTypeDef, unknown>;
    /** @deprecated use `WriteActionParameter$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WriteActionParameter$Outbound, z.ZodTypeDef, WriteActionParameter>;
    /** @deprecated use `WriteActionParameter$Outbound` instead. */
    type Outbound = WriteActionParameter$Outbound;
}

/** @internal */
declare const WriteActionParameter$inboundSchema: z.ZodType<WriteActionParameter, z.ZodTypeDef, unknown>;

/** @internal */
declare type WriteActionParameter$Outbound = {
    type?: string | undefined;
    displayName?: string | undefined;
    value?: string | undefined;
    isRequired?: boolean | undefined;
    description?: string | undefined;
    possibleValues?: Array<PossibleValue$Outbound> | undefined;
};

/** @internal */
declare const WriteActionParameter$outboundSchema: z.ZodType<WriteActionParameter$Outbound, z.ZodTypeDef, WriteActionParameter>;

declare type WriteActionParameter = {
    /**
     * The type of the value (e.g., integer, string, boolean, etc.)
     */
    type?: WriteActionParameterType | undefined;
    /**
     * Human readable display name for the key.
     */
    displayName?: string | undefined;
    /**
     * The value of the field.
     */
    value?: string | undefined;
    /**
     * Is the parameter a required field.
     */
    isRequired?: boolean | undefined;
    /**
     * Description of the parameter.
     */
    description?: string | undefined;
    /**
     * Possible values that the parameter can take.
     */
    possibleValues?: Array<PossibleValue> | undefined;
};

declare function writeActionParameterFromJSON(jsonString: string): Result<WriteActionParameter, SDKValidationError>;

declare function writeActionParameterToJSON(writeActionParameter: WriteActionParameter): string;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace WriteActionParameterType$ {
    /** @deprecated use `WriteActionParameterType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Unknown: "UNKNOWN";
        readonly Integer: "INTEGER";
        readonly String: "STRING";
        readonly Boolean: "BOOLEAN";
    }>;
    /** @deprecated use `WriteActionParameterType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Unknown: "UNKNOWN";
        readonly Integer: "INTEGER";
        readonly String: "STRING";
        readonly Boolean: "BOOLEAN";
    }>;
}

/** @internal */
declare const WriteActionParameterType$inboundSchema: z.ZodNativeEnum<typeof WriteActionParameterType>;

/** @internal */
declare const WriteActionParameterType$outboundSchema: z.ZodNativeEnum<typeof WriteActionParameterType>;

/**
 * The type of the value (e.g., integer, string, boolean, etc.)
 */
declare const WriteActionParameterType: {
    readonly Unknown: "UNKNOWN";
    readonly Integer: "INTEGER";
    readonly String: "STRING";
    readonly Boolean: "BOOLEAN";
};

/**
 * The type of the value (e.g., integer, string, boolean, etc.)
 */
declare type WriteActionParameterType = ClosedEnum<typeof WriteActionParameterType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace WriteActionType$ {
    /** @deprecated use `WriteActionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Redirect: "REDIRECT";
        readonly Execution: "EXECUTION";
    }>;
    /** @deprecated use `WriteActionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Redirect: "REDIRECT";
        readonly Execution: "EXECUTION";
    }>;
}

/** @internal */
declare const WriteActionType$inboundSchema: z.ZodNativeEnum<typeof WriteActionType>;

/** @internal */
declare const WriteActionType$outboundSchema: z.ZodNativeEnum<typeof WriteActionType>;

/**
 * Valid only for write actions. Represents the type of write action. REDIRECT - The client renders the URL which contains information for carrying out the action. EXECUTION - Send a request to an external server and execute the action.
 */
declare const WriteActionType: {
    readonly Redirect: "REDIRECT";
    readonly Execution: "EXECUTION";
};

/**
 * Valid only for write actions. Represents the type of write action. REDIRECT - The client renders the URL which contains information for carrying out the action. EXECUTION - Send a request to an external server and execute the action.
 */
declare type WriteActionType = ClosedEnum<typeof WriteActionType>;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
declare namespace WritePermission$ {
    /** @deprecated use `WritePermission$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WritePermission, z.ZodTypeDef, unknown>;
    /** @deprecated use `WritePermission$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WritePermission$Outbound, z.ZodTypeDef, WritePermission>;
    /** @deprecated use `WritePermission$Outbound` instead. */
    type Outbound = WritePermission$Outbound;
}

/** @internal */
declare const WritePermission$inboundSchema: z.ZodType<WritePermission, z.ZodTypeDef, unknown>;

/** @internal */
declare type WritePermission$Outbound = {
    scopeType?: string | undefined;
    create?: boolean | undefined;
    update?: boolean | undefined;
    delete?: boolean | undefined;
};

/** @internal */
declare const WritePermission$outboundSchema: z.ZodType<WritePermission$Outbound, z.ZodTypeDef, WritePermission>;

/**
 * Describes the write permissions levels that a user has for a specific feature
 */
declare type WritePermission = {
    /**
     * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
     */
    scopeType?: ScopeType | undefined;
    /**
     * True if user has create permission for this feature and scope
     */
    create?: boolean | undefined;
    /**
     * True if user has update permission for this feature and scope
     */
    update?: boolean | undefined;
    /**
     * True if user has delete permission for this feature and scope
     */
    delete?: boolean | undefined;
};

declare function writePermissionFromJSON(jsonString: string): Result<WritePermission, SDKValidationError>;

declare function writePermissionToJSON(writePermission: WritePermission): string;

export { }
